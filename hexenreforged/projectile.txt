// Send a warning to block
class WarningTracer : LineTracer
{
	Actor projectile;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKING | Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKPROJECTILE;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					break;
				}
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				if (results.ffloor &&
					(!(results.ffloor.flags & F3DFloor.FF_EXISTS) || !(results.ffloor.flags & F3DFloor.FF_SOLID)))
				{
					results.ffloor = null;
					break;
				}
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor == projectile ||
					results.hitActor == projectile.target ||
					results.hitActor.health <= 0 ||
					(results.hitActor.bShootable && !(results.hitActor.bIsMonster || results.hitActor.player)))
				{
					results.hitActor = null;
					break;
				}
				return TRACE_Stop;
				break;
		}
		
		return TRACE_Skip;
	}
}

class RPGMissile : Missile
{
	protected Array<Actor> alreadyHit;
	
	int maxPenetration;
	double length;
	double width;
	double realHeight;
	double warnDistance;
	
	protected double damageMultiplier;
	protected int currentPenetration;
	
	Vector3 forward;
	Vector3 up;
	Vector3 right;
	
	property Length : length;
	property Width : width;
	property Height : realHeight;
	property MaxPenetration : maxPenetration;
	property AilmentPower : ailmentPower;
	property AilmentType : ailmentType;
	property AilmentDamage : ailmentDamage;
	property WarnDistance : warnDistance;
	
	deprecated("3.7") private int rpgMissileFlags;
	flagdef Penetrating: rpgMissileFlags, 0;
	flagdef ThruObjects: rpgMissileFlags, 1;
	flagdef Oriented: rpgMissileFlags, 2;
	flagdef Freezer: rpgMissileFlags, 3;
	flagdef Shatterer: rpgMissileFlags, 4;
	flagdef NoCrit: rpgMissileFlags, 5;
	flagdef NoBlockWarn: rpgMissileFlags, 6;
	flagdef ShieldBuster: rpgMissileFlags, 7;
	
	Default
	{
		RPGMissile.WarnDistance 256;
		
		+NODAMAGETHRUST
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		SetDamage(default.damage);
		if (!victim || victim == target || alreadyHit.Find(victim) != alreadyHit.Size())
			return 1;
		
		if (target && ((victim.master && victim.master.player && target.isFriend(victim)) || (target.master && target.master.player && victim.IsFriend(target))))
			return 1;
		
		if (bOriented && !CheckOBB(victim, forward, right, up, length))
			return 1;
		
		if (victim.health <= 0)
		{
			if (victim.bIceCorpse)
				victim.DamagemObj(self, target, 1, 'None'); // Make sure corpses shatter
			
			return 1;
		}
		
		bool isShield = (victim is 'BlockBox');
		if (isShield && (target &&
			(victim.master == target ||
			(victim.master.master && victim.master.master.player && target.isFriend(victim.master)) ||
			(target.master && target.master.player && victim.master.IsFriend(target)))))
		{
			return 1;
		}
		
		if (isShield && alreadyHit.Find(victim.master) != alreadyHit.Size())
		{
			alreadyHit.Push(victim);
			return 1;
		}
		
		if (victim.bShootable && !(victim.bIsMonster || victim.player))
		{
			if (isShield && CheckOBB(victim, forward, right, up, bOriented ? length : radius))
			{
				victim.DamageMobj(self, target, damage, damageType);
				alreadyHit.Push(victim);
				alreadyHit.Push(victim.master);
				
				if (bPenetrating)
				{
					if (maxPenetration > 0 && currentPenetration-- <= 0)
					{
						SetDamage(0);
						return -1;
					}
					
					return 1;
				}
				
				SetDamage(0);
				return -1;
			}
			else if (!isShield)
			{
				victim.DamageMobj(self, target, damage, damageType);
				alreadyHit.Push(victim);
			}
			
			return 1;
		}
		else if (!victim.bShootable)
		{
			if (!victim.bSolid)
				return 1;
			else if (bThruObjects)
			{
				if (bPenetrating)
				{
					if (maxPenetration > 0 && currentPenetration-- <= 0)
					{
						SetDamage(0);
						return -1;
					}
					
					alreadyHit.Push(victim);
				}
					
				return 1;
			}
			
			SetDamage(0);
			return -1;
		}
		
		bool doDamage = true;
		damageMultiplier = 1;
		let rpgm = RPGMonster(victim);
		if (rpgm && rpgm.collisionBoxes.Size())
		{
			// Check critical boxes first
			CollisionBox bestBox;
			int bestDamage = -1;
			for (uint i = 0; i < rpgm.collisionBoxes.Size(); ++i)
			{
				let cBox = rpgm.collisionBoxes[i];
				if (!cBox || cBox.bDead || !cBox.bCriticalZone)
					continue;
							
				bool crit;
				if (cBox.bOriented || bOriented)
					crit = CheckOBB(cBox, forward, right, up, bOriented ? length : radius);
				else
					crit = CheckCollision(cBox);
							
				if (crit)
				{
					int dmg;
					if (!bNoCrit)
					{
						bCriticalHit = true;
						dmg = damage * cBox.multi;
					}
					else
						dmg = damage;
					
					if (dmg > bestDamage)
					{
						bestBox = cBox;
						bestDamage = dmg;
					}
				}
			}
			
			if (!bestBox)
			{
				for (uint i = 0; i < rpgm.collisionBoxes.Size(); ++i)
				{
					let box = rpgm.collisionBoxes[i];
					if (!box || box.bDead || box.bCriticalZone)
						continue;
					
					bool hit;
					if (box.bOriented || bOriented)
						hit = CheckOBB(box, forward, right, up, bOriented ? length : radius);
					else
						hit = CheckCollision(box);
					
					if (hit)
					{
						int dmg = damage * box.multi;
						if (dmg > bestDamage)
						{
							bestBox = box;
							bestDamage = dmg;
						}
					}
				}
			}
			
			if (bestBox)
			{
				if (bestBox.bCriticalZone && bNoCrit)
					damageMultiplier = 1;
				else
					damageMultiplier = bestBox.multi;
			}
			else
				doDamage = false;
		}
		
		if (doDamage)
		{
			int flags = bCriticalHit ? DMG_CRIT : 0;
			int newdam = victim.DamageMobj(self, target, round(damage*damageMultiplier), damageType, flags);
			SpawnBlood(victim, round(damage*damageMultiplier), newdam);
			if (victim.bIceCorpse && bShatterer)
				victim.DamageMobj(self, target, 1, 'None');
			
			alreadyHit.Push(victim);
			
			if (bPenetrating)
			{
				if (maxPenetration > 0 && currentPenetration-- <= 0)
				{
					SetDamage(0);
					return -1;
				}
					
				return 1;
			}
			
			SetDamage(0);
			return -1;
		}
		
		return 1;
	}
	
	void SpawnBlood(Actor mo, int intialDamage, int realDamage)
	{
		if (!mo)
			return;
		
		Actor org = target;
		if (!org)
			org = self;
		
		mo.TraceBleed(realDamage > 0 ? realDamage : intialDamage, org);
		mo.SpawnLineAttackBlood(org, pos, AngleTo(mo), intialDamage, realDamage);
	}
	
	override void Tick()
	{
		if (bOriented)
		{
			forward = vel.Unit();
			
			double ang = VectorAngle(forward.x, forward.y);
			double pch = -VectorAngle(forward.xy.Length(), forward.z);
			
			double angCos, angSin, pchCos, pchSin, rolCos, rolSin;
			angCos = cos(ang);
			angSin = sin(ang);
			pchCos = cos(pch);
			pchSin = sin(pch);
			rolCos = cos(roll);
			rolSin = sin(roll);
			
			right = (-1*rolSin*pchSin*angCos + -1*rolCos*-angSin, -1*rolSin*pchSin*angSin + -1*rolCos*angCos, -1*rolSin*pchCos);
			up = (rolCos*pchSin*angCos + -rolSin*-angsin, rolCos*pchSin*angSin + -rolSin*angCos, rolCos*pchCos);
		}
		else
		{
			forward = (1,0,0);
			right = (0,1,0);
			up = (0,0,1);
		}
		
		if (!isFrozen())
		{
			if (bMissile && !bNoBlockWarn)
			{
				let warn = new("WarningTracer");
				if (warn)
				{
					warn.projectile = self;
					double zOfs = bOriented ? realHeight/2 : height / 2;
					warn.Trace(pos+up*zOfs, CurSector, vel.Unit(), warnDistance, TRACE_ReportPortals);
					let rpgm = RPGMonster(warn.results.hitActor);
					
					if (rpgm && (!target || rpgm.bFriendly != target.bFriendly))
						rpgm.Block(self);
				}
			}
		}
		
		super.Tick();
	}
	
	override int DoSpecialDamage(Actor victim, int damage, name damagetype)
	{
		if (target && ((victim.master && victim.master.player && target.isFriend(victim)) || (target.master && target.master.player && victim.IsFriend(target))))
			return -1;
		
		if (ailmentPower > 0 && ailmentType)
		{
			let ail = Ailment(victim.FindInventory(ailmentType));
			if (ail)
				ail.AddAilment(target, ailmentPower, ailmentDamage);
		}
		
		return damage;
	}
	
	// We can do faster checking if mo is axis aligned
	bool CheckCollision(Actor mo)
	{
		if (!mo)
			return false;
		
		Vector3 min = (pos.x - radius, pos.y - radius, pos.z);
		Vector3 max = (pos.x + radius, pos.y + radius, pos.z + height);
		
		Vector3 moMin = (mo.pos.x - mo.radius, mo.pos.y - mo.radius, mo.pos.z);
		Vector3 moMax = (mo.pos.x + mo.radius, mo.pos.y + mo.radius, mo.pos.z + mo.height);
		
		return (min.x <= moMax.x && max.x >= moMin.x) &&
				(min.y <= moMax.y && max.y >= moMin.y) &&
				(min.z <= moMax.z && max.z >= moMin.z);
	}
	
	// Things get a bit more complicated if the mo can orient itself
	bool CheckOBB(Actor mo, Vector3 forward, Vector3 right, Vector3 up, double length)
	{
		if (!mo)
			return false;
		
		double depth = bOriented ? realHeight / 2 : height / 2;
		double len = bOriented ? length : radius;
		double rad = bOriented ? width : radius;
		double moDepth = mo.height / 2;
		double moLength = mo.radius;
		double moWidth = mo.radius;
		
		Vector3 center = pos + (0,0,height/2);
		Vector3 moCenter = mo.pos + (0,0,moDepth);
		
		Vector3 moForward = (1,0,0);
		Vector3 moRight = (0,1,0);
		Vector3 moUp = (0,0,1);
		
		if (mo is 'CollisionBox')
		{
			let box = CollisionBox(mo);
			if (box.bOriented)
				moLength = box.length;
				
			moForward = box.forward;
			moRight = box.right;
		}
		else if (mo is 'BlockBox')
		{
			let box = BlockBox(mo);
			moLength = box.length;
			moWidth = box.width;
			moDepth = box.realHeight / 2;
			moForward = box.forward;
			moRight = box.right;
			moUp = box.up;
		}
		
		Vector3 t = moCenter - center;
		
		if (ProjectEdge(t, forward, len, moLength, moWidth, moDepth, moForward, moRight, moUp) ||
			ProjectEdge(t, right, rad, moLength, moWidth, moDepth, moForward, moRight, moUp) ||
			ProjectEdge(t, up, depth, moLength, moWidth, moDepth, moForward, moRight, moUp) ||
			ProjectEdge(t, moForward, moLength, len, rad, depth, forward, right, up) ||
			ProjectEdge(t, moRight, moWidth, len, rad, depth, forward, right, up) ||
			ProjectEdge(t, moUp, moDepth, len, rad, depth, forward, right, up))
		{
			return false;
		}
		
		if (ProjectPlane(t, forward, rad, depth, moForward, moWidth, moDepth, up, right, moUp, moRight) ||
			ProjectPlane(t, forward, rad, depth, moRight, moLength, moDepth, up, right, moUp, moForward) ||
			ProjectPlane(t, forward, rad, depth, moUp, moLength, moWidth, up, right, moRight, moForward) ||
			ProjectPlane(t, right, len, depth, moForward, moWidth, moDepth, up, forward, moUp, moRight) ||
			ProjectPlane(t, right, len, depth, moRight, moLength, moDepth, up, forward, moUp, moForward) ||
			ProjectPlane(t, right, len, depth, moUp, moLength, moWidth, up, forward, moRight, moForward) ||
			ProjectPlane(t, up, len, rad, moForward, moWidth, moDepth, right, forward, moUp, moRight) ||
			ProjectPlane(t, up, len, rad, moRight, moLength, moDepth, right, forward, moUp, moForward) ||
			ProjectPlane(t, up, len, rad, moUp, moLength, moWidth, right, forward, moRight, moForward))
		{
			return false;
		}
		
		return true;
	}
	
	bool ProjectEdge(Vector3 t, Vector3 axis, double aR, double bL, double bR, double bD, Vector3 forward, Vector3 right, Vector3 up)
	{
		return abs(t dot axis) > (aR + abs(axis dot (bL*forward)) + abs(axis dot (bR*right)) + abs(axis dot (bD*up)));
	}
	
	bool ProjectPlane(Vector3 t, Vector3 a1, double aR, double aD, Vector3 b1, double bR, double bD, Vector3 a2, Vector3 a3, Vector3 b2, Vector3 b3)
	{
		return abs(((t dot a2)*(a3 dot b1)) - ((t dot a3)*(a2 dot b1))) > (abs((aR*a2) dot b1) + abs((aD*a3) dot b1) + abs(a1 dot (bR*b2)) + abs(a1 dot (bD*b3)));
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		currentPenetration = maxPenetration;
	}
}