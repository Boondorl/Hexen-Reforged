class SkillBox : TooltipMenuElement
{
	Skill sk;
	SkillPage sp;
	uint slot;
	bool bCreated;
	
	override void Initialize()
	{
		super.Initialize();
		
		background = TexMan.CheckForTexture("ARTIBOX", TexMan.Type_Any);
		bNavigate = true;
	}
	
	override Vector2, Vector2, Vector2 GetNavCollisionBox(int dir, bool inverted)
	{
		Vector2 pos = center;
		Vector2 origin, s;
		Vector2 half = size / 2;
		
		switch (dir)
		{
			case MD_LEFT:
				if (inverted)
				{
					pos = (1920, center.y);
					origin.x = center.x + half.x;
					origin.y = center.y - half.y;
					s.x = 1920 - center.x + half.x;
					s.y = size.y;
				}
				else
				{
					s.x = center.x - half.x - 50;
					s.y = 1080;
				}
				break;
				
			case MD_UP:
				if (inverted)
				{
					pos = (center.x, 1080);
					origin.x = center.x - size.x;
					origin.y = center.y + half.y;
					s.x = size.x*2;
					s.y = 1080 - (center.y + half.y);
				}
				else
				{
					origin.x = center.x - size.x*(slot+1);
					s.x = size.x*2*(slot+1);
					s.y = center.y - half.y;
				}
				break;
				
			case MD_RIGHT:
				if (inverted)
				{
					pos = (0, center.y);
					s.x = center.x - half.x;
					s.y = 1080;
				}
				else
				{
					origin.x = center.x + half.x;
					origin.y = center.y - half.y;
					s.x = 1920 - center.x + half.x;
					s.y = size.y;
				}
				break;
				
			case MD_DOWN:
				if (inverted)
				{
					pos = (center.x, 0);
					origin.x = center.x - half.x;
					s.x = size.x;
					s.y = center.y - half.y;
				}
				else
				{
					origin.x = center.x - half.x;
					origin.y = center.y + half.y;
					s.x = size.x;
					s.y = 1080 - (center.y + half.y);
				}
				break;
		}
		
		return pos, origin, s;
	}
	
	override void PreChildExecute(double fracTic)
	{
		if (tool && !sk)
			tool.Destroy();
		
		if (handler.player && slot < handler.player.skillSlots)
			sk = handler.player.activeSkills[slot];
		
		if (sk)
			DrawTexture(sk.icon, scaledCenter, (3,3));
		
		if (!bCreated && sp && handler.mouseAction == MI_LEFTRELEASE)
		{
			double sw = sp.scaledSize.x/2;
			double sh = sp.scaledSize.y/2;
			
			if (handler.mouse.x < (sp.scaledCenter.x-sw) || handler.mouse.x > (sp.scaledCenter.x+sw) ||
				handler.mouse.y < (sp.scaledCenter.y-sh) || handler.mouse.y > (sp.scaledCenter.y+sh))
			{
				sp.Destroy();
			}
		}
		
		bCreated = false;
	}
	
	private void DrawSkill()
	{
		if (!sk)
			return;
		
		if (!tool)
		{
			tool = Tooltip.Create("Tooltip", handler, (center.x, center.y+size.y/2), 600, self);
			tool.title = sk.GetTag();
			tool.text = sk.GetDescription();
		}
	}
	
	override void OnSelected()
	{
		DrawSkill();
	}
	
	override void OnHover()
	{
		DrawBorder("FF FF FF", 3);
		
		DrawSkill();
	}
	
	private void CreatePage()
	{
		if (sp || !handler.skills.Size())
			return;
		
		bCreated = true;
		sp = SkillPage(MenuElement.Create("SkillPage", handler, center-(0,size.y/2+150), (300,300), self));
		sp.slot = slot;
	}
	
	override void OnLeftRelease()
	{
		CreatePage();
	}
	
	override void OnButtonSelect()
	{
		CreatePage();
	}
}

class SkillPage : Canvas
{
	uint slot;
	bool bKill;
	MenuElement remove;
	
	uint Find(Skill sk)
	{
		uint i;
		for (; i < children.Size(); ++i)
		{
			let child = SkillSelect(children[i]);
			if (!child)
				continue;
			
			if (child.sk == sk)
				return i;
		}
		
		return i;
	}
	
	void AddRemove()
	{
		remove = MenuElement.Create("SkillSelect", handler, pos, (100,100), self);
		if (++curItem < maxItemsRow)
			pos.x += offset.x;
		else
		{
			curItem = 0;
			pos.x = defaultPos.x;
			pos.y += offset.y;
		}
		
		SkillSelect head;
		Vector2 headCenter;
		uint max = children.Size() - 1;
		for (uint i = 0; i < max; ++i)
		{
			let sb = SkillSelect(children[i]);
			if (!sb)
				continue;
			
			if (!head)
			{
				head = sb;
				headCenter = sb.center;
			}
			
			for (; i < max; ++i)
			{
				let nextsb = SkillSelect(children[i+1]);
				if (nextsb)
				{
					sb.Shift(nextsb.center - sb.center);
					break;
				}
			}
		}
		
		if (head)
			remove.Shift(headCenter - remove.center);
	}
	
	override void Initialize()
	{
		super.Initialize();
		
		bTile = true;
		backgroundDesaturation = 1;
		backgroundColor = 0x9F000000;
		background = TexMan.CheckForTexture("AUTOPAGE", TexMan.Type_Any);
		backgroundAlpha = 0.6;
		
		offset = (100,100);
		defaultPos = pos = (center.x - size.x/2+50, center.y - size.y/2 + 50);
		maxItemsRow = 3;
	}
	
	override void PreChildTick()
	{
		let par = SkillBox(parent);
		if (!remove && par.sk)
			AddRemove();
		
		// Remove skills no longer present
		for (uint i = 0; i < children.Size(); ++i)
		{
			let child = SkillSelect(children[i]);
			if (!child || handler.skills.Find(child.sk) != handler.skills.Size())
				continue;
			
			if (child == remove && par.sk)
				continue;
			
			for (uint j = children.Size() - 1; j > i; --j)
			{
				let sb = SkillSelect(children[j]);
				if (!sb)
					continue;
					
				for (; j > i; --j)
				{
					let prevsb = SkillSelect(children[j-1]);
					if (prevsb)
					{
						sb.Shift(prevsb.center - sb.center);
						break;
					}
				}
			}
			
			child.Destroy();
			children.Delete(i--);
			if (--curItem >= 0)
				pos.x -= offset.x;
			else
			{
				curItem = maxItemsRow - 1;
				pos.y -= offset.y;
				pos.x = defaultPos.x + offset.x*curItem;
			}
		}
		
		// Add new skills
		for (int i = handler.skills.Size()-1; i >= 0; --i)
		{
			if (handler.skills[i] == par.sk || Find(handler.skills[i]) != children.Size())
				continue;
			
			let sb = SkillSelect(MenuElement.Create("SkillSelect", handler, pos, (100,100), self));
			if (sb)
			{
				sb.sk = handler.skills[i];
				if (++curItem < maxItemsRow)
					pos.x += offset.x;
				else
				{
					curItem = 0;
					pos.x = defaultPos.x;
					pos.y += offset.y;
				}
			}
		}
		
		uint s = children.Size();
		if (!s)
		{
			Destroy();
			return;
		}
		
		if (handler && children.Find(handler.selected) >= s)
		{
			if (remove)
				handler.selected = remove;
			else if (s)
				handler.selected = children[0];
			
			S_StartSound("menu/backup", CHAN_AUTO);
		}
	}
	
	override void PreChildExecute(double fracTic)
	{
		Screen.DrawFrame(scaledCenter.x-scaledSize.x/2, scaledCenter.y-scaledSize.y/2, scaledSize.x, scaledSize.y);
	}
	
	override void PostChildExecute(double fracTic)
	{
		if (bKill)
			Destroy();
	}
}

class SkillSelect : TooltipMenuElement
{
	Skill sk;
	
	override void Initialize()
	{
		super.Initialize();
		
		background = TexMan.CheckForTexture("ARTIBOX", TexMan.Type_Any);
		bNavigate = true;
	}
	
	override Vector2, Vector2, Vector2 GetNavCollisionBox(int dir, bool inverted)
	{
		Vector2 pos = center;
		Vector2 origin, s;
		Vector2 half = size / 2;
		
		switch (dir)
		{
			case MD_LEFT:
				if (inverted)
				{
					pos = (1920, center.y);
					origin.x = center.x + half.x;
					origin.y = center.y - half.y;
					s.x = 1920 - center.x + half.x;
					s.y = size.y;
					if (parent)
					{
						pos.x = parent.center.x + parent.size.x/2;
						s.x = pos.x - center.x - half.x;
					}
				}
				else
				{
					origin.y = center.y - half.y;
					s.x = center.x - half.x;
					s.y = size.y;
					if (parent)
					{
						origin.x = parent.center.x - parent.size.x/2;
						s.x -= origin.x;
					}
				}
				break;
				
			case MD_UP:
				if (inverted)
				{
					pos = (center.x, 1080);
					origin.x = center.x - half.x;
					origin.y = center.y + half.y;
					s.x = size.x;
					s.y = 1080 - (center.y + half.y);
					if (parent)
					{
						pos.y = parent.center.y + parent.size.y/2;
						s.y = pos.y - center.y - half.y;
					}
				}
				else
				{
					origin.x = center.x - half.x;
					s.x = size.x;
					s.y = center.y - half.y;
					if (parent)
					{
						origin.y = parent.center.y - parent.size.y/2;
						s.y -= origin.y;
					}
				}
				break;
				
			case MD_RIGHT:
				if (inverted)
				{
					pos = (0, center.y);
					origin.y = center.y - half.y;
					s.x = center.x - half.x;
					s.y = size.y;
					if (parent)
					{
						pos.x = origin.x = parent.center.x - parent.size.x/2;
						s.x -= origin.x;
					}
				}
				else
				{
					origin.x = center.x + half.x;
					origin.y = center.y - half.y;
					s.x = 1920 - center.x + half.x;
					s.y = size.y;
					if (parent)
						s.x = (parent.center.x + parent.size.x/2) - center.x - half.x;
				}
				break;
				
			case MD_DOWN:
				if (inverted)
				{
					pos = (center.x, 0);
					origin.x = center.x - half.x;
					s.x = size.x;
					s.y = center.y - half.y;
					if (parent)
					{
						pos.y = origin.y = parent.center.y - parent.size.y/2;
						s.y -= origin.y;
					}
				}
				else
				{
					origin.x = center.x - half.x;
					origin.y = center.y + half.y;
					s.x = size.x;
					s.y = 1080 - (center.y + half.y);
					if (parent)
						s.y = (parent.center.y + parent.size.y/2) - center.y - half.y;
				}
				break;
		}
		
		return pos, origin, s;
	}
	
	override void PreChildExecute(double fracTic)
	{
		if (sk)
			DrawTexture(sk.icon, scaledCenter, (2.5,2.5));
	}
	
	private void DrawSkillInfo()
	{
		if (!tool)
		{
			tool = Tooltip.Create("Tooltip", handler, (center.x, center.y+size.y/2), 600, self);
			
			if (sk)
			{
				tool.title = sk.GetTag();
				tool.text = sk.GetDescription();
			}
			else
				tool.text = Stringtable.Localize("$DESC_REMOVE");
		}
	}
	
	override void OnSelected()
	{
		DrawSkillInfo();
	}
	
	override void OnHover()
	{
		DrawBorder("FF FF FF", 3);
		
		DrawSkillInfo();
	}
	
	private void SelectSkill()
	{
		let par = SkillPage(parent);
		if (!par)
			return;
		
		String command = "swapskill:";
		if (sk)
			command.AppendFormat("%s", sk.GetClassName());
		else
			command.AppendFormat("null");
		
		EventHandler.SendNetworkEvent(command, par.slot);
		
		par.bKill = true;
	}
	
	override void OnButtonSelect()
	{
		SelectSkill();
		if (parent && parent.parent)
		{
			S_StartSound("menu/backup", CHAN_AUTO);
			handler.selected = parent.parent;
		}
	}
	
	override void OnButtonBack()
	{
		let par = SkillPage(parent);
		if (par)
		{
			par.bKill = true;
			if (par.parent)
			{
				S_StartSound("menu/backup", CHAN_AUTO);
				handler.selected = par.parent;
			}
		}
	}
	
	override void OnLeftRelease()
	{
		SelectSkill();
	}
}