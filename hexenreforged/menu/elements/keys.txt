class KeyCanvas : Canvas
{
	uint Find(Inventory key)
	{
		uint i;
		for (; i < children.Size(); ++i)
		{
			let child = KeyBox(children[i]);
			if (!child)
				continue;
			
			if (child.key == key)
				return i;
		}
		
		return i;
	}
	
	override void Initialize()
	{
		super.Initialize();
		
		offset = (49.5,87);
		defaultPos = pos = (center.x - size.x/2 + 24.5, center.y - size.y/2 + 43.5);
		background = TexMan.CheckForTexture("KEYBAR2", TexMan.Type_Any);
		backgroundScale = 2.5;
		bTile = true;
	}
	
	override void PreChildTick()
	{
		// Remove keys no longer present
		for (uint i = 0; i < children.Size(); ++i)
		{
			let child = KeyBox(children[i]);
			if (!child || handler.keys.Find(child.key) != handler.keys.Size())
				continue;
			
			for (uint j = children.Size() - 1; j > i; --j)
			{
				let kb = KeyBox(children[j]);
				if (!kb)
					continue;
					
				for (; j > i; --j)
				{
					let prevkb = KeyBox(children[j-1]);
					if (prevkb)
					{
						kb.Shift(prevkb.center - kb.center);
						break;
					}
				}
			}
			
			child.Destroy();
			children.Delete(i--);
			pos.x -= offset.x;
		}
		
		// Add new keys
		for (int i = handler.keys.Size() - 1; i >= 0 ; --i)
		{
			if (Find(handler.keys[i]) != children.Size())
				continue;
			
			let kb = KeyBox(MenuElement.Create("KeyBox", handler, pos, (47,87), self));
			if (kb)
			{
				kb.key = handler.keys[i];
				pos.x += offset.x;
			}
		}
	}
}

class KeyBox : MenuElement
{
	Inventory key;
	
	override void Initialize()
	{
		super.Initialize();
		
		bNavigate = true;
	}
	
	override Vector2, Vector2, Vector2 GetNavCollisionBox(int dir, bool inverted)
	{
		Vector2 pos = center;
		Vector2 origin, s;
		Vector2 half = size / 2;
		
		switch (dir)
		{
			case MD_LEFT:
				if (inverted)
				{
					pos = (1920, center.y);
					origin.x = center.x + half.x;
					origin.y = center.y - size.y;
					s.x = 1920 - center.x + half.x;
					s.y = size.y*2;
				}
				else
				{
					origin.y = center.y - size.y;
					s.x = center.x - half.x;
					s.y = size.y*2;
					if (handler && (handler.items.Size() || handler.keyItems.Size()))
					{
						--s.x;
						origin.y = 0;
						s.y = 1080;
					}
				}
				break;
				
			case MD_UP:
				if (inverted)
				{
					pos = (center.x, 1080);
					origin.x = center.x - half.x;
					origin.y = center.y + half.y;
					s.x = size.x;
					if (parent)
					{
						origin.x = parent.center.x - parent.size.x/2;
						s.x = parent.size.x;
					}
					s.y = 1080 - (center.y + half.y);
				}
				else
				{
					origin.x = center.x - half.x;
					s.x = size.x;
					if (parent)
					{
						origin.x = parent.center.x - parent.size.x/2;
						s.x = parent.size.x;
					}
					s.y = center.y - half.y;
				}
				break;
				
			case MD_RIGHT:
				if (inverted)
				{
					pos = (0, center.y);
					origin.y = center.y - size.y;
					s.x = center.x - half.x;
					s.y = size.y*2;
					if (handler && (handler.items.Size() || handler.keyItems.Size()))
					{
						origin.y = 0;
						s.y = 1080;
					}
				}
				else
				{
					origin.x = center.x + half.x;
					origin.y = center.y - size.y;
					s.x = 1920 - center.x + half.x;
					s.y = size.y*2;
				}
				break;
				
			case MD_DOWN:
				if (inverted)
				{
					pos = (center.x, 0);
					origin.x = center.x - half.x;
					s.x = size.x;
					if (parent)
					{
						origin.x = parent.center.x - parent.size.x/2;
						s.x = parent.size.x;
					}
					s.y = center.y - half.y;
				}
				else
				{
					origin.x = center.x - half.x;
					origin.y = center.y + half.y;
					s.x = size.x;
					if (parent)
					{
						origin.x = parent.center.x - parent.size.x/2;
						s.x = parent.size.x;
					}
					s.y = 1080 - (center.y + half.y);
				}
				break;
		}
		
		return pos, origin, s;
	}
	
	private void DrawKeyInfo()
	{
		if (!key)
			return;
		
		String tag = key.GetTag();
		String modName = tag;
			
		String first = tag.Left(3);
		if (first ~== "Key")
			modName = tag.Mid(3).." "..first;
			
		int fH = NewSmallFont.GetHeight();
		int length = NewSmallFont.StringWidth(modName);
		DrawText(NewSmallFont, Font.CR_UNTRANSLATED, (scaledCenter.x, scaledCenter.y - scaledSize.y/2), modName, (-length/2,-fH), 2);
	}
	
	override void OnSelected()
	{
		DrawKeyInfo();
	}
	
	override void PreChildExecute(double fracTic)
	{
		if (key)
			DrawTexture(key.icon, scaledCenter, (2.5,2.5));
	}
	
	override void OnHover()
	{
		DrawKeyInfo();
	}
}