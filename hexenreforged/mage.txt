class ReforgedMage : RPGPlayer
{
	Default
	{
		Radius 16;
		Height 64;
		PainSound "PlayerMagePain";
		Player.JumpZ 9;
		Player.Viewheight 48;
		Player.SpawnClass "Mage";
		Player.DisplayName "Mage";
		Player.SoundClass "mage";
		Player.ScoreIcon "MAGEFACE";
		Player.StartItem "ReforgedWand";
		Player.StartItem "AmuletPiece";
		Player.StartItem "BlueMana", 100;
		Player.StartItem "GreenMana", 100;
		Player.StartItem "RedMana", 0;
		Player.Portrait "P_MWALK1";
		Player.WeaponSlot 1, "ReforgedWand";
		Player.WeaponSlot 2, "ReforgedFrost";
		Player.WeaponSlot 3, "ReforgedLightning";
		Player.WeaponSlot 4, "MWeapBloodscourge";
		
		Player.ColorRange 146, 163;
		Player.Colorset		0, "$TXT_COLOR_BLUE",		146, 163,    161;
		Player.ColorsetFile 1, "$TXT_COLOR_RED",		"TRANTBL7",  0xB3;
		Player.ColorsetFile 2, "$TXT_COLOR_GOLD",		"TRANTBL8",  0x8C;
		Player.ColorsetFile 3, "$TXT_COLOR_DULLGREEN",	"TRANTBL9",  0x41;
		Player.ColorsetFile 4, "$TXT_COLOR_GREEN",		"TRANTBLA",  0xC9;
		Player.ColorsetFile 5, "$TXT_COLOR_GRAY",		"TRANTBLB",  0x30;
		Player.ColorsetFile 6, "$TXT_COLOR_BROWN",		"TRANTBLC",  0x72;
		Player.ColorsetFile 7, "$TXT_COLOR_PURPLE",		"TRANTBLD",  0xEE;
		
		+NOSKIN
	}

	States
	{
		Spawn:
			MAGE A -1;
			Stop;
			
		See:
			MAGE ABCD 4;
			Loop;
			
		Missile:
		Melee:
			MAGE EF 8;
			Goto Spawn;
			
		Pain:
			MAGE G 4;
			MAGE G 4 A_Pain;
			Goto Spawn;
			
		Death:
			MAGE H 6;
			MAGE I 6 A_PlayerScream;
			MAGE JK 6;
			MAGE L 6 A_NoBlocking;
			MAGE M 6;
			MAGE N -1;
			Stop;	
			
		XDeath:
			MAGE O 5 A_PlayerScream;
			MAGE P 5;
			MAGE R 5 A_NoBlocking;
			MAGE STUVW 5;
			MAGE X -1;
			Stop;
			
		Ice:
			MAGE Y 5 A_FreezeDeath;
			MAGE Y 1 A_FreezeDeathChunks;
			Wait;
			
		Burn:
			FDTH E 5 BRIGHT A_PlaySound("*burndeath");
			FDTH F 4 BRIGHT;
			FDTH G 5 BRIGHT;
			FDTH H 4 BRIGHT A_PlayerScream;
			FDTH I 5 BRIGHT;
			FDTH J 4 BRIGHT;
			FDTH K 5 BRIGHT;
			FDTH L 4 BRIGHT;
			FDTH M 5 BRIGHT;
			FDTH N 4 BRIGHT;
			FDTH O 5 BRIGHT;
			FDTH P 4 BRIGHT;
			FDTH Q 5 BRIGHT;
			FDTH R 4 BRIGHT;
			FDTH S 5 BRIGHT A_NoBlocking;
			FDTH T 4 BRIGHT;
			FDTH U 5 BRIGHT;
			FDTH V 4 BRIGHT;
			ACLO E 35 A_CheckPlayerDone;
			Wait;
			ACLO E 8;
			Stop;
	}
	
	override void InitializeSkills()
	{
		GiveInventoryType("Desecrate");
		GiveInventoryType("KineticBlast");
		
		SetActiveSkill(0, "Desecrate");
		SetActiveSkill(1, "KineticBlast");
	}
	
	override void InitializeStats()
	{
		super.InitializeStats();
		
		for (let probe = inv; probe; probe = probe.inv)
		{
			let st = Stat(probe);
			if (!st)
				continue;
				
			let cls = st.GetClass();
			if (cls == "Wisdom" || cls == "Intelligence")
				st.LevelUp(2, true);
		}
	}
	
	override void LevelUp(bool cheat)
	{
		super.LevelUp(cheat);
		
		switch (currentLevel)
		{
			case 2:
				GiveInventoryType("LightningBulwark");
				break;
				
			case 3:
				GiveInventoryType("Elementalist");
				break;
				
			case 5:
				GiveInventoryType("Resurrect");
				GiveInventoryType("Haste");
				break;
				
			case 8:
				GiveInventoryType("IceNova");
				GiveInventoryType("Shadow");
				break;
				
			case 11:
				GiveInventoryType("Thunder");
				break;
		}
	}
}

class UndeadTracer : LineTracer
{
	Actor master;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKEVERYTHING;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					results.hitType = TRACE_HitNone;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor != master && !master.IsFriend(results.hitActor) &&
					results.hitActor.bIsMonster && results.hitActor.health <= 0 &&
					results.hitActor.tics == -1)
				{
					return TRACE_Stop;
				}
				results.hitType = TRACE_HitNone;
				break;
		}
		
		return TRACE_Skip;
	}
}

class Desecrate : Skill
{
	Default
	{
		Skill.Type "GreenMana";
		Skill.ReserveType "RedMana";
		Inventory.Icon "PTN1A0";
		Tag "$TAG_DESECRATE";
		Skill.Description "$DESC_DESECRATE";
	}
	
	override void UseSkill()
	{
		if (!CheckAmmo(8, type, reserveType))
		{
			Console.Printf(Stringtable.Localize("$WARN_NOAMMO"));
			return;
		}
				
		let tracer = new("UndeadTracer");
		if (tracer)
		{
			Vector3 start = (owner.pos.xy, owner.player.viewz);
			Vector3 dir = (AngleToVector(owner.angle, cos(owner.pitch)), -sin(owner.pitch));
			tracer.master = owner;
			tracer.Trace(start, CurSector, dir, 256, 0);
			
			if (tracer.results.hitType == TRACE_HitActor)
			{
				TakeAmmo(8, type, reserveType);
				let mo = Spawn("ReforgedCrystalVial", tracer.results.hitActor.pos, ALLOW_REPLACE);
				if (mo && !mo.bNoGravity)
					mo.vel.z += 7;
				
				tracer.results.hitActor.Destroy();
			}
		}
	}
}

class KineticBlast : Skill
{
	Default
	{
		Skill.Cost 5;
		Skill.CastTime 22;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Inventory.Icon "MWNDF0";
		Skill.Cast "KineticHands";
		Tag "$TAG_KINETIC";
		Skill.Description "$DESC_KINETIC";
	}
}

class BlastProjectile : RPGMissile
{
	Default
	{
		RPGMissile.AilmentPower 100;
		RPGMissile.AilmentType "Flinch";
		Speed 128;
		Radius 3;
		Height 6;
		Damage 100;
		DamageType "Blunt";
		SeeSound "MageWandFire";
		Obituary "$OB_MPMWEAPWAND";
		BounceFactor 1;
		WallBounceFactor 1;
		BounceCount 2;
		
		+SPAWNSOUNDSOURCE
		+RPGMISSILE.SHIELDBUSTER
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		+ALLOWBOUNCEONACTORS
		+BOUNCEONACTORS
		+DONTBOUNCEONSKY
	}
	
	States
	{
		Spawn:
			MWND CCCCDDDD 1 Bright
			{
				if (bounceCount <= 1)
				{
					pitch = -VectorAngle(vel.xy.Length(), vel.z);
					ExplodeMissile();
				}
			}
			Loop;
			
		Death:
			TNT1 A 1
			{
				Vector3 dir = (AngleToVector(angle, cos(pitch)), -sin(pitch));
				double ang = 0;
				
				for (int i = 0; i < 12; ++i)
				{
					let blast = Spawn("SmallBlastProjectile", pos, ALLOW_REPLACE);
					if (blast)
					{
						Vector3 newDir = RPGWeapon.GetNewDirection(self, dir, ang, absolute: true);
						
						blast.master = target;
						blast.target = target;
						blast.angle = VectorAngle(newDir.x, newDir.y);
						blast.vel = newDir*speed;
						let rpg = RPGMissile(blast);
						if (rpg)
							rpg.alreadyHit.Copy(alreadyHit);
					}
					
					ang += 30;
				}
			}
			Stop;
	}
}

class SmallBlastProjectile : BlastProjectile
{
	Default
	{
		Damage 20;
		BounceCount 2;
		
		+DONTBOUNCEONSHOOTABLES
		-RPGMISSILE.SHIELDBUSTER
		-SPAWNSOUNDSOURCE
	}
	
	States
	{
		Spawn:
			MWND CD 4 Bright;
			Loop;
			
		Death:
			MWND E 4 Bright;
			MWND F 3 Bright;
			MWND G 4 Bright;
			MWND H 3 Bright;
			MWND I 4 Bright;
			Stop;
	}
}

class KineticHands : CastWeapon
{
	Default
	{
		Weapon.YAdjust 20;
		Weapon.AmmoType1 "BlueMana";
		Weapon.AmmoType2 "RedMana";
	}
	
	States
	{
		Select:
			TNT1 A 0 A_Raise(WEAPONBOTTOM - WEAPONTOP);
		Deselect:
		Ready:
		Fire:
			CONE B 3;
			CONE C 4;
			CONE D 3;
			CONE E 5;
			TNT1 A 0 A_PlaySound ("MageShardsFire", CHAN_WEAPON);
			CONE F 3 A_NewProjectile("BlastProjectile");
			CONE G 3;
			Stop;
	}
}

class LightningBulwark : Skill
{
	Default
	{
		Skill.BuffType "LightningBulwarkBuff";
		Inventory.Icon "SHEXA0";
		Skill.Drain 4;
		Skill.DrainType "GreenMana";
		Skill.ReserveDrainType "RedMana";
		Tag "$TAG_BULWARK";
		Skill.Description "$DESC_BULWARK";
		
		+SKILL.TOGGLE
		+SKILL.SPECIALDRAIN
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
	
	override void EndSkill()
	{
		TakeBuff();
	}
}

class LightningBulwarkBuff : Buff
{
	Array<Actor> hitSources;
	
	Default
	{
		Inventory.Icon "SHEXA0";
		Buff.Cost 4;
		Buff.Type "GreenMana";
		Buff.ReserveType "RedMana";
		
		+BUFF.INFINITE
	}
	
	override void DoEffect()
	{
		hitSources.Clear();
		
		super.DoEffect();
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (!passive || !source || hitSources.Find(source) != hitSources.Size())
			return;
		
		if (inflictor == source || inflictor is "HurtBox")
		{
			BlockThingsIterator it = BlockThingsIterator.Create(owner, 128);
			Actor mo;
			
			while (it.Next())
			{
				mo = it.thing;
				if (!mo || mo == owner || mo.health <= 0 || !(mo.bIsMonster || mo.player) ||
					owner.IsFriend(mo) || owner.Distance3DSquared(mo) > 16384)
				{
					continue;
				}
				
				let shk = Shock(mo.FindInventory("Shock"));
				if (shk)
					shk.AddAilment(owner, 100);
				
				mo.DamageMobj(self, owner, 30, "Electric", DMG_NOBLOCK);
			}
			
			hitSources.Push(source);
			
			TakeAmmo(cost, type, reserveType);
		}
	}
}

class Elementalist : Skill
{
	Default
	{
		Skill.BuffType "ElementalistBuff";
		Inventory.Icon "DMFXA1";
		Tag "$TAG_ELEMEN";
		Skill.Description "$DESC_ELEMEN";
		
		+SKILL.TOGGLE
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
	
	override void EndSkill()
	{
		TakeBuff();
	}
}

class ElementalistBuff : Buff
{
	Default
	{
		Inventory.Icon "DMFXA1";
		
		+BUFF.INFINITE
	}
}

class Resurrect : Skill
{
	const MAX_MINIONS = 5;
	
	ResurrectBuff tracker;
	
	Default
	{
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Inventory.Icon "MAN3A0";
		Tag "$TAG_RESURRECT";
		Skill.Description "$DESC_RESURRECT";
		Skill.BuffType "ResurrectBuff";
	}
	
	override void UseSkill()
	{
		let tracer = new("UndeadTracer");
		if (tracer)
		{
			Vector3 start = owner.pos + (0,0, owner.player.mo.viewheight - owner.floorclip);
			Vector3 dir = (AngleToVector(owner.angle, cos(owner.pitch)), -sin(owner.pitch));
			tracer.master = owner;
			tracer.Trace(start, CurSector, dir, 256, 0);
			
			if (tracer.results.hitType == TRACE_HitActor)
			{
				if (!CheckAmmo(10, type, reserveType))
				{
					Console.Printf(Stringtable.Localize("$WARN_NOAMMO"));
					return;
				}
				
				bool gibbed = tracer.results.hitActor.health < tracer.results.hitActor.GetGibHealth();
				if (tracer.results.hitActor.A_RaiseSelf(RF_NOCHECKPOSITION))
				{
					if (!tracker)
					{
						GiveBuff(owner);
						tracker = ResurrectBuff(owner.FindInventory("ResurrectBuff"));
					}
					
					tracer.results.hitActor.reactionTime = 0;
					tracer.results.hitActor.ChangeTID(0);
					tracer.results.hitActor.A_SetSpecial(0);
					TakeAmmo(10, type, reserveType);
					
					if (gibbed)
					{
						let xraise = tracer.results.hitActor.FindState("XRaise");
						if (xraise)
							tracer.results.hitActor.SetState(xraise);
					}
					
					uint currentMinions;
					for (uint i = 0; i < tracker.minions.Size(); ++i)
					{
						if (tracker.minions[i])
							++currentMinions;
					}
					
					if (currentMinions >= MAX_MINIONS)
					{
						uint index;
						int minHealth = 0x7FFFFFFF;
						for (uint i = 0; i < tracker.minions.Size(); ++i)
						{
							if (tracker.minions[i] && tracker.minionHealth[i] < minHealth)
							{
								index = i;
								minHealth = tracker.minionHealth[i];
							}
						}
					
						if (tracker.minions[index])
							tracker.minions[index].DamageMobj(null, null, TELEFRAG_DAMAGE, "Telefrag");
						
						tracker.minions.Delete(index);
						tracker.minionHealth.Delete(index);
						tracker.minionName.Delete(index);
					}
					
					tracker.minions.Push(tracer.results.hitActor);
					tracker.minionName.Push(tracer.results.hitActor.GetClass());
					tracker.minionHealth.Push(tracer.results.hitActor.health);
					
					tracer.results.hitActor.master = owner;
					tracer.results.hitActor.bFriendly = true;
					tracer.results.hitActor.target = null;
					tracer.results.hitActor.A_SetRenderStyle(0.6, STYLE_Translucent);
				}
			}
			else if (tracker)
			{
				for (uint i = 0; i < tracker.minions.Size(); ++i)
				{
					// SetZ first?
					if (tracker.minions[i] && tracker.minions[i].CheckPosition(owner.pos.xy))
					{
						tracker.minions[i].SetOrigin(owner.pos, false);
						tracker.minions[i].target = null;
					}
				}
			}
		}
	}
}

class ResurrectBuff : Buff
{
	Array<Actor> minions;
	
	Array<class<Actor> > minionName;
	Array<int> minionHealth;
	
	private int prevLevelNum;
	
	Default
	{
		Inventory.Icon "MAN3A0";
		
		+BUFF.STACKABLE
		+BUFF.INFINITE
	}
	
	override void DoEffect()
	{
		if (!prevLevelNum)
			prevLevelNum = level.levelNum;
		
		if (level.levelNum != prevLevelNum)
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
			Actor mo;
			
			while (mo = Actor(it.Next()))
			{
				if (mo && mo.bIsMonster && mo.master == owner && minions.Find(mo) == minions.Size())
					mo.Destroy();
			}
		}
		
		prevLevelNum = level.levelNum;
		
		for (uint i = 0; i < minions.Size(); ++i)
		{
			if (minions[i])
				minionHealth[i] = minions[i].health;
			else
			{
				let monster = Spawn(minionName[i], owner.pos);
				if (monster)
				{
					minions[i] = monster;
					monster.bFriendly = true;
					monster.master = owner;
					monster.health = minionHealth[i];
					monster.SetState(monster.SeeState);
					monster.A_SetRenderStyle(0.6, STYLE_Translucent);
				}
			}
		}
		
		for (uint i = 0; i < minionHealth.Size(); ++i)
		{
			if (minionHealth[i] <= 0)
			{
				minions.Delete(i);
				minionHealth.Delete(i);
				minionName.Delete(i--);
			}
		}
		
		stacks = 0;
		for (uint i = 0; i < minions.Size(); ++i)
		{
			if (minions[i])
				++stacks;
		}
		
		if (stacks <= 0)
		{
			Destroy();
			return;
		}
		
		super.DoEffect();
	}
	
	override void OnDamage(Actor inflictor, Actor source, int dmg)
	{
		if (source && source.bIsMonster && !owner.IsFriend(source))
		{
			for (uint i = 0; i < minions.Size(); ++i)
			{
				if (minions[i] && !minions[i].target)
					minions[i].target = source;
			}
		}
	}
	
	override void DealtDamage(Actor damaged, int dmg)
	{
		for (uint i = 0; i < minions.Size(); ++i)
		{
			if (minions[i] && !minions[i].target)
				minions[i].target = damaged;
		}
	}
}

class Haste : Skill
{
	Default
	{
		Skill.BuffType "HasteBuff";
		Skill.Drain 2;
		Skill.DrainType "BlueMana";
		Skill.ReserveDrainType "RedMana";
		Inventory.Icon "MWNDC0";
		Tag "$TAG_HASTE";
		Skill.Description "$DESC_HASTE";
		
		+SKILL.TOGGLE
		+SKILL.SPECIALDRAIN
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
	
	override void EndSkill()
	{
		TakeBuff();
	}
}

class HasteBuff : Buff
{
	Default
	{
		Inventory.Icon "MWNDC0";
		Buff.Cost 1;
		Buff.Type "BlueMana";
		Buff.ReserveType "RedMana";
		
		+BUFF.INFINITE
	}
	
	override void MissileFired(Actor missile)
	{
		if (!missile || missile.master == owner)
			return;
		
		missile.speed *= 1.5;
		missile.vel *= 1.5;
		TakeAmmo(cost, type, reserveType);
	}
}

class IceExplosion : AreaOfEffect
{
	Default
	{
		Radius 256;
		Height 256;
		Damage 200;
		DamageType "Ice";
		AreaOfEffect.AilmentPower 100;
		AreaOfEffect.AilmentType "Chill";
		Threshold 1;
		
		+AREAOFEFFECT.SHATTERER
		+AREAOFEFFECT.FREEZER
	}
}

class IceNova : Skill
{
	Default
	{
		Skill.Cost 32;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.CoolDown 700;
		Inventory.Icon "SHEXB0";
		Tag "$TAG_NOVA";
		Skill.Description "$DESC_NOVA";
	}
	
	override void UseSkill()
	{
		let mo = Spawn("IceExplosion", owner.pos, ALLOW_REPLACE);
		if (mo)
		{
			mo.target = owner;
			mo.angle = owner.angle;
		}
	}
}

class Shadow : Skill
{
	Default
	{
		Skill.BuffType "ShadowBuff";
		Skill.Cost 10;
		Skill.Type "GreenMana";
		Skill.ReserveType "GreenMana";
		Skill.Drain 1;
		Skill.DrainType "GreenMana";
		Skill.ReserveDrainType "RedMana";
		Skill.DrainInterval 12;
		Inventory.Icon "SPIRA1";
		Tag "$TAG_SHADOW";
		Skill.Description "$DESC_SHADOW";
		
		+SKILL.TOGGLE
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
	
	override void EndSkill()
	{
		TakeBuff();
		owner.A_SetRenderStyle(1, STYLE_Normal);
		owner.bShadow = false;
	}
}

class ShadowBuff : Buff
{
	Default
	{
		Inventory.Icon "SPIRA1";
		
		+BUFF.INFINITE
	}
	
	override void Effect()
	{
		owner.bShadow = true;
		owner.A_SetRenderStyle(0.2, STYLE_Translucent);
	}
}

class ThunderTracer : LineTracer
{
	Actor master;
	Array<Actor> hitEnemies;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKEVERYTHING;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor != master && !master.IsFriend(results.hitActor) &&
					(results.hitActor.bIsMonster || results.hitActor.player) && results.hitActor.health > 0)
				{
					hitEnemies.Push(results.hitActor);
				}
				break;
		}
		
		return TRACE_Skip;
	}
}

class Thunder : Skill
{
	Default
	{
		Skill.Cost 10;
		Skill.Type "RedMana";
		Inventory.Icon "MLFXI0";
		Tag "$TAG_THUNDER";
		Skill.Description "$DESC_THUNDER";
	}
	
	override void UseSkill()
	{
		let tracer = new("ThunderTracer");
		if (!tracer)
			return;
		
		Vector3 start = owner.pos + (0,0,owner.height/2 - owner.floorclip + owner.player.mo.AttackZOffset*owner.player.crouchFactor);
		Vector3 dir = (AngleToVector(owner.angle, cos(owner.pitch)), -sin(owner.pitch));
		
		tracer.master = owner;
		tracer.Trace(start, owner.CurSector, dir, PLAYERMISSILERANGE, TRACE_ReportPortals);
		
		Array<Actor> alreadyHit;
		for (uint i = 0; i < tracer.hitEnemies.Size(); ++i)
		{
			let mo = tracer.hitEnemies[i];
			if (!mo || alreadyHit.Find(mo) != alreadyHit.Size())
				continue;
			
			alreadyHit.Push(mo);
			mo.DamageMobj(self, owner, 100, "Electric", DMG_NOBLOCK);
			let ail = Shock(mo.FindInventory("Shock"));
			if (ail)
				ail.AddAilment(owner, 100);
			
			BlockThingsIterator it = BlockThingsIterator.Create(mo, 256);
			Actor chain;
			while (it.Next())
			{
				chain = it.thing;
				if (!chain || chain == mo || chain == owner || !(chain.bIsMonster || chain.player) || chain.health <= 0 ||
					owner.IsFriend(chain) || alreadyHit.Find(chain) != alreadyHit.Size() ||
					tracer.hitEnemies.Find(chain) != tracer.hitEnemies.Size() ||
					mo.Distance3DSquared(chain) > 65536 || !mo.CheckSight(chain))
				{
					continue;
				}
				
				alreadyHit.Push(chain);
				chain.DamageMobj(self, owner, 50, "Electric", DMG_NOBLOCK);
				let ail = Shock(chain.FindInventory("Shock"));
				if (ail)
					ail.AddAilment(owner, 100);
			}
		}
	}
}