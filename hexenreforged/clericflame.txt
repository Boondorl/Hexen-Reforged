class ReforgedFlame : RPGWeapon replaces CWeapFlame
{
	Default
	{
		RPGWeapon.BashCost 2;
		Weapon.SelectionOrder 1000;
		Weapon.KickBack 150;
		Weapon.YAdjust 10;
		Weapon.AmmoUse1 3;
		Weapon.AmmoUse2 5;
		Weapon.AmmoType1 "GreenMana";
		Weapon.AmmoType2 "RedMana";
		Inventory.PickupMessage "$TXT_WEAPON_C3";
		Tag "$TAG_CWEAPFLAME";
		
		+NOGRAVITY
	}

	States
	{
		Spawn:
			WCFM ABCDEFGH 4 Bright;
			Loop;
			
		Select:
			CFLM A 1 A_Raise;
			Loop;
			
		Deselect:
			CFLM A 1 A_Lower;
			Loop;
			
		Ready:
			CFLM AAAABBBBCCCC 1 A_BashWeaponReady();
			Loop;
			
		User1:
			CFLM A 2 Offset (0, 40);
			CFLM D 2 Offset (0, 50);
			CFLM D 2 Offset (0, 36);
			CFLM E 4 Bright;
			CFLM F 4 Bright A_CFlameAttack3;
			CFLM E 4 Bright;
			CFLM G 2 Offset (0, 40);
			CFLM G 2;
			Goto Ready;
			
		Fire:
			CFLM A 2 Offset (0, 40);
			CFLM D 2 Offset (0, 50);
			CFLM D 2 Offset (0, 36);
			CFLM E 4 Bright;
			CFLM F 4 Bright A_CFlameAttack;
			CFLM E 4 Bright;
			CFLM G 2 Offset (0, 40);
			CFLM G 2;
			Goto Ready;
			
		AltFire:
			CFLM A 2 Offset (0, 40);
			CFLM D 2 Offset (0, 50);
			CFLM D 2 Offset (0, 36);
			CFLM E 4 Bright;
			CFLM F 4 Bright A_CFlameAttack2;
			CFLM E 4 Bright;
			CFLM G 2 Offset (0, 40);
			CFLM G 2;
			Goto Ready;
	}

	action void A_CFlameAttack()
	{
		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire))
				return;
		}
		
		FLineTraceData t;
		LineTrace(angle, PLAYERMISSILERANGE, pitch, offsetz: height/2-floorclip+player.mo.attackZOffset*player.crouchfactor, data: t);
		Actor missile;
		if (t.HitActor)
			missile = Spawn("RCFlameMissile", (t.hitActor.pos.x, t.hitActor.pos.y, t.hitActor.floorz), ALLOW_REPLACE);
		else
		{
			Vector2 hit = t.hitLocation.xy - t.hitDir.xy*1;
			Vector3 spawnPos = (hit, GetZAt(hit.x, hit.y, flags: GZF_ABSOLUTEPOS));
			missile = Spawn("RCFlameMissile", spawnPos, ALLOW_REPLACE);
		}
		
		if (missile)
		{
			missile.target = self;
			missile.ExplodeMissile();
		}
		
		A_PlaySound ("ClericFlameFire", CHAN_WEAPON);
	}
	
	action void A_CFlameAttack2()
	{
		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo(weapon.bAltFire))
				return;
		}
		
		FLineTraceData t;
		LineTrace(angle, PLAYERMISSILERANGE, pitch, offsetz: height/2-floorclip+player.mo.attackZOffset*player.crouchfactor, data: t);
		Actor missile;
		if (t.HitActor)
			missile = Spawn("FlameBlast", (t.hitActor.pos.x, t.hitActor.pos.y, t.hitActor.floorz), ALLOW_REPLACE);
		else
		{
			Vector2 hit = t.hitLocation.xy - t.hitDir.xy*1;
			Vector3 spawnPos = (hit, GetZAt(hit.x, hit.y, flags: GZF_ABSOLUTEPOS));
			missile = Spawn("FlameBlast", spawnPos, ALLOW_REPLACE);
		}
		
		if (missile)
		{
			missile.target = self;
			missile.ExplodeMissile();
		}
		
		A_PlaySound ("ClericFlameFire", CHAN_WEAPON);
	}
	
	action void A_CFlameAttack3()
	{
		if (player == null)
		{
			return;
		}
		
		for (int i = 0; i < 8; ++i)
		{
			FLineTraceData t;
			LineTrace(i*45, 64, 0, TRF_THRUACTORS | TRF_THRUHITSCAN, data: t);
			if (t.distance >= 64)
			{
				let pillar = Spawn("FlamePillar", t.hitLocation, ALLOW_REPLACE);
				if (pillar)
				{
					pillar.target = self;
					pillar.ExplodeMissile();
				}
			}
		}
		
		A_PlaySound ("ClericFlameExplode", CHAN_BODY);
	}
}

class RCFlameMissile : RPGMissile
{
	Default
	{
		Radius 48;
		Damage 180;
		DamageType "Fire";
		RPGMissile.AilmentPower 100;
		RPGMissile.AilmentType "Burn";
		RPGMissile.AilmentDamage 10;
		XScale 2.5;
		YScale 4;
		RenderStyle "Add";
		
		+OLDRADIUSDMG
		+ZDOOMTRANS
	}
	
	States
	{
		Spawn:
		Death:
			TNT1 A 0 A_PlaySound ("ClericFlameExplode", CHAN_BODY);
			CFFX A 1 Bright A_Explode(damage, radius, 0, false, radius, damagetype: damageType);
			CFFX ABC 3 Bright;
			CFFX D 4 Bright;
			CFFX E 3 Bright;
			CFFX F 4 Bright;
			CFFX G 3 Bright;
			CFFX H 4 Bright;
			CFFX I 3 Bright;
			CFFX J 4 Bright;
			CFFX K 3 Bright;
			CFFX L 4 Bright;
			CFFX M 3 Bright;
			Stop;
	}
}

class FlamePillar : RPGMissile
{
	Default
	{
		Radius 32;
		Damage 10;
		DamageType "Fire";
		RPGMissile.AilmentPower 100;
		RPGMissile.AilmentType "Burn";
		RPGMissile.AilmentDamage 5;
		YScale 2;
		RenderStyle "Add";
		
		+ZDOOMTRANS
	}
	
	States
	{
		Spawn:
		Death:
			CFFX A 1 Bright A_Explode(damage, radius, 0, false, radius, damagetype: damageType);
			CFFX ABC 3 Bright;
			CFFX D 4 Bright;
			CFFX E 3 Bright;
			CFFX F 4 Bright;
			CFFX G 3 Bright;
			CFFX H 4 Bright;
			CFFX I 3 Bright;
			CFFX J 4 Bright;
			CFFX K 3 Bright;
			CFFX L 4 Bright;
			CFFX M 3 Bright;
			Stop;
	}
}

class FlameFX : Actor
{
	Default
	{
		YScale 2;
		RenderStyle "Add";
		
		+ZDOOMTRANS
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			CFFX A 1 Bright;
			CFFX ABC 3 Bright;
			CFFX D 4 Bright;
			CFFX E 3 Bright;
			CFFX F 4 Bright;
			CFFX G 3 Bright;
			CFFX H 4 Bright;
			CFFX I 3 Bright;
			CFFX J 4 Bright;
			CFFX K 3 Bright;
			CFFX L 4 Bright;
			CFFX M 3 Bright;
			Stop;
	}
}

class FlameBlast : RPGMissile
{
	Default
	{
		Radius 128;
		Damage 60;
		DamageType "Fire";
		RPGMissile.AilmentPower 100;
		RPGMissile.AilmentType "Burn";
		RPGMissile.AilmentDamage 10;
		XScale 4;
		YScale 4;
		RenderStyle "Add";
		
		+ZDOOMTRANS
	}
	
	States
	{
		Spawn:
		Death:
			TNT1 A 0
			{
				A_PlaySound ("ClericFlameExplode", CHAN_BODY);
				let fire = Spawn("GroundFire", pos, ALLOW_REPLACE);
				if (fire)
					fire.target = target;
				
				for (int i = 0; i < 8; ++i)
				{
					FLineTraceData t;
					LineTrace(i*45, 128, 0, TRF_THRUACTORS | TRF_THRUHITSCAN, data: t);
					if (t.distance >= 128)
						Spawn("FlameFX", t.hitLocation, ALLOW_REPLACE);
				}
			}
			CFFX A 1 Bright A_Explode(damage, radius, 0, false, radius, damagetype: damageType);
			CFFX ABC 3 Bright;
			CFFX D 4 Bright;
			CFFX E 3 Bright;
			CFFX F 4 Bright;
			CFFX G 3 Bright;
			CFFX H 4 Bright;
			CFFX I 3 Bright;
			CFFX J 4 Bright;
			CFFX K 3 Bright;
			CFFX L 4 Bright;
			CFFX M 3 Bright;
			Stop;
	}
}

class FlameFX2 : FlameFX
{
	Default
	{
		Scale 0.25;
	}
}

class GroundFire : AreaOfEffect
{
	int fireTimer;
	
	Default
	{
		AreaOfEffect.AilmentPower 25;
		AreaOfEffect.AilmentType "Burn";
		AreaOfEffect.AilmentDamage 10;
		AreaOfEffect.CoolDownToken "GroundFireHit";
		Height 16;
		Radius 128;
		Damage 10;
		DamageType "Fire";
		Threshold 350;
		
		+AREAOFEFFECT.SHATTERER
		+AREAOFEFFECT.GROUNDED
	}
	
	override void Effect()
	{
		if (++fireTimer > 2)
		{
			fireTimer = 0;
			
			double rad = frandom(0, radius);
			double theta = frandom(0, 359.9999);
			Vector2 ofs = Vec2Offset(rad*cos(theta), rad*sin(theta));
			Spawn("FlameFX2", (ofs, floorz));
		}
	}
}

class GroundFireHit : CoolDownToken
{
	Default
	{
		Threshold 8;
	}
}