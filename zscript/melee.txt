class MeleeTracer : LineTracer
{
	double maxDistance;
	Array<Line> lines;
	Array<uint8> sides;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				lines.Push(results.hitLine);
				sides.Push(results.side);
				int blockFlags = Line.ML_BLOCKHITSCAN | Line.ML_BLOCKEVERYTHING;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					results.distance = maxDistance;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor.bSolid && !results.hitActor.bShootable)
					return TRACE_Stop;
				results.distance = maxDistance;
				break;
		}
		
		return TRACE_Skip;
	}
}

class ShieldTracer : LineTracer
{
	Actor master;
	double maxDistance;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				if ((results.hitLine.flags & Line.ML_TWOSIDED) && results.tier == TIER_Middle)
				{
					results.distance = maxDistance;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
				
			case TRACE_HitActor:
				if (results.hitActor == master || !results.hitActor.bSolid)
				{
					results.distance = maxDistance;
					break;
				}
				return TRACE_Stop;
				break;
		}
		
		return TRACE_Skip;
	}
}

class Marker : Actor
{
	Default
	{
		Scale 0.2;
		
		+NOINTERACTION
		+FORCEXYBILLBOARD
	}
	
	States
	{
		Spawn:
			FDMB A 2 Bright;
			Stop;
	}
}

class Marker2 : Marker {}

class BlockBox : Actor
{
	Array<Actor> alreadyHit;
	
	double length;
	double width;
	double realHeight;
	double forwardOffset;
	double sideOffset;
	double upOffset;
	sound blockSound;
	double blockReduction;
	double parryReduction;
	int parryWindow;
	
	private bool bPlayerParry;
	
	Vector3 forward;
	Vector3 right;
	Vector3 up;
	
	property Length : length;
	property Width : width;
	property Height : realHeight;
	property Roll : roll;
	property ForwardOffset : forwardOffset;
	property SideOffset : sideOffset;
	property UpOffset : upOffset;
	property BlockSound : blockSound;
	property BlockReduction : blockReduction;
	property ParryReduction : parryReduction;
	property ParryWindow : parryWindow;
	
	Default
	{
		+SHOOTABLE
		+REFLECTIVE
		+NORADIUSDMG
		+NODAMAGETHRUST
		+NEVERTARGET
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (bPlayerParry)
		{
			let rpgm = RPGMonster(master);
			State unblock = master.FindState("Unblock");
			if (rpgm && unblock && rpgm.health > 0)
			{
				rpgm.SetState(unblock);
				return;
			}
			else
				bPlayerParry = false;
		}
		
		if (master && master.health > 0)
		{
			Vector3 masterRight = (AngleToVector(master.angle-90), 0);
			
			double realPch = master.pitch;
			if (!master.player && master.target)
			{
				Vector3 dir = master.Vec3To(master.target) + (0,0,(master.target.height/2-master.target.floorclip) - (master.height/2-master.floorclip));
				realPch = -VectorAngle(dir.xy.Length(), dir.z);
			}
			forward = (AngleToVector(master.angle, cos(realPch)), -sin(realPch));
			
			if (roll == 0 || roll == 180)
			{
				right = masterRight;
				up = (AngleToVector(master.angle, cos(realPch-90)), -sin(realPch-90));
			}
			else
			{
				double ang = VectorAngle(forward.x, forward.y);
				double pch = -VectorAngle(forward.xy.Length(), forward.z);
				
				double angCos, angSin, pchCos, pchSin, rolCos, rolSin;
				angCos = cos(ang);
				angSin = sin(ang);
				pchCos = cos(pch);
				pchSin = sin(pch);
				rolCos = cos(roll);
				rolSin = sin(roll);
				
				right = (-1*rolSin*pchSin*angCos + -1*rolCos*-angSin, -1*rolSin*pchSin*angSin + -1*rolCos*angCos, -1*rolSin*pchCos);
				up = (rolCos*pchSin*angCos + -rolSin*-angsin, rolCos*pchSin*angSin + -rolSin*angCos, rolCos*pchCos);
			}
				
			Vector3 modUp = (0,0,upOffset);
			if (master.player)
				modUp.z *= master.player.crouchFactor;
			
			Vector3 origin = master.pos + masterRight*sideOffset + modUp - (0,0,master.floorclip);
			let tracer = new("ShieldTracer");
			if (tracer)
			{
				tracer.master = master;
				tracer.maxDistance = forwardOffset + length;
				tracer.Trace(origin, level.PointInSector(origin.xy), forward, forwardOffset+length, 0);
				origin += forward*(tracer.results.distance-length);
			}
			
			SetOrigin(origin, false);
				
			if (!isFrozen())
			{
				Spawn("Marker", pos+(0,0,height/2)+forward*length+right*width-up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)+forward*length-right*width-up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)-forward*length+right*width-up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)-forward*length-right*width-up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)+forward*length+right*width+up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)+forward*length-right*width+up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)-forward*length+right*width+up*(realHeight/2));
				Spawn("Marker", pos+(0,0,height/2)-forward*length-right*width+up*(realHeight/2));
			}
			
			if (parryWindow > 0)
			{
				--parryWindow;
				if (parryWindow <= 0)
					bReflective = false;
			}
		}
		else
			Destroy();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if ((flags & DMG_EXPLOSION) || alreadyHit.Find(inflictor) != alreadyHit.Size())
			return -1;
		
		double reduction = 1 - (parryWindow > 0 ? parryReduction : blockReduction);
		A_StartSound(blockSound, CHAN_AUTO);
		damage = round(damage * reduction);
			
		if (parryWindow > 0)
		{
			if (inflictor && inflictor.bMissile && inflictor.target != master)
			{
				double realPch = master.pitch;
				if (!master.player && master.target)
				{
					Vector3 forw = master.Vec3To(master.target) + (0,0,(master.target.height/2-master.target.floorclip) - (master.height/2-master.floorclip));
					realPch = -VectorAngle(forw.xy.Length(), forw.z);
				}
				
				Vector3 dir = (AngleToVector(master.angle, cos(realPch)), -sin(realPch));
				let missile = Spawn(inflictor.GetClass(), inflictor.pos);
				if (missile)
				{
					missile.vel = dir * GetDefaultSpeed(inflictor.GetClass());
					missile.target = master;
					missile.tracer = source;
					missile.angle = master.angle;
					missile.SetState(inflictor.CurState);
					missile.tics = inflictor.tics;
					alreadyHit.Push(inflictor);
					inflictor.Destroy();
				}
			}
			else if (source && inflictor && (inflictor.bIsMonster || inflictor is 'HurtBox'))
			{
				if (source is 'RPGMonster')
				{
					let rpgm = RPGMonster(source);
					rpgm.bCancelled = true;
								
					State parry = source.FindState("Parry");
					if (parry)
						source.SetState(parry);
				}
				else if (source is 'RPGPlayer')
				{
					let weap = RPGMelee(source.player.ReadyWeapon);
					if (weap)
					{
						State parry = weap.FindState("Parry");
						if (parry)
						{
							weap.bCancelled = true;
							bPlayerParry = true;
							source.player.SetPsprite(PSP_WEAPON, parry);
						}
					}
				}
				else
				{
					State pain = source.FindState("Pain");
					if (pain)
						source.SetState(pain);
				}
			}
		}
		
		Actor inflict = self;
		if ((inflictor is 'RPGMissile' && RPGMissile(inflictor).bShieldBuster) ||
			(inflictor is 'HurtBox' && HurtBox(inflictor).bShieldBuster))
		{
			inflict = inflictor;
		}
			
		master.DamageMobj(inflict, source, damage, mod, flags, angle);
		
		return -1;
	}
}

class HurtBox : Actor
{
	Array<Actor> alreadyHit;
	
	int bonusDamage;
	Name bonusDamageType;
	class<Ammo> bonusType;
	int bonusCost;
	
	class<Ammo> reserveBonusType;
	
	Vector3 hbForward;
	Vector3 hbRight;
	Vector3 hbUp;
	
	double ailmentPower;
	class<Ailment> ailmentType;
	int ailmentDamage;
	double bonusAilmentPower;
	class<Ailment> bonusAilmentType;
	int bonusAilmentDamage;
	
	int duration;
	private int durationTimer;
	bool bHitObstacle;
	bool bKill;
	
	double forwardOffset;
	double sideOffset;
	double upOffset;
	double range;
	
	Array<double> angleRange;
	Array<double> pitchRange;
	Array<double> rollRange;
	Array<double> forwardOffsets;
	
	double angleInterval;
	double pitchInterval;
	double rollInterval;
	double forwardInterval;
	
	double currentAngle;
	double currentPitch;
	double currentRoll;
	double currentForward;
	
	double hbLength;
	bool bCriticalHit;
	double damageMultiplier;
	
	property BonusDamage : bonusDamage;
	property BonusDamageType : bonusDamageType;
	property ReserveBonusType : reserveBonusType;
	property BonusCost : bonusCost;
	property BonusType : bonusType;
	property AilmentPower : ailmentPower;
	property AilmentType : ailmentType;
	property AilmentDamage : ailmentDamage;
	property BonusAilmentPower : bonusAilmentPower;
	property BonusAilmentType : bonusAilmentType;
	property BonusAilmentDamage : bonusAilmentDamage;
	property ForwardOffset : forwardOffset;
	property SideOffset : sideOffset;
	property UpOffset : upOffset;
	
	deprecated("3.7") private int hurtBoxFlags;
	flagdef DieOnHit: hurtBoxFlags, 0;
	flagdef NoReverse: hurtBoxFlags, 1;
	flagdef DontInterpolate: hurtBoxFlags, 2;
	flagdef NoBonusMulti: hurtBoxFlags, 3;
	flagdef Freezer: hurtBoxFlags, 4;
	flagdef Shatterer: hurtBoxFlags, 5;
	flagdef NoCrit: hurtBoxFlags, 6;
	flagdef NoBlockWarn: hurtBoxFlags, 7;
	flagdef ShieldBuster: hurtBoxFlags, 8;
	
	Default
	{
		+NOINTERACTION
		+NODAMAGETHRUST
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (!target || target.health <= 0 || durationTimer++ >= duration)
		{
			Destroy();
			return;
		}
		else
		{
			if (target.player)
			{
				let weap = RPGMelee(target.player.ReadyWeapon);
				if (weap && weap.bCancelled)
				{
					Destroy();
					return;
				}
			}
			else
			{
				let monst = RPGMonster(target);
				if (monst && monst.bCancelled)
				{
					Destroy();
					return;
				}	
			}
		}

		double pch = target.pitch;
		if (!target.player && target.target)
		{
			double testHeight = min(target.target.height, 64); // Don't aim too high
			Vector3 vecTo = target.Vec3To(target.target) + (0,0,testHeight/2 - target.height/2);
			pch = -VectorAngle(vecTo.xy.Length(), vecTo.z);
		}
		
		Vector3 forward = (AngleToVector(target.angle,cos(pch)), -sin(pch));
		Vector3 right = (AngleToVector(target.angle-90), 0);
		Vector3 up = (AngleToVector(target.angle, cos(pch-90)), -sin(pch-90));
		
		if (!bNoBlockWarn && durationTimer == 1)
		{
			BlockThingsIterator it = BlockThingsIterator.Create(self, range);
			Actor mo;
			while (it.Next())
			{
				mo = it.thing;
				if (!mo || mo == target || !mo.bIsMonster || mo.health <= 0 || mo.bFriendly == target.bFriendly)
					continue;
				
				if (mo is 'RPGMonster' && AbsAngle(target.angle, target.AngleTo(mo)) <= 90)
				{
					let rpgm = RPGMonster(mo);
					rpgm.Block(self);
				}
			}
		}
		
		if (bDontInterpolate || durationTimer == 1)
		{
			double angStep = bDontInterpolate ? angleInterval : 0;
			double pchStep = bDontInterpolate ? pitchInterval : 0;
			double rolStep = bDontInterpolate ? rollInterval : 0;
			double forwStep = bDontInterpolate ? forwardInterval : 0;
			
			InterpolateBox(forward, right, up, angStep, pchStep, rolStep, forwStep);
		}
		else
		{
			Vector3 dir = (forward + right*tan(currentAngle) + up*tan(currentPitch)).Unit();
			Vector3 endDir = (forward + right*tan(currentAngle+angleInterval) + up*tan(currentPitch+pitchInterval)).Unit();
			
			int steps = max(1, ceil(acos(endDir dot dir) / 3.));
			double angStep = angleInterval / steps;
			double pchStep = pitchInterval / steps;
			double rolStep = rollInterval / steps;
			double forwStep = forwardInterval / steps;
			
			for (int i = 0; i < steps; ++i)
			{
				InterpolateBox(forward, right, up, angStep, pchStep, rolStep, forwStep);
				if (bKill)
					break;
			}
		}
		
		if (bKill)
		{
			durationTimer = duration;
			A_StartSound(DeathSound, CHAN_AUTO);
		}
	}
	
	void InterpolateBox(Vector3 forward, Vector3 right, Vector3 up, double angInt, double pchInt, double rolInt, double forwInt)
	{
		hbForward = (forward + right*tan(currentAngle) + up*tan(currentPitch)).Unit();
		double hbAng = VectorAngle(hbForward.x, hbForward.y);
		double hbPch = -VectorAngle(hbForward.xy.Length(), hbForward.z);
		
		double angCos, angSin, pchCos, pchSin, rolCos, rolSin;
		angCos = cos(hbAng);
		angSin = sin(hbAng);
		pchCos = cos(hbPch);
		pchSin = sin(hbPch);
		rolCos = cos(roll+currentRoll);
		rolSin = sin(roll+currentRoll);
		
		hbRight = (-1*rolSin*pchSin*angCos + -1*rolCos*-angSin, -1*rolSin*pchSin*angSin + -1*rolCos*angCos, -1*rolSin*pchCos);
		hbUp = (rolCos*pchSin*angCos + -rolSin*-angsin, rolCos*pchSin*angSin + -rolSin*angCos, rolCos*pchCos);
		
		Vector3 start = target.pos + (0,0,target.height/2 - target.floorclip);
		if (target.player)
			start += (0,0,target.player.mo.AttackZOffset*target.player.crouchFactor);
		else
			start += (0,0,8);
		
		Vector3 offset = (hbForward*forwardOffset) + (hbRight*sideOffset) + (hbUp*upOffset);
		if (offset.x || offset.y || offset.z)
		{
			Vector3 ofsDir = offset.Unit();
			double ofsLength = offset.Length();
			
			let checker = new("MeleeTracer");
			if (checker)
			{
				checker.maxDistance = ofsLength;
				checker.Trace(start, target.CurSector, ofsDir, ofsLength, 0);
				ofsLength = checker.results.distance-(1./65536);
			}
			
			start += (ofsDir*ofsLength);
		}
		
		hbLength = currentForward / 2.;
		let tracer = new("MeleeTracer");
		if (tracer)
		{
			tracer.maxDistance = currentForward;
			tracer.Trace(start, level.PointInSector(start.xy), hbForward, currentForward, 0);
			hbLength = tracer.results.distance / 2.;
			if (tracer.results.distance < tracer.maxDistance && !bHitObstacle)
			{
				A_StartSound(ActiveSound);
				bHitObstacle = true;
			}
			
			for (uint i = 0; i < tracer.lines.Size(); ++i)
			{
				tracer.lines[i].Activate(target, tracer.sides[i], SPAC_Impact);
			}
		}
		
		SetXYZ(start+(hbForward*hbLength)-(hbUp*height/2));
		
		Spawn("Marker", pos+(hbUp*height/2));
		Spawn("Marker", pos+(hbForward*hbLength)+(hbUp*height/2));
		Spawn("Marker", pos-(hbForward*hbLength)+(hbUp*height/2));
		
		currentAngle += angInt;
		currentPitch += pchInt;
		currentRoll += rolInt;
		currentForward += (!bNoReverse && durationTimer > (duration/2.)) ? -forwInt : forwInt;
		
		BlockThingsIterator it = BlockThingsIterator.Create(self, hbLength);
		Actor mo;
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || mo == target || !mo.bShootable || (!mo.bIceCorpse && mo.health <= 0) || alreadyHit.Find(mo) != alreadyHit.Size() ||
				(mo.master && mo.master.player && target.isFriend(mo)) || (target.master && target.master.player && mo.IsFriend(target)))
			{
				continue;
			}
			
			if (CheckOBB(mo, hbForward, hbRight, hbUp, hbLength) && CheckHitBoxes(mo))
			{
				bool isShield = (mo is 'BlockBox');
				if (isShield && alreadyHit.Find(mo.master) != alreadyHit.Size())
				{
					alreadyHit.Push(mo);
					continue;
				}
				else if (mo.bIceCorpse)
				{
					mo.DamageMobj(self, target, 1, 'None');
				}
				else
				{
					if (isShield &&
						(mo.master == target ||
						(mo.master.master && mo.master.master.player && target.isFriend(mo.master)) ||
						(target.master && target.master.player && mo.master.IsFriend(target))))
					{
						continue;
					}
					
					mo.A_StartSound(AttackSound, CHAN_AUTO);
					
					int flags = bCriticalHit ? DMG_CRIT : 0;
					if (target)
					{
						bool doBonus = true;
						bool useNormal = false;
						bool useReserve = false;
						
						Ammo normal;
						Ammo reserve;
						
						if (bonusCost > 0 && !sv_infiniteammo && !target.FindInventory("PowerInfiniteAmmo"))
						{
							normal = Ammo(target.FindInventory(bonusType));
							reserve = Ammo(target.FindInventory(reserveBonusType));
							
							if (normal && normal.amount < bonusCost)
							{
								if (!reserve || (reserve.amount+normal.amount) < bonusCost)
									doBonus = false;
								else
								{
									if (normal.amount > 0)
										useNormal = true;
									
									useReserve = true;
								}
							}
							else if (normal)
								useNormal = true;
						}
						
						if (doBonus)
						{
							int modDmg = bonusDamage;
							if (!bNoBonusMulti)
								modDmg = round(modDmg * damageMultiplier);
							
							int dmg = mo.DamageMobj(self, target, modDmg, bonusDamageType, bNoBonusMulti ? 0 : flags);
							if (isShield || (dmg > 0 && (mo.bIsMonster || mo.player)))
							{
								if (useNormal || useReserve)
								{
									int cost = bonusCost;
									
									if (normal && useNormal)
									{
										int take = min(normal.amount, bonusCost);
										cost -= take;
										normal.amount -= take;
									}
									
									if (reserve && useReserve)
										reserve.amount -= cost;
								}
								BonusAttack(mo);
							}
							
							if (mo.bIceCorpse && bShatterer)
								mo.DamageMobj(self, target, 1, 'None');
						}
					}
					
					int newdam = mo.DamageMobj(self, target, round(damage*damageMultiplier), damageType, flags);
					if (!isShield)
					{
						SpawnBlood(mo, round(damage*damageMultiplier), newdam);
						if (mo.bIceCorpse && bShatterer)
							mo.DamageMobj(self, target, 1, 'None');
					}
							
					alreadyHit.Push(mo);
					if (isShield)
						alreadyHit.Push(mo.master);
					
					if (bDieOnHit && (mo.bIsMonster || mo.player || isShield))
						bKill = true;
				}
			}
		}
	}
	
	void SpawnBlood(Actor mo, int intialDamage, int realDamage)
	{
		if (!mo)
			return;
		
		mo.TraceBleed(realDamage > 0 ? realDamage : intialDamage, target);
		
		double srcAng = AngleTo(mo);
		Vector3 spot = mo.pos + (0,0, pos.z - mo.pos.z);
		spot.xy = mo.Vec2Offset(mo.radius*cos(srcAng+180), mo.radius*sin(srcAng+180));
		
		mo.SpawnLineAttackBlood(target, spot, srcAng, intialDamage, realDamage);
	}
	
	bool CheckOBB(Actor mo, Vector3 forward, Vector3 right, Vector3 up, double length)
	{
		if (!mo)
			return false;
		
		double depth = height / 2;
		double moDepth = mo.height / 2;
		double moLength = mo.radius;
		double moWidth = mo.radius;
		
		Vector3 center = pos + (up*depth);
		Vector3 moCenter = mo.pos + (0,0,moDepth);
		
		Vector3 moForward = (1,0,0);
		Vector3 moRight = (0,1,0);
		Vector3 moUp = (0,0,1);
		
		if (mo is 'CollisionBox')
		{
			let box = CollisionBox(mo);
			if (box.bOriented)
				moLength = box.length;
			
			moForward = box.forward;
			moRight = box.right;
		}
		else if (mo is 'BlockBox')
		{
			let box = BlockBox(mo);
			moLength = box.length;
			moWidth = box.width;
			moDepth = box.realHeight / 2;
			moForward = box.forward;
			moRight = box.right;
			moUp = box.up;
		}
		
		Vector3 t = moCenter - center;
		
		if (ProjectEdge(t, forward, length, moLength, moWidth, moDepth, moForward, moRight, moUp) ||
			ProjectEdge(t, right, radius, moLength, moWidth, moDepth, moForward, moRight, moUp) ||
			ProjectEdge(t, up, depth, moLength, moWidth, moDepth, moForward, moRight, moUp) ||
			ProjectEdge(t, moForward, moLength, length, radius, depth, forward, right, up) ||
			ProjectEdge(t, moRight, moWidth, length, radius, depth, forward, right, up) ||
			ProjectEdge(t, moUp, moDepth, length, radius, depth, forward, right, up))
		{
			return false;
		}
		
		if (ProjectPlane(t, forward, radius, depth, moForward, moWidth, moDepth, up, right, moUp, moRight) ||
			ProjectPlane(t, forward, radius, depth, moRight, moLength, moDepth, up, right, moUp, moForward) ||
			ProjectPlane(t, forward, radius, depth, moUp, moLength, moWidth, up, right, moRight, moForward) ||
			ProjectPlane(t, right, length, depth, moForward, moWidth, moDepth, up, forward, moUp, moRight) ||
			ProjectPlane(t, right, length, depth, moRight, moLength, moDepth, up, forward, moUp, moForward) ||
			ProjectPlane(t, right, length, depth, moUp, moLength, moWidth, up, forward, moRight, moForward) ||
			ProjectPlane(t, up, length, radius, moForward, moWidth, moDepth, right, forward, moUp, moRight) ||
			ProjectPlane(t, up, length, radius, moRight, moLength, moDepth, right, forward, moUp, moForward) ||
			ProjectPlane(t, up, length, radius, moUp, moLength, moWidth, right, forward, moRight, moForward))
		{
			return false;
		}
		
		return true;
	}
	
	bool ProjectEdge(Vector3 t, Vector3 axis, double aR, double bL, double bR, double bD, Vector3 forward, Vector3 right, Vector3 up)
	{
		return abs(t dot axis) > (aR + abs(axis dot (bL*forward)) + abs(axis dot (bR*right)) + abs(axis dot (bD*up)));
	}
	
	bool ProjectPlane(Vector3 t, Vector3 a1, double aR, double aD, Vector3 b1, double bR, double bD, Vector3 a2, Vector3 a3, Vector3 b2, Vector3 b3)
	{
		return abs(((t dot a2)*(a3 dot b1)) - ((t dot a3)*(a2 dot b1))) > (abs((aR*a2) dot b1) + abs((aD*a3) dot b1) + abs(a1 dot (bR*b2)) + abs(a1 dot (bD*b3)));
	}
	
	bool CheckHitBoxes(Actor mo)
	{
		let rpgm = RPGMonster(mo);
		if (!rpgm || !rpgm.collisionBoxes.Size())
		{
			damageMultiplier = 1;
			return true; // Use the default box
		}
		
		CollisionBox bestBox;
		int bestDamage = -1;
		for (int i = 0; i < rpgm.collisionBoxes.Size(); ++i)
		{
			let cBox = rpgm.collisionBoxes[i];
			if (!cBox || cBox.bDead || !cBox.bCriticalZone)
				continue;

			if (CheckOBB(cBox, hbForward, hbRight, hbUp, hbLength))
			{
				int dmg;
				if (!bNoCrit)
				{
					bCriticalHit = true;
					dmg = damage * cBox.multi;
				}
				else
					dmg = damage;
				
				if (dmg > bestDamage)
				{
					bestBox = cBox;
					bestDamage = dmg;
				}
			}
		}
			
		if (!bestBox)
		{
			for (int i = 0; i < rpgm.collisionBoxes.Size(); ++i)
			{
				let box = rpgm.collisionBoxes[i];
				if (!box || box.bDead || box.bCriticalZone)
					continue;
					
				if (CheckOBB(box, hbForward, hbRight, hbUp, hbLength))
				{
					int dmg = damage * box.multi;
					if (dmg > bestDamage)
					{
						bestBox = box;
						bestDamage = dmg;
					}
				}
			}
		}
			
		if (bestBox)
		{
			if (bestBox.bCriticalZone && bNoCrit)
				damageMultiplier = 1;
			else
				damageMultiplier = bestBox.multi;
			
			return true;
		}
		
		return false;
	}
	
	override int DoSpecialDamage(Actor victim, int damage, name damagetype)
	{
		if (damageType == self.damageType)
		{
			if (ailmentPower > 0 && ailmentType)
			{
				let ail = Ailment(victim.FindInventory(ailmentType));
				if (ail)
					ail.AddAilment(target, ailmentPower, ailmentDamage);
			}
		}
		else
		{
			if (bonusAilmentPower > 0 && bonusAilmentType)
			{
				let ail = Ailment(victim.FindInventory(bonusAilmentType));
				if (ail)
					ail.AddAilment(target, bonusAilmentPower, bonusAilmentDamage);
			}
		}
		
		return damage;
	}
	
	virtual void BonusAttack(Actor mo) {}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		int dur = max(1, duration - 1);
		
		if (angleRange.Size() == 2)
		{
			angleInterval = (angleRange[1] - angleRange[0]) / dur;
			currentAngle = angleRange[0];
		}
		
		if (pitchRange.Size() == 2)
		{
			pitchInterval = (pitchRange[1] - pitchRange[0]) / dur;
			currentPitch = pitchRange[0];
		}
		
		if (rollRange.Size() == 2)
		{
			rollInterval = (rollRange[1] - rollRange[0]) / dur;
			currentRoll = rollRange[0];
		}
		
		currentForward = range;
		
		if (forwardOffsets.Size() == 2)
		{
			forwardInterval = (forwardOffsets[1] - forwardOffsets[0]) / (bNoReverse ? dur : dur/2.);
			currentForward += forwardOffsets[0];
		}
	}
}

class RPGMelee : RPGWeapon
{
	enum EDirections
	{
		DIR_LEFT = 1,
		DIR_RIGHT = 2,
		DIR_FORW = 3,
		DIR_BACK = 4
	};
	
	BlockBox shield;
	class<BlockBox> shieldType;
	
	int direction;
	bool bCancelled;
	bool bReadyToBlock;
	private int dirTimer;
	private int blockTimer;
	
	property ShieldType : shieldType;
	
	Default
	{
		+WEAPON.NOALERT
	}
	
	action void A_MeleeCheckBlock(int offset = 0)
	{
		if (player.cmd.buttons & BT_RELOAD)
			player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState("Reload")+offset);
	}
	
	action void A_MeleeBlock()
	{
		if (invoker.shieldType)
		{
			invoker.shield = BlockBox(Spawn(invoker.shieldType, pos));
			if (invoker.shield)
				invoker.shield.master = self;
		}
	}
	
	action void A_MeleeUnblock()
	{
		if (invoker.shield)
			invoker.shield.Destroy();
		
		invoker.blockTimer = 8;
		invoker.bCancelled = false;
	}
	
	action void A_CheckSwing(bool heavy = false)
	{
		Weapon w = player.ReadyWeapon;
		switch (invoker.direction)
		{
			case DIR_LEFT:
				if (heavy)
					player.SetPsprite(PSP_WEAPON, w.FindState("AltFireLeft"));
				else
					player.SetPsprite(PSP_WEAPON, w.FindState("FireLeft"));
				break;
				
			case DIR_RIGHT:
				if (heavy)
					player.SetPsprite(PSP_WEAPON, w.FindState("AltFireRight"));
				else
					player.SetPsprite(PSP_WEAPON, w.FindState("FireRight"));
				break;
				
			case DIR_FORW:
				if (heavy)
					player.SetPsprite(PSP_WEAPON, w.FindState("AltFireUp"));
				else
					player.SetPsprite(PSP_WEAPON, w.FindState("FireUp"));
				break;
				
			case DIR_BACK:
				if (heavy)
					player.SetPsprite(PSP_WEAPON, w.FindState("AltFireDown"));
				else
					player.SetPsprite(PSP_WEAPON, w.FindState("FireDown"));
				break;
		}
	}
	
	override State GetUpState()
	{
		bReadyToBlock = false;
		return super.GetUpState();
	}
	
	override State GetDownState()
	{
		bReadyToBlock = false;
		return super.GetDownState();
	}
	
	override State GetReadyState()
	{
		bReadyToBlock = true;
		return super.GetReadyState();
	}
	
	override void OwnerDied()
	{
		blockTimer = 0;
		bCancelled = false;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		if (owner.health > 0 && owner.player && owner.player.ReadyWeapon == self)
		{
			if ((owner.player.cmd.buttons & BT_RELOAD) && !bCancelled && blockTimer <= 0 && bReadyToBlock)
			{
				State block = FindState("Reload");
				if (block)
				{
					bCancelled = true;
					owner.player.SetPsprite(PSP_WEAPON, block);
				}
			}
		}
		
		if (blockTimer > 0)
			--blockTimer;
		
		if (dirTimer > 0)
		{
			--dirTimer;
			if (dirTimer <= 0)
				direction = 0;
		}
		
		if (owner.player)
		{
			double fm = owner.player.cmd.forwardmove;
			double sm  = owner.player.cmd.sidemove;
			
			if (fm || sm)
			{
				if (sm > 0)
					direction = DIR_RIGHT;
				else if (sm < 0)
					direction = DIR_LEFT;
				else if (fm > 0)
					direction = DIR_FORW;
				else
					direction = DIR_BACK;
				
				dirTimer = 9;
			}
		}
	}
}