class CollisionBox : Actor
{
	Vector3 oldPos;
	
	double length;
	double forwardOffset;
	double sideOffset;
	double upOffset;
	double multi;
	
	Vector3 forward;
	Vector3 right;
	Vector3 up;
	
	bool bDead;
	
	property Length : length;
	property ForwardOffset : forwardOffset;
	property SideOffset : sideOffset;
	property UpOffset : upOffset;
	property Multi : multi;
	
	deprecated("3.7") private int collisionBoxFlags;
	flagdef CriticalZone: collisionBoxFlags, 0;
	flagdef Oriented: collisionBoxFlags, 1;
	
	Default
	{
		CollisionBox.Multi 1;
		
		+NOBLOCKMAP
	}
	
	override void Tick()
	{
		if (!master)
		{
			Destroy();
			return;
		}
		
		if ((master.health <= 0 && !master.bIceCorpse) || !master.bShootable || master.bNonshootable)
		{
			bDead = true;
			return;
		}
		
		bDead = false;
		
		// Uncomment this when no longer debugging with markers
		//if (master.pos == oldPos)
			//return;
				
		Vector3 masterForward = (AngleToVector(master.angle), 0);
		Vector3 masterRight = (AngleToVector(master.angle-90), 0);
					
		Vector3 offset = masterForward*forwardOffset + masterRight*sideOffset + (0,0,upOffset - master.floorclip);
		SetXYZ(master.Vec3Offset(offset.x, offset.y, offset.z));
		
		if (bOriented)
		{
			forward = masterForward;
			right = masterRight;
		}
			
		// Note: This code is for debugging purposes only
			if (!isFrozen())
			{
					if (bOriented)
					{
						Spawn("Marker", pos+forward*length+right*radius);
						Spawn("Marker", pos+forward*length-right*radius);
						Spawn("Marker", pos-forward*length+right*radius);
						Spawn("Marker", pos-forward*length-right*radius);
						Spawn("Marker", pos+forward*length+right*radius+(0,0,height));
						Spawn("Marker", pos+forward*length-right*radius+(0,0,height));
						Spawn("Marker", pos-forward*length+right*radius+(0,0,height));
						Spawn("Marker", pos-forward*length-right*radius+(0,0,height));
					}
					else
					{
						Spawn("Marker", pos+forward*radius+right*radius);
						Spawn("Marker", pos+forward*radius-right*radius);
						Spawn("Marker", pos-forward*radius+right*radius);
						Spawn("Marker", pos-forward*radius-right*radius);
						Spawn("Marker", pos+forward*radius+right*radius+(0,0,height));
						Spawn("Marker", pos+forward*radius-right*radius+(0,0,height));
						Spawn("Marker", pos-forward*radius+right*radius+(0,0,height));
						Spawn("Marker", pos-forward*radius-right*radius+(0,0,height));
					}
			}
		// End of debug code
		
		oldPos = master.pos;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		forward = (1,0,0);
		right = (0,1,0);
		up = (0,0,1);
	}
}

// Used for checking line of sight before an enemy attacks
class SightTracer : LineTracer
{
	Actor master;
	Actor target;
	bool bMelee; // Blocked by no hitscan lines
	bool bMissile; // Blocked by no projectile lines
	bool bMonster; // Blocked by no monster lines
	bool bThruObj; // Should we shoot through solid objects that aren't shootable?
	bool bThruMonst; // Should we shoot through our allies?
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKEVERYTHING;
				if (bMelee)
					blockFlags |= Line.ML_BLOCKHITSCAN;
				else if (bMissile)
					blockFlags |= Line.ML_BLOCKPROJECTILE;
				else if (bMonster)
					blockFlags |= Line.ML_BLOCKMONSTERS;
				
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					results.hitType = TRACE_HitNone;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor != master &&
					(results.hitActor == target ||
					(!bThruObj && !results.hitActor.bShootable && results.hitActor.bSolid) ||
					(!bThruMonst && results.hitActor.bIsMonster && (!master || !results.hitActor.IsFriend(master)))))
				{
					return TRACE_Stop;
				}
				results.hitType = TRACE_HitNone;
				break;
		}
		
		return TRACE_Skip;
	}
}

// Used to check if there's room for an enemy to leap
class LeapTracer : LineTracer
{
	Actor master;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKMONSTERS;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					results.hitType = TRACE_HitNone;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor != master && results.hitActor.bSolid)
					return TRACE_Stop;
				results.hitType = TRACE_HitNone;
				break;
		}
		
		return TRACE_Skip;
	}
}

// Used to find any destructible obstacles blocking the enemy's line of sight
class ObstacleTracer : LineTracer
{
	Actor master;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKHITSCAN;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					results.hitType = TRACE_HitNone;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor != master && results.hitActor.bShootable && !(results.hitActor.bIsMonster || results.hitActor.player) && results.hitActor.FindState("Death"))
					return TRACE_Stop;
				results.hitType = TRACE_HitNone;
				break;
		}
		
		return TRACE_Skip;
	}
}

// Used to check if there's an obstacle to jump over
class JumpCheckTracer : LineTracer
{
	Actor master;
	
	override ETraceStatus TraceCallback()
	{
		switch (results.HitType)
		{
			case TRACE_HitWall:
				int blockFlags = Line.ML_BLOCKEVERYTHING | Line.ML_BLOCKMONSTERS;
				if (!(results.hitLine.flags & blockFlags) &&
					(results.hitLine.flags & Line.ML_TWOSIDED) &&
					results.tier == TIER_Middle)
				{
					results.hitType = TRACE_HitNone;
					break;
				}
			case TRACE_HasHitSky:
			case TRACE_HitFloor:
			case TRACE_HitCeiling:
				return TRACE_Stop;
				break;
			
			case TRACE_HitActor:
				if (results.hitActor != master && results.hitActor.bSolid && (!(results.hitActor.bIsMonster || results.hitActor.player) || results.hitActor.health > 0))
					return TRACE_Stop;
				results.hitType = TRACE_HitNone;
				break;
		}
		
		return TRACE_Skip;
	}
}

class RPGMonster : Actor
{
	enum EArmorTypes
	{
		AR_SHIELD = 1,
		AR_CHEST = 2,
		AR_HELM = 4,
		AR_BRACE = 8,
		AR_AMUL = 16
	};
	
	private Actor realTarget; // Used when hitting props
	Actor lastHit; // Last actor to hit this one
	Array<CollisionBox> collisionBoxes;
	Array<class<Ailment> > ailments;
	class<BlockBox> shieldType;
	private BlockBox shield;
	
	double XP;
	int armorType;
	double trackRange;
	double trackAccuracy;
	double turnSpeed;
	double missileCheckHeight;
	int minMissileCoolDown;
	int maxMissileCoolDown;
	double blockChance;
	int failBlockCoolDown;
	int minBlockCoolDown;
	int maxBlockCoolDown;
	Name blastDamageType;
	double jumpSpeed;
	
	int rageTimer;
	int searchCoolDown;
	private State chaseState; // Used for smooth chasing
	private State wanderState; // Used for smooth wandering
	
	protected bool bBlocking;
	protected bool bSawTarget;
	protected int missileCoolDown;
	protected double idealAngle;
	protected int blockCoolDown;
	bool bDontAttack;
	bool bDontBlock;
	bool bCancelled;
	private bool bCancelDelay; // Make sure bCancelled is set for at least one tick
	private bool bInLeap;
	private bool bStuck; // Needs help leaving spawn (sometimes they're slightly in the wall)
	private bool bJustCalled; // Chase/Wander was just called, so don't smooth move
	
	property XP : XP;
	property ArmorType : armorType;
	property TrackRange : trackRange;
	property TrackAccuracy : trackAccuracy;
	property TurnSpeed : turnSpeed;
	property MissileCheckHeight : missileCheckHeight;
	property ShieldType : shieldType;
	property BlockChance : blockChance;
	property FailBlockCoolDown : failBlockCoolDown;
	property MinBlockCoolDown : minBlockCoolDown;
	property MaxBlockCoolDown : maxBlockCoolDown;
	property MinMissileCoolDown : minMissileCoolDown;
	property MaxMissileCoolDown : maxMissileCoolDown;
	property BlastDamageType : blastDamageType;
	property JumpSpeed : jumpSpeed;
	
	deprecated("3.7") private int rpgMonsterFlags;
	flagdef AttackThruMonst: rpgMonsterFlags, 0;
	flagdef AttackThruObj: rpgMonsterFlags, 1;
	flagdef Tracker: rpgMonsterFlags, 2;
	flagdef Blocker: rpgMonsterFlags, 3;
	flagdef Jumper: rpgMonsterFlags, 4;
	
	Default
	{
		Monster;
		MaxTargetRange 2048;
		MaxDropOffHeight 112;
		RPGMonster.MinMissileCoolDown 70;
		RPGMonster.MaxMissileCoolDown 105;
		RPGMonster.BlockChance 0.2;
		RPGMonster.FailBlockCoolDown 9;
		RPGMonster.MinBlockCoolDown 105;
		RPGMonster.MaxBlockCoolDown 175;
		RPGMonster.TrackRange 256;
		RPGMonster.TrackAccuracy 0.75;
		RPGMonster.TurnSpeed 10;
		RPGMonster.JumpSpeed 8;
		RPGMonster.BlastDamageType "Blunt";
		MeleeRange 32;
		
		+QUICKTORETALIATE
		+TELESTOMP
		+FLOORCLIP
		+SEEINVISIBLE
		+NOPAIN
		+NOICEDEATH
		+RPGMONSTER.TRACKER
	}
	
	void A_MonsterLook(int delay = 35)
	{
		if (health <= 0)
			return;
		
		bool stand = bStandStill;
		if (bFriendly)
			bStandStill = true;
		
		A_LookEx();
		if (target && target.health <= 0)
			target = null;
		
		if (!target && !bAmbush && !bFriendly && GetAge() > delay)
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
			Actor mo;
			while (mo = Actor(it.Next()))
			{
				if (!mo || mo == self || !mo.bIsMonster || mo.health <= 0)
					continue;
				
				if (IsHostile(mo) && !mo.bShadow &&
					AbsAngle(angle, AngleTo(mo)) <= 90 && CheckSight(mo))
				{
					target = mo;
					break;
				}
				
				if (!mo.target || mo.target.health <= 0)
					continue;
				
				if (!IsFriend(mo.target) && !mo.target.bShadow &&
					AbsAngle(angle, AngleTo(mo)) <= 90 && CheckSight(mo))
				{
					target = mo.target;
					break;
				}
			}
			
			if (target)
			{
				SetState(SeeState);
				A_StartSound(SeeSound, CHAN_VOICE, attenuation: bBoss ? ATTN_NONE : ATTN_NORM);
			}
		}
		
		bStandStill = stand;
	}
	
	void A_MonsterFaceTarget()
	{
		bSawTarget = false;
		if (target && (!target.bShadow || CheckMelee3D()) && CheckSight(target))
		{
			bSawTarget = true;
			idealAngle = AngleTo(target);
		}
	}
	
	bool CheckLeap(Vector3 dir, double distance)
	{
		let tracer = new("LeapTracer");
		if (!tracer)
			return false;
		
		double ang = VectorAngle(dir.x, dir.y);
		double width = radius*1.42;
			
		tracer.master = self;
		Vector3 start = pos + (0,0,jumpSpeed*6 + 4);
		tracer.Trace(start, CurSector, dir, distance, 0);
		if (tracer.results.hitType == TRACE_HitNone || tracer.results.hitActor == target)
		{
			start.xy = Vec2Angle(width, angle-90);
			tracer.Trace(start, CurSector, dir, distance, 0);
			if (tracer.results.hitType == TRACE_HitNone || tracer.results.hitActor == target)
			{
				start.xy = Vec2Angle(width, angle+90);
				tracer.Trace(start, CurSector, dir, distance, 0);
				if (tracer.results.hitType == TRACE_HitNone || tracer.results.hitActor == target)
					return true;
			}
		}
		
		return false;
	}
	
	bool OnGround()
	{
		return ((bFloat && bNoGravity) || pos.z <= floorz || bOnMobj);
	}
	
	void A_MonsterWander(int flags = 0, bool isWandering = true)
	{
		if (health <= 0)
			return;
		
		if (OnGround())
		{
			if (bStuck)
				speed = default.speed * 5;
			
			if (bInLeap)
				vel.xy = (0,0);
				
			if (isWandering)
			{
				chaseState = null;
				wanderState = CurState;
			}
			
			bInLeap = false;
			flags |= CHF_NODIRECTIONTURN;
			A_Wander(flags);
			idealAngle = movedir * 45;
			bJustCalled = true;
			
			if (bStuck)
			{
				bStuck = false;
				speed = default.speed;
			}
		}
		
		if (bInLeap)
			VelFromAngle(speed, idealAngle);
	}
	
	void A_MonsterChase(StateLabel melee = "Melee", StateLabel missile = "Missile", int flags = 0)
	{
		if (health <= 0)
			return;
		
		if (realTarget)
		{
			target = realTarget;
			realTarget = null;
		}
		
		if (!bFriendly && target && target.health > 0 && target.bIsMonster && !IsFriend(target))
		{
			if (--rageTimer <= 0 && --searchCoolDown <= 0)
			{
				Actor oldTarg = target;
				target = null;
					
				A_MonsterLook();
				if (!target)
					target = oldTarg;
					
				searchCoolDown = 4;
			}
		}
		
		if (target && target.health > 0)
		{
			double ang = AngleTo(target);
			
			double grav = GetGravity();
			let tracer = new("ObstacleTracer");
			if (tracer)
			{
				tracer.master = self;
				Vector3 start = pos + (0,0,height/2-floorclip);
				Vector3 dir = (AngleToVector(ang), 0);
				tracer.Trace(start, CurSector, dir, radius*3, 0);
				if (tracer.results.hitType == TRACE_HitActor && tracer.results.hitActor != target)
				{
					let mo = tracer.results.hitActor;
					double hitZ = mo.pos.z + mo.height - pos.z;
					double secHeight = mo.ceilingZ - mo.pos.z + hitZ;
					if (!grav || secHeight < height*1.25 || hitZ > jumpSpeed*6 / grav || !CheckLeap(dir, radius*2.5))
					{
						realTarget = target;
						target = mo;
					}
				}
			}
			
			if (!bDontAttack && FindState(melee) && CheckMelee())
			{
				SetStateLabel(melee);
				bJustAttacked = true;
				return;
			}
			
			if (realTarget)
			{
				target = realTarget;
				realTarget = null;
			}
			
			if (OnGround())
			{
				if (bStuck)
					speed = default.speed * 5;
				
				if (bInLeap)
					vel.xy = (0,0);
				
				bInLeap = false;
				if (grav != 0 && !bStuck && !bFloat && !bNoGravity && bJumper && AbsAngle(idealAngle, ang) <= 45)
				{
					let tracer = new("JumpCheckTracer");
					if (tracer)
					{
						tracer.master = self;
						Vector3 dir = (AngleToVector(ang), 0);
						tracer.Trace(pos+(0,0,MaxStepHeight/2), CurSector, dir, radius*2.5, 0);
						
						if (tracer.results.hitType == TRACE_HitWall && (tracer.results.hitLine.flags & Line.ML_TWOSIDED))
						{
							double secCeilZ = tracer.results.hitLine.sidedef[!tracer.results.side].sector.ceilingplane.ZAtPoint(tracer.results.hitPos.xy);
							double secFloorZ = tracer.results.hitLine.sidedef[!tracer.results.side].sector.floorplane.ZAtPoint(tracer.results.hitPos.xy);
							double secHeight = secCeilZ - secFloorZ;
							double delta = secFloorZ - pos.z;
								
							if (secHeight >= height*1.25 && delta > MaxStepHeight && delta <= jumpSpeed*6 / grav && CheckLeap(dir, radius*2.5))
							{
								vel.z += jumpSpeed;
								idealAngle = ang;
								bInLeap = true;
							}
						}
						
						if (!bInLeap && tracer.results.hitType == TRACE_HitActor && tracer.results.hitActor != target)
						{
							double hitZ = tracer.results.hitActor.pos.z + tracer.results.hitActor.height - pos.z;
							double secHeight = tracer.results.hitActor.ceilingZ - tracer.results.hitActor.pos.z + hitZ;
							if (secHeight >= height*1.25 && hitZ <= jumpSpeed*6 / grav && CheckLeap(dir, radius*2.5))
							{
								vel.z += jumpSpeed;
								idealAngle = ang;
								bInLeap = true;
							}
						}
					}
				}
				
				if (!bInLeap)
				{
					chaseState = CurState;
					wanderState = null;
					
					flags |= CHF_NODIRECTIONTURN;
					A_Chase(null, null, flags);
					idealAngle = movedir * 45;
					bJustCalled = true;
					
					if (bStuck)
					{
						bStuck = false;
						speed = default.speed;
					}
				}
			}
			
			if (bInLeap)
				VelFromAngle(speed, idealAngle);
			
			if (!bDontAttack && FindState(missile) && CheckMissile())
			{
				SetStateLabel(missile);
				if (target.bShadow && !bSawTarget)
					idealAngle = ang + frandom(-45, 45);
				
				bJustAttacked = true;
			}
		}
		else
		{
			target = null;
			
			if (bFriendly)
			{
				A_MonsterWander(0, false);
				
				ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
				Actor mo;
				while (mo = Actor(it.Next()))
				{
					if (!mo || mo == self || !mo.bIsMonster || IsFriend(mo) || mo.player || mo.health <= 0 ||
						mo.bShadow || mo.bInvulnerable)
					{
						continue;
					}
					
					if (AbsAngle(angle, AngleTo(mo)) <= 90 && CheckSight(mo))
					{
						target = mo;
						break;
					}
				}
			}
			else
			{
				let idle = FindState("Idle");
				if (idle)
					SetState(idle);
				else
					SetState(SpawnState);
			}
		}
	}
	
	void A_MonsterProjectile(class<Actor> type, double heightOfs = 0, double forwOfs = 0, double sideOfs = 0)
	{
		if (!target)
			return;
		
		A_MonsterFaceTarget();
		missileCoolDown = random(minMissileCoolDown, maxMissileCoolDown);
		
		Vector3 right = (AngleToVector(angle-90), 0);
		double h = heightOfs;
		if (!h)
			h = height/2 + 4;
		h -= floorclip;
		
		Vector3 forward = (AngleToVector(angle), 0);
		
		Vector3 spawnPos = pos + forward*forwOfs + right*sideOfs + (0,0,h);
		let missile = Spawn(type, spawnPos, ALLOW_REPLACE);
		if (missile)
		{
			missile.target = self;
			if (bSeekerMissile)
				missile.tracer = target;
			
			if (missile.bSpawnSoundSource)
				A_PlaySound(missile.SeeSound, CHAN_WEAPON);
			else
				missile.A_PlaySound(missile.SeeSound, CHAN_WEAPON);
			
			double spd = GetDefaultSpeed(type);
			Vector3 misDir = missile.Vec3To(target) + (0,0,(target.height/2-target.floorclip) - (missile.height/2));
			if (!bSawTarget)
				misDir.xy = AngleToVector(angle, misDir.xy.Length());
			else if (spd > 0 && bTracker && missile.Distance3DSquared(target) <= trackRange**2)
			{
				double time = misDir.Length() / spd;
				Vector2 enemyVel = target.vel.xy * trackAccuracy;
				
				misDir += enemyVel * time;
			}
			
			missile.angle = VectorAngle(misDir.xy.x, misDir.xy.y);
			missile.vel = misDir.Unit() * spd;
		}
	}
	
	void A_MonsterMelee(class<HurtBox> box, int dmg = -1, int bdmg = -1, double dur = 1, double range = 64, double minAng = 0, double maxAng = 0, double minPch = 0, double maxPch = 0, double minRol = 0, double maxRol = 0, double minForw = 0, double maxForw = 0)
	{
		if (!target)
			return;
		
		A_MonsterFaceTarget();
		
		let hb = HurtBox(Spawn(box, pos, ALLOW_REPLACE));
		if (hb)
		{
			hb.target = self;
			hb.duration = dur;
			hb.range = range;
			if (dmg >= 0)
				hb.SetDamage(dmg);
			if (bdmg >= 0)
				hb.bonusDamage = bdmg;
			
			hb.angleRange.Push(minAng);
			hb.angleRange.Push(maxAng);
			hb.pitchRange.Push(minPch);
			hb.pitchRange.Push(maxPch);
			hb.rollRange.Push(minRol);
			hb.rollRange.Push(maxRol);
			hb.forwardOffsets.Push(minForw);
			hb.forwardOffsets.Push(maxForw);
		}
	}
	
	void A_MonsterBlock()
	{
		if (shieldType)
		{
			shield = BlockBox(Spawn(shieldType, pos));
			if (shield)
				shield.master = self;
		}
		
		bBlocking = true;
	}
	
	void A_MonsterUnblock()
	{
		if (shield)
			shield.Destroy();
		
		bBlocking = false;
		blockCoolDown = random(minBlockCoolDown, maxBlockCoolDown);
	}
	
	void A_Stumble(double speed = 10)
	{
		if (lastHit)
			vel.xy = AngleToVector(lastHit.AngleTo(self), speed);
		else
			vel.xy = AngleToVector(-idealAngle, speed);
	}
	
	void CreateBox(class<CollisionBox> type)
	{
		let box = CollisionBox(Spawn(type, pos));
		if (box)
		{
			box.master = self;
			collisionBoxes.Push(box);
		}
	}
	
	virtual bool Block(Actor mo, double maxAng = 90, bool fromDamage = false)
	{
		if (!mo || !bBlocker || bDontBlock || bBlocking || blockCoolDown > 0 || health <= 0)
			return false;
		
		if (InStateSequence(CurState, SpawnState) || InStateSequence(CurState, FindState("Parry")))
			return false;
		
		if (AbsAngle(idealAngle, AngleTo(mo)) > maxAng)
			return false;
		
		if (!fromDamage && !CheckSight(mo))
			return false;
		
		State block = FindState("Block");
		if (block)
		{
			if (blockChance >= 1. || frandom(0,1) < blockChance)
			{
				SetState(block);
				bCancelled = true;
				return true;
			}
			else
				blockCoolDown = failBlockCoolDown;
		}
		
		return false;
	}
	
	virtual bool CheckMelee()
	{
		if (target && CheckMelee3D())
		{
			let tracer = SightTracer(new("SightTracer"));
			if (tracer)
			{
				tracer.bMelee = true;
				tracer.master = self;
				tracer.target = target;
				tracer.bThruObj = bAttackThruObj;
				tracer.bThruMonst = bAttackThruMonst;
				
				double h = height/2 + 8 - floorclip;
				Vector3 start = pos + (0,0,h);
				Vector3 dir = Vec3To(target) + (0,0,(target.height/2-target.floorclip) - h);
				
				tracer.Trace(start, CurSector, dir.Unit(), dir.Length(), 0);
				if (tracer.results.hitType == TRACE_HitNone || tracer.results.hitActor == target)
					return true;
			}
		}
		
		return false;
	}
	
	bool CheckMelee3D()
	{
		if (!target)
			return false;
		
		double dist = radius + MeleeRange + target.radius;
		if (Distance3DSquared(target) > dist*dist)
			return false;
		
		return true;
	}
	
	virtual bool CheckMissile()
	{
		if (target && missileCoolDown <= 0 && Distance3DSquared(target) <= random(0, MaxTargetRange*MaxTargetRange))
		{
			if (target.bShadow)
				return true;
			
			let tracer = SightTracer(new("SightTracer"));
			if (tracer)
			{
				tracer.bMissile = true;
				tracer.master = self;
				tracer.target = target;
				tracer.bThruObj = bAttackThruObj;
				tracer.bThruMonst = bAttackThruMonst;
				
				double h = missileCheckHeight ? missileCheckHeight : height/2 + 4;
				h -= floorclip;
				Vector3 start = pos + (0,0,h);
				Vector3 dir = Vec3To(target) + (0,0,(target.height/2-target.floorclip) - h);
				
				tracer.Trace(start, CurSector, dir.Unit(), dir.Length(), 0);
				if (tracer.results.hitType == TRACE_HitNone || tracer.results.hitActor == target)
					return true;
			}
		}
		
		return false;
	}
	
	virtual void InitializeAilments()
	{
		SetAilment(0, 'Burn');
		SetAilment(1, 'Shock');
		SetAilment(2, 'Chill');
		SetAilment(3, 'Poison');
		SetAilment(4, 'Stumble');
		SetAilment(5, 'Flinch');
		SetAilment(6, 'Bleed');
	}
	
	protected void SetAilment(uint index, class<Ailment> ailment)
	{
		ailments.Insert(index, ailment);
		GiveInventoryType(ailment);
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		Name mod = MeansOfDeath;
		if (MeansOfDeath == "Ice")
		{
			if (inflictor is "RPGMissile")
			{
				let missile = RPGMissile(inflictor);
				if (!missile.bFreezer)
				{
					DamageType = 'None';
					mod = 'None';
				}
			}
			else if (inflictor is "HurtBox")
			{
				let melee = HurtBox(inflictor);
				if (!melee.bFreezer)
				{
					DamageType = 'None';
					mod = 'None';
				}
			}
			else if (inflictor is "AreaOfEffect")
			{
				let aoe = AreaOfEffect(inflictor);
				if (!aoe.bFreezer)
				{
					DamageType = 'None';
					mod = 'None';
				}
			}
			else
			{
				DamageType = 'None';
				mod = 'None';
			}
		}
		
		super.Die(source, inflictor, dmgflags, mod);
	}
	
	override bool CanCollideWith(Actor toucher, bool passive)
	{
		if (master && master.player && toucher.IsFriend(self))
			return false;
		
		return super.CanCollideWith(toucher, passive);
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (isFrozen())
			return;
		
		if (missileCoolDown > 0)
			--missileCoolDown;
		if (blockCoolDown > 0)
			--blockCoolDown;
		
		if (bCancelled)
		{
			// Make sure to let it tick at least once so the melee attack will be fully cancelled
			if (!bCancelDelay)
				bCancelDelay = true;
			else
			{
				bCancelled = false;
				bCancelDelay = false;
			}
		}
		
		if (bBlocking && !InStateSequence(CurState, FindState("Block")))
			A_MonsterUnblock();
		
		if (health > 0)
		{
			Rotate();
		
			if (bJustAttacked)
			{
				if (tics > -1 && !FacingIdeal())
					++tics;
				else
					bJustAttacked = false;
			}
			
			SmoothWalk();
		}
		else
		{
			bInLeap = false;
			bJustAttacked = false;
			bJustCalled = false;
			chaseState = null;
			wanderState = null;
			rageTimer = 0;
			searchCoolDown = 0;
		}
	}
	
	void SmoothWalk()
	{
		if (bJustCalled)
		{
			bJustCalled = false;
			return;
		}
		
		if (!OnGround())
			return;
		
		if (chaseState)
		{
			if (CurState == chaseState)
			{
				int prevMove = moveCount;
				int prevReact = reactionTime;
				int prevFast = fastChaseStrafeCount;
				int prevStrafe = strafeCount;
				
				A_Chase(null, null, CHF_NODIRECTIONTURN|CHF_NORANDOMTURN|CHF_NOPLAYACTIVE);
				idealAngle = movedir * 45;
				
				moveCount = prevMove;
				reactionTime = prevReact;
				fastChaseStrafeCount = prevFast;
				strafeCount = prevStrafe;
			}
			else
				chaseState = null;
			
			return;
		}
		
		if (wanderState)
		{
			if (CurState == wanderState)
			{
				int prevMove = moveCount;
				int prevReact = reactionTime;
						
				A_Wander(CHF_NODIRECTIONTURN|CHF_NORANDOMTURN);
				idealAngle = movedir * 45;
						
				moveCount = prevMove;
				reactionTime = prevReact;
			}
			else
				wanderState = null;
		}
	}
	
	void Rotate()
	{
		double angDiff = DeltaAngle(angle, idealAngle);
		if (!angDiff)
			return;
		
		if (angDiff < 0)
			angle -= min(turnSpeed, -angDiff);
		else
			angle += min(turnSpeed, angDiff);
	}
	
	bool FacingIdeal(double maxAng = 75)
	{
		if (AbsAngle(angle, idealAngle) <= maxAng)
			return true;
		
		return false;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		// Special blast handling
		if (source)
		{
			if (source.bBlasted && inflictor == source && mod == source.damageType)
			{
				damage = source.damage;
				let rpg = RPGMonster(source);
				if (rpg)
					mod = rpg.blastDamageType;
				source.bBlasted = false;
				flags |= DMG_NOBLOCK;
			}
			else if (!bDoHarmSpecies && !source.bDoHarmSpecies && source is GetClass() && bFriendly == source.bFriendly)
				return -1;
		}
		else if (bBlasted && !inflictor && mod == 'Melee') // Damage type for hitting lines is hardcoded
		{
			damage = self.damage;
			mod = blastDamageType;
			bBlasted = false;
			flags |= DMG_NOBLOCK;
		}
			
		Vector3 prevVel = vel;
		
		// No infighting from blasting
		Actor oldTarg = target;
		int newdam = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		if (target is GetClass() && !bDoHarmSpecies && !target.bDoHarmSpecies)
			target = oldTarg;
		
		lastHit = source;
		
		if (health > 0)
		{
			if (newdam > 0)
			{
				if (!bFriendly && source && source.bIsMonster)
				{
					if (source == target)
					{
						rageTimer = 90;
						searchCoolDown = 0;
					}
					
					let mo = RPGMonster(source);
					if (source.target == self && mo)
					{
						mo.rageTimer = 90;
						mo.searchCoolDown = 0;
					}	
				}
				
				// Always wake up when taking damage
				if (target && InStateSequence(CurState, SpawnState))
				{
					A_StartSound(SeeSound, CHAN_VOICE, attenuation: bBoss ? ATTN_NONE : ATTN_NORM);   
					SetState(SeeState);
				}
				else if (!(flags & (DMG_NOBLOCK|DMG_EXPLOSION)) && source && IsHostile(source))
					Block(inflictor, 180, true);
			}
			
			if (bSkullFly)
				vel = prevVel;
		}
		
		return newdam;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		GiveInventoryType("ArmorPieceManager");
		GiveInventoryType("BuffManager");
		
		if (armorType & AR_SHIELD)
			GiveInventoryType("ShieldPiece");
		if (armorType & AR_CHEST)
			GiveInventoryType("ChestPiece");
		if (armorType & AR_HELM)
			GiveInventoryType("HelmetPiece");
		if (armorType & AR_BRACE)
			GiveInventoryType("BracerPiece");
		if (armorType & AR_AMUL)
			GiveInventoryType("AmuletPiece");
		
		InitializeAilments();
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		idealAngle = angle;
		
		// Stuck in a wall or something
		if (!TestMobjLocation())
			bStuck = true;
	}
}