class ColdSnap : HurtBox
{
	Default
	{
		Radius 8;
		Height 4;
		DamageType "Ice";
		HurtBox.AilmentPower 100;
		HurtBox.AilmentType "Chill";
		HurtBox.ForwardOffset 16;
		
		+HURTBOX.NOCRIT
		+HURTBOX.FREEZER
	}
}

class ReforgedFrost : RPGWeapon replaces MWeapFrost
{
	Default
	{
		RPGWeapon.BashCost 2;
		Weapon.SelectionOrder 1700;
		Weapon.KickBack 150;
		Weapon.YAdjust 20;
		Weapon.AmmoUse1 4;
		Weapon.AmmoUse2 4;
		Weapon.AmmoType1 "BlueMana";
		Weapon.AmmoType2 "RedMana";
		Inventory.PickupMessage "$TXT_WEAPON_M2";
		Obituary "$OB_MPMWEAPFROST";
		Tag "$TAG_MWEAPFROST";
	}

	States
	{
		Spawn:
			WMCS ABC 8 Bright;
			Loop;
			
		Select:
			CONE A 1 A_Raise;
			Loop;
			
		Deselect:
			CONE A 1 A_Lower;
			Loop;
			
		Ready:
			CONE A 1 A_BashWeaponReady();
			Loop;
			
		User1:
			CONE B 3;
			CONE C 4;
			CONE D 3;
			CONE E 5;
			TNT1 A 0 A_PlaySound ("MageShardsFire", CHAN_WEAPON);
			CONE F 3 A_Melee("ColdSnap", 100, 0, 1, 32);
			CONE G 3;
			CONE A 9;
			Goto Ready;
			
		Fire:
			CONE B 3;
			CONE C 4;
			CONE D 3;
			CONE E 5;
			TNT1 A 0 A_PlaySound ("MageShardsFire", CHAN_WEAPON);
			CONE F 3 A_FireProjectile("FrostShatter");
			CONE G 3;
			CONE A 5;
			CONE A 5 A_ReFire;
			Goto Ready;
			
		AltFire:
			CONE B 3;
			CONE C 4;
			CONE D 3;
			CONE E 5;
			TNT1 A 0 A_PlaySound ("MageShardsFire", CHAN_WEAPON);
			CONE F 3 A_FireProjectile("FrostCreeper");
			CONE G 3;
			CONE A 5;
			CONE A 5 A_ReFire;
			Goto Ready;
	}
}

class FrostShatter : RPGMissile
{
	Default
	{
		RPGMissile.AilmentPower 35;
		RPGMissile.AilmentType "Chill";
		Speed 64;
		Radius 3;
		Height 6;
		Damage 100;
		DamageType "Ice";
		Obituary "$OB_MPMWEAPFROST";
		DeathSound "MageShardsExplode";
	}

	States
	{
		Spawn:
			SHRD ABC 2 Bright;
			TNT1 A 0
			{
				if (bMissile)
				{
					pitch = -VectorAngle(vel.xy.Length(), vel.z);
					A_ScatterShot();
				}
			}
			Stop;
			
		Death:
			SHEX ABCDE 5 Bright;
			Stop;
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		pitch = -VectorAngle(vel.xy.Length(), vel.z);
		int hit = super.SpecialMissileHit(victim);
		
		if (hit == -1 && (victim.bIsMonster || victim.player))
			A_ScatterShot(true);
		
		return hit;
	}
	
	void A_ScatterShot(bool copyHit = false)
	{
		for (int i = 0; i < 10; ++i)
		{
			let frost = Spawn("FrostShard", pos, ALLOW_REPLACE);
			if (frost)
			{
				frost.target = target;
				frost.angle = angle+frandom(-3,3);
				frost.Vel3DFromAngle(frost.speed, frost.angle, pitch+frandom(-3,3));
				if (copyHit)
				{
					let rpg = RPGMissile(frost);
					if (rpg)
						rpg.alreadyHit.Copy(alreadyHit);
				}
			}
		}
	}
}

class FrostShard : RPGMissile
{
	Default
	{
		RPGMissile.AilmentPower 7;
		RPGMissile.AilmentType "Chill";
		Speed 64;
		Radius 2;
		Height 4;
		Scale 0.5;
		Damage 10;
		DamageType "Ice";
		DeathSound "MageShardsExplode";
		Obituary "$OB_MPMWEAPFROST";
	}

	States
	{
		Spawn:
			SHRD A 2 Bright;
			SHRD A 3 Bright;
			SHRD B 3 Bright;
			SHRD C 3 Bright;
			Loop;
			
		Death:
			SHEX ABCDE 5 Bright;
			Stop;
	}
}

class FrostCreeper : Actor
{
	Array<Actor> alreadyHit;
	
	Default
	{
		Radius 32;
		Height 32;
		Damage 70;
		DamageType "Ice";
		
		+NOINTERACTION
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (threshold++ >= 10)
		{
			Destroy();
			return;
		}
		
		double ang = angle+45;
		for (int i = 0; i < threshold; ++i)
		{
			Vector2 ofs = Vec2Offset((radius-32)*cos(ang), (radius-32)*sin(ang));
			let pillar = Spawn("FrostPillar", (ofs, floorz));
			if (threshold-1 > 0)
				ang -= 90./(threshold-1);
			
			if (pillar && i == threshold/2 && threshold % 2)
				pillar.A_StartSound("MageShardsExplode", CHAN_BODY);
		}
		
		BlockThingsIterator it = BlockThingsIterator.Create(self);
		Actor mo;
				
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || (!mo.bIceCorpse && mo.health <= 0) || !(mo.bIsMonster || mo.player) || target.IsFriend(mo) || mo.pos.z > floorz+height ||
				alreadyHit.Find(mo) != alreadyHit.Size() || AbsAngle(angle, AngleTo(mo)) > 45 ||
				Distance2DSquared(mo) > (radius+mo.radius)**2 || !CheckSight(mo))
			{
				continue;
			}
			
			if (mo.bIceCorpse)
				mo.DamageMobj(self, target, 1, 'None');
			else
			{
				let ail = Ailment(mo.FindInventory("Chill"));
				if (ail)
					ail.AddAilment(target, 50);
				mo.DamageMobj(self, target, damage, damagetype, DMG_NOBLOCK);
				alreadyHit.Push(mo);
			}
		}
		
		A_SetSize(radius+32);
	}
}

class FrostPillar : Actor
{
	bool bReverse;
	
	Default
	{
		RenderStyle "Translucent";
		Alpha 0.5;
		
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			TSPK A 2
			{
				if (floorclip < 96)
					bReverse = true;
				
				if (bReverse)
				{
					floorclip += 12;
					if (floorclip > 128)
						Destroy();
				}
				else
					floorclip -= 12;
			}
			Loop;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		floorclip = 128;
		A_SetTranslation('Ice');
	}
}