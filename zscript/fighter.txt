class ReforgedFighter : RPGPlayer
{
	Array<Actor> alreadyHit;
	
	Default
	{
		Radius 16;
		Height 64;
		PainSound "PlayerFighterPain";
		Player.JumpZ 9;
		Player.Viewheight 48;
		Player.SpawnClass "Fighter";
		Player.DisplayName "Fighter";
		Player.SoundClass "fighter";
		Player.ScoreIcon "FITEFACE";
		Player.StartItem "ReforgedFist";
		Player.StartItem "ChestPiece";
		Player.StartItem "BlueMana", 100;
		Player.StartItem "GreenMana", 100;
		Player.StartItem "RedMana", 0;
		Player.Portrait "P_FWALK1";
		Player.WeaponSlot 1, "ReforgedFist";
		Player.WeaponSlot 2, "ReforgedAxe";
		Player.WeaponSlot 3, "ReforgedHammer";
		Player.WeaponSlot 4, "ReforgedQuietus";
		Damage 20;
		
		Player.ColorRange 246, 254;
		Player.Colorset		0, "$TXT_COLOR_GOLD",		246, 254,    253;
		Player.ColorsetFile 1, "$TXT_COLOR_RED",		"TRANTBL0",  0xAC;
		Player.ColorsetFile 2, "$TXT_COLOR_BLUE",		"TRANTBL1",  0x9D;
		Player.ColorsetFile 3, "$TXT_COLOR_DULLGREEN",	"TRANTBL2",  0x3E;
		Player.ColorsetFile 4, "$TXT_COLOR_GREEN",		"TRANTBL3",  0xC8;
		Player.ColorsetFile 5, "$TXT_COLOR_GRAY",		"TRANTBL4",  0x2D;
		Player.ColorsetFile 6, "$TXT_COLOR_BROWN",		"TRANTBL5",  0x6F;
		Player.ColorsetFile 7, "$TXT_COLOR_PURPLE",		"TRANTBL6",  0xEE;
		
		+NOSKIN
	}
	
	States
	{
		Spawn:
			PLAY A -1;
			Stop;
			
		See:
			PLAY ABCD 4;
			Loop;
			
		Missile:
		Melee:
			PLAY EF 8;
			Goto Spawn;
			
		Pain:
			PLAY G 4;
			PLAY G 4 A_Pain;
			Goto Spawn;
			
		Death:
			PLAY H 6;
			PLAY I 6 A_PlayerScream;
			PLAY JK 6;
			PLAY L 6 A_NoBlocking;
			PLAY M 6;
			PLAY N -1;
			Stop;	
			
		XDeath:
			PLAY O 5 A_PlayerScream;
			PLAY P 5 A_SkullPop("BloodyFighterSkull");
			PLAY R 5 A_NoBlocking;
			PLAY STUV 5;
			PLAY W -1;
			Stop;
			
		Ice:
			PLAY X 5 A_FreezeDeath;
			PLAY X 1 A_FreezeDeathChunks;
			Wait;
			
		Burn:
			FDTH A 5 BRIGHT A_PlaySound("*burndeath");
			FDTH B 4 BRIGHT;
			FDTH G 5 BRIGHT;
			FDTH H 4 BRIGHT A_PlayerScream;
			FDTH I 5 BRIGHT;
			FDTH J 4 BRIGHT;
			FDTH K 5 BRIGHT;
			FDTH L 4 BRIGHT;
			FDTH M 5 BRIGHT;
			FDTH N 4 BRIGHT;
			FDTH O 5 BRIGHT;
			FDTH P 4 BRIGHT;
			FDTH Q 5 BRIGHT;
			FDTH R 4 BRIGHT;
			FDTH S 5 BRIGHT A_NoBlocking;
			FDTH T 4 BRIGHT;
			FDTH U 5 BRIGHT;
			FDTH V 4 BRIGHT;
			ACLO E 35 A_CheckPlayerDone;
			Wait;
			ACLO E 8;
			Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (!player || !player.mo || player.mo != self)
			return;
		
		if (!bSkullFly)
		{
			for (uint i = 0; i < alreadyHit.Size(); ++i)
			{
				if (!CheckIntersection(alreadyHit[i]))
					alreadyHit.Delete(i--);
			}
		}
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (alreadyHit.Find(other) != alreadyHit.Size())
			return false;
		
		return super.CanCollideWith(other, passive);
	}
	
	bool CheckIntersection(Actor targ)
	{
		if (!targ)
			return false;
		
		Vector3 orgMin = (pos.x - radius, pos.y - radius, pos.z);
		Vector3 orgMax = (pos.x + radius, pos.y + radius, pos.z + height);
		
		Vector3 targMin = (targ.pos.x - targ.radius, targ.pos.y - targ.radius, targ.pos.z);
		Vector3 targMax = (targ.pos.x + targ.radius, targ.pos.y + targ.radius, targ.pos.z + targ.height);
		
		return (orgMin.x <= targMax.x && orgMax.x >= targMin.x) &&
			   (orgMin.y <= targMax.y && orgMax.y >= targMin.y) &&
			   (orgMin.z <= targMax.z && orgMax.z >= targMin.z);
	}
	
	override void InitializeSkills()
	{
		AddSkill("BloodLust");
		AddSkill("LightningAxe");
		AddSkill("Charge");
		
		SetActiveSkill(0, "BloodLust");
		SetActiveSkill(1, "LightningAxe");
		SetActiveSkill(2, "Charge");
	}
	
	override void InitializeStats()
	{
		super.InitializeStats();
		
		for (uint i = 0; i < stats.Size(); ++i)
		{
			if (!stats[i])
				continue;
			
			let cls = stats[i].GetClass();
			if (cls == "Strength" || cls == "Vitality")
				stats[i].LevelUp(2, true);
		}
	}
	
	override bool Slam(Actor victim)
	{
		if (!victim || !victim.bSolid || victim.bFriendly || alreadyHit.Find(victim) != alreadyHit.Size())
			return true;
		
		if (!victim.bShootable)
		{
			vel = (0,0,0);
			return false;
		}
		
		victim.DamageMobj(self, self, 20, 'Blunt');
		let stum = Ailment(victim.FindInventory("Stumble"));
		if (stum)
			stum.AddAilment(self, 100);
		
		alreadyHit.Push(victim);
		
		return true;
	}
}

class BloodLust : Skill
{
	Default
	{
		Skill.BuffType "BloodlustBuff";
		Inventory.Icon "PTN1A0";
	}
	
	override void OnEquip()
	{
		GiveBuff(owner);
	}
	
	override void OnUnequip()
	{
		TakeBuff();
	}
}

class BloodlustBuff : Buff
{
	Default
	{
		Buff.Range 512;
		Inventory.Icon "PTN1A0";
		
		+BUFF.INFINITE
	}
	
	override void ThingDied(Actor thing, Actor inflictor)
	{
		if (!thing)
			return;
		
		if ((thing.bIsMonster || thing.player) &&
			!owner.IsFriend(thing) &&
			owner.Distance3DSquared(thing) <= range*range)
		{
			owner.GiveBody(owner.player.mo.maxHealth*0.04);
		}
	}
}

class LightningAxe : Skill
{
	Default
	{
		Skill.Cost 5;
		Skill.CastTime 28;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.ActiveWeapon "ReforgedAxe";
		Skill.WeaponName "Timon's Axe";
		Skill.Cast "AxeThrow";
		Inventory.Icon "MWNDF0";
	}
	
	override void UseSkill()
	{
		let rpg = RPGPlayer(owner.player.mo);
		if (rpg)
			castTimer *= rpg.attackModifier;
	}
}

class AxeThrow : CastWeapon
{
	Default
	{
		Weapon.AmmoType1 "BlueMana";
		Weapon.AmmoType2 "RedMana";
		Weapon.YAdjust -12;
	}
	
	States
	{
		Select:
		Deselect:
		Fire:
		Ready:
			FAXE N 4 Offset (15, 32);
			FAXE O 3 Offset (15, 32);
			FAXE P 2 Offset (15, 32);
			TNT1 A 0 A_PlaySound("FighterHammerMiss", CHAN_WEAPON);
			FAXE P 1 Offset (-5, 70) A_NewProjectile("RMageWandMissile");
			FAXE P 2 Offset (-25, 90);
			FAXE Q 1 Offset (15, 32);
			FAXE Q 2 Offset (10, 54);
			FAXE Q 7 Offset (10, 150);
			FAXE A 1 Offset (0, 60);
			FAXE A 1 Offset (0, 52);
			FAXE A 1 Offset (0, 44);
			FAXE A 1 Offset (0, 36);
			Stop;
	}
}

class Charge : Skill
{
	Vector2 launchVel;
	int chargeTimer;
	
	Default
	{
		Skill.CastTime 2;
		Skill.CoolDown 175;
		Inventory.Icon "SUMNA0";
	}
	
	override void UseSkill()
	{
		// Something in the map is probably happening
		if (owner.player.cheats & (CF_TOTALLYFROZEN|CF_FROZEN))
			return;
		
		owner.bSkullfly = true;
		chargeTimer = 35;
		owner.player.mo.VelFromAngle(17*owner.speed, owner.angle);
		launchVel = owner.vel.xy;
		owner.player.cheats |= CF_TOTALLYFROZEN;
		owner.A_StartSound("minotaur/sight", CHAN_VOICE);
		owner.player.vel = (0,0);
	}
	
	override void Effect()
	{
		if (!bActive)
			return;
		
		if (chargeTimer > 0)
			--chargeTimer;
		
		if (launchVel == owner.vel.xy && chargeTimer > 0)
		{
			if (owner.pitch != 15)
			{
				if (owner.pitch > 0)
					owner.A_SetPitch(owner.pitch - min(10, owner.pitch-15), SPF_INTERPOLATE);
				else
					owner.A_SetPitch(owner.pitch - max(-10, owner.pitch-15), SPF_INTERPOLATE);
			}
			
			castTimer = default.castTime;
		}
		else if (owner.player.cheats & CF_TOTALLYFROZEN)
		{
			owner.player.cheats &= ~CF_TOTALLYFROZEN;
			owner.bSkullfly = false;
			chargeTimer = 0;
			owner.vel = (0,0,0);
			owner.A_SetPitch(0, SPF_INTERPOLATE);
		}
	}
}