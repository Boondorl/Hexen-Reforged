class ReforgedFighter : RPGPlayer
{
	Default
	{
		Radius 16;
		Height 64;
		PainSound "PlayerFighterPain";
		Player.JumpZ 9;
		Player.Viewheight 48;
		Player.SpawnClass "Fighter";
		Player.DisplayName "Fighter";
		Player.SoundClass "fighter";
		Player.ScoreIcon "FITEFACE";
		Player.StartItem "ReforgedFist";
		Player.StartItem "ChestPiece";
		Player.StartItem "BlueMana", 50;
		Player.StartItem "GreenMana", 50;
		Player.StartItem "RedMana", 0;
		Player.Portrait "P_FWALK1";
		Player.WeaponSlot 1, "ReforgedFist";
		Player.WeaponSlot 2, "ReforgedAxe";
		Player.WeaponSlot 3, "FWeapHammer";
		Player.WeaponSlot 4, "ReforgedQuietus";
		
		Player.ColorRange 246, 254;
		Player.Colorset		0, "$TXT_COLOR_GOLD",		246, 254,    253;
		Player.ColorsetFile 1, "$TXT_COLOR_RED",		"TRANTBL0",  0xAC;
		Player.ColorsetFile 2, "$TXT_COLOR_BLUE",		"TRANTBL1",  0x9D;
		Player.ColorsetFile 3, "$TXT_COLOR_DULLGREEN",	"TRANTBL2",  0x3E;
		Player.ColorsetFile 4, "$TXT_COLOR_GREEN",		"TRANTBL3",  0xC8;
		Player.ColorsetFile 5, "$TXT_COLOR_GRAY",		"TRANTBL4",  0x2D;
		Player.ColorsetFile 6, "$TXT_COLOR_BROWN",		"TRANTBL5",  0x6F;
		Player.ColorsetFile 7, "$TXT_COLOR_PURPLE",		"TRANTBL6",  0xEE;
		
		+NOSKIN
	}
	
	States
	{
		Spawn:
			PLAY A -1;
			Stop;
			
		See:
			PLAY ABCD 4;
			Loop;
			
		Missile:
		Melee:
			PLAY EF 8;
			Goto Spawn;
			
		Pain:
			PLAY G 4;
			PLAY G 4 A_Pain;
			Goto Spawn;
			
		Death:
			PLAY H 6;
			PLAY I 6 A_PlayerScream;
			PLAY JK 6;
			PLAY L 6 A_NoBlocking;
			PLAY M 6;
			PLAY N -1;
			Stop;	
			
		XDeath:
			PLAY O 5 A_PlayerScream;
			PLAY P 5 A_SkullPop("BloodyFighterSkull");
			PLAY R 5 A_NoBlocking;
			PLAY STUV 5;
			PLAY W -1;
			Stop;
			
		Ice:
			PLAY X 5 A_FreezeDeath;
			PLAY X 1 A_FreezeDeathChunks;
			Wait;
			
		Burn:
			FDTH A 5 BRIGHT A_PlaySound("*burndeath");
			FDTH B 4 BRIGHT;
			FDTH G 5 BRIGHT;
			FDTH H 4 BRIGHT A_PlayerScream;
			FDTH I 5 BRIGHT;
			FDTH J 4 BRIGHT;
			FDTH K 5 BRIGHT;
			FDTH L 4 BRIGHT;
			FDTH M 5 BRIGHT;
			FDTH N 4 BRIGHT;
			FDTH O 5 BRIGHT;
			FDTH P 4 BRIGHT;
			FDTH Q 5 BRIGHT;
			FDTH R 4 BRIGHT;
			FDTH S 5 BRIGHT A_NoBlocking;
			FDTH T 4 BRIGHT;
			FDTH U 5 BRIGHT;
			FDTH V 4 BRIGHT;
			ACLO E 35 A_CheckPlayerDone;
			Wait;
			ACLO E 8;
			Stop;
	}
	
	override void InitializeSkills()
	{
		SetSkill(0, "BloodLust", true);
		SetSkill(1, "LightningAxe", true);
		SetSkill(2, "Charge", true);
		
		SetActiveSkill(0, "BloodLust");
		SetActiveSkill(1, "LightningAxe");
		SetActiveSkill(2, "Charge");
	}
	
	override void InitializeStats()
	{
		super.InitializeStats();
		
		let str = Stat(FindInventory("Strength"));
		if (str)
			str.LevelUp(2, true);
		
		let vit = Stat(FindInventory("Vitality"));
		if (vit)
			vit.LevelUp(2, true);
	}
	
	override bool Slam(Actor victim)
	{
		//victim.vel += (10, 10, 0);
		return true;
	}
	
	override void MovePlayer()
	{
		if (bSkullFly)
		{
			player.cmd.forwardmove = 0;
			player.cmd.sidemove = 0;
		}
		
		super.MovePlayer();
	}
}

class BloodLust : Skill
{
	Default
	{
		Skill.BuffType "BLBuff";
	}
	
	override void OnEquip()
	{
		GiveBuff(owner);
	}
	
	override void OnUnequip()
	{
		TakeBuff();
	}
}

class BLBuff : Buff
{
	Default
	{
		Buff.Range 512;
		
		+BUFF.INFINITE
	}
	
	override void ThingDied(Actor thing, Actor inflictor)
	{
		if (!thing)
			return;
		
		if ((thing.bIsMonster || thing.player) &&
			!owner.IsFriend(thing) &&
			owner.Distance3DSquared(thing) <= range**2)
		{
			owner.GiveBody(3);
		}
	}
}

class LightningAxe : Skill
{
	Default
	{
		Skill.Cost 2;
		Skill.Type "BlueMana";
		Skill.ActiveWeapon "ReforgedAxe";
		Skill.WeaponName "Timon's Axe";
		Skill.CastTime 35;
	}
	
	override void UseSkill()
	{
		FireMissile("RMageWandMissile");
		SetWeaponState("Fire");
	}
}

class Charge : Skill
{
	Vector3 prevVel;
	int chargeTimer;
	
	Default
	{
		Skill.CastTime 5;
		//Skill.CoolDown 175;
	}
	
	override void UseSkill()
	{
		if (owner.bSkullfly)
			return;
		
		owner.bSkullfly = true;
		chargeTimer = 35;
		owner.vel = (AngleToVector(owner.angle, 20), 0);
		prevVel = owner.vel;
	}
	
	override void Effect()
	{
		if (!bActive)
			return;
		
		if (chargeTimer > 0)
			--chargeTimer;
		
		if (chargeTimer > 0 && owner.vel == prevVel)
			castTimer = castTime;
		else if (owner.bSkullfly)
		{
			owner.bSkullfly = false;
			chargeTimer = 0;
			owner.vel = (0,0,0);
		}
		
		prevVel = owner.vel;
	}
}