class ReforgedFighter : RPGPlayer
{
	Array<Actor> alreadyHit;
	
	Default
	{
		Radius 16;
		Height 64;
		PainSound "PlayerFighterPain";
		Player.JumpZ 9;
		Player.Viewheight 48;
		Player.SpawnClass "Fighter";
		Player.DisplayName "Fighter";
		Player.SoundClass "fighter";
		Player.ScoreIcon "FITEFACE";
		Player.StartItem "ReforgedFist";
		Player.StartItem "ChestPiece";
		Player.StartItem "BlueMana", 100;
		Player.StartItem "GreenMana", 100;
		Player.StartItem "RedMana", 0;
		Player.Portrait "P_FWALK1";
		Player.WeaponSlot 1, "ReforgedFist";
		Player.WeaponSlot 2, "ReforgedAxe";
		Player.WeaponSlot 3, "ReforgedHammer";
		Player.WeaponSlot 4, "ReforgedQuietus";
		Damage 20;
		
		Player.ColorRange 246, 254;
		Player.Colorset		0, "$TXT_COLOR_GOLD",		246, 254,    253;
		Player.ColorsetFile 1, "$TXT_COLOR_RED",		"TRANTBL0",  0xAC;
		Player.ColorsetFile 2, "$TXT_COLOR_BLUE",		"TRANTBL1",  0x9D;
		Player.ColorsetFile 3, "$TXT_COLOR_DULLGREEN",	"TRANTBL2",  0x3E;
		Player.ColorsetFile 4, "$TXT_COLOR_GREEN",		"TRANTBL3",  0xC8;
		Player.ColorsetFile 5, "$TXT_COLOR_GRAY",		"TRANTBL4",  0x2D;
		Player.ColorsetFile 6, "$TXT_COLOR_BROWN",		"TRANTBL5",  0x6F;
		Player.ColorsetFile 7, "$TXT_COLOR_PURPLE",		"TRANTBL6",  0xEE;
		
		+NOSKIN
	}
	
	States
	{
		Spawn:
			PLAY A -1;
			Stop;
			
		See:
			PLAY ABCD 4;
			Loop;
			
		Missile:
		Melee:
			PLAY EF 8;
			Goto Spawn;
			
		Pain:
			PLAY G 4;
			PLAY G 4 A_Pain;
			Goto Spawn;
			
		Death:
			PLAY H 6;
			PLAY I 6 A_PlayerScream;
			PLAY JK 6;
			PLAY L 6 A_NoBlocking;
			PLAY M 6;
			PLAY N -1;
			Stop;	
			
		XDeath:
			PLAY O 5 A_PlayerScream;
			PLAY P 5 A_SkullPop("BloodyFighterSkull");
			PLAY R 5 A_NoBlocking;
			PLAY STUV 5;
			PLAY W -1;
			Stop;
			
		Ice:
			PLAY X 5 A_FreezeDeath;
			PLAY X 1 A_FreezeDeathChunks;
			Wait;
			
		Burn:
			FDTH A 5 BRIGHT A_PlaySound("*burndeath");
			FDTH B 4 BRIGHT;
			FDTH G 5 BRIGHT;
			FDTH H 4 BRIGHT A_PlayerScream;
			FDTH I 5 BRIGHT;
			FDTH J 4 BRIGHT;
			FDTH K 5 BRIGHT;
			FDTH L 4 BRIGHT;
			FDTH M 5 BRIGHT;
			FDTH N 4 BRIGHT;
			FDTH O 5 BRIGHT;
			FDTH P 4 BRIGHT;
			FDTH Q 5 BRIGHT;
			FDTH R 4 BRIGHT;
			FDTH S 5 BRIGHT A_NoBlocking;
			FDTH T 4 BRIGHT;
			FDTH U 5 BRIGHT;
			FDTH V 4 BRIGHT;
			ACLO E 35 A_CheckPlayerDone;
			Wait;
			ACLO E 8;
			Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (!player || !player.mo || player.mo != self)
			return;
		
		if (!bSkullFly)
		{
			for (uint i = 0; i < alreadyHit.Size(); ++i)
			{
				if (!CheckIntersection(alreadyHit[i]))
					alreadyHit.Delete(i--);
			}
		}
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (alreadyHit.Find(other) != alreadyHit.Size())
			return false;
		
		return super.CanCollideWith(other, passive);
	}
	
	bool CheckIntersection(Actor targ)
	{
		if (!targ)
			return false;
		
		Vector3 orgMin = (pos.x - radius, pos.y - radius, pos.z);
		Vector3 orgMax = (pos.x + radius, pos.y + radius, pos.z + height);
		
		Vector3 targMin = (targ.pos.x - targ.radius, targ.pos.y - targ.radius, targ.pos.z);
		Vector3 targMax = (targ.pos.x + targ.radius, targ.pos.y + targ.radius, targ.pos.z + targ.height);
		
		return (orgMin.x <= targMax.x && orgMax.x >= targMin.x) &&
			   (orgMin.y <= targMax.y && orgMax.y >= targMin.y) &&
			   (orgMin.z <= targMax.z && orgMax.z >= targMin.z);
	}
	
	override void InitializeSkills()
	{
		GiveInventoryType("BloodLust");
		GiveInventoryType("Fury");
		
		SetActiveSkill(0, "BloodLust");
		SetActiveSkill(1, "Fury");
	}
	
	override void LevelUp(bool cheat)
	{
		super.LevelUp(cheat);
		
		switch (currentLevel)
		{
			case 2:
				GiveInventoryType("IronSkin");
				break;
				
			case 3:
				GiveInventoryType("Charge");
				break;
				
			case 5:
				GiveInventoryType("TimonsVengeance");
				GiveInventoryType("BloodRage");
				break;
				
			case 8:
				GiveInventoryType("BloodOath");
				GiveInventoryType("EarthquakeSkill");
				break;
				
			case 11:
				GiveInventoryType("Slam");
				break;
		}
	}
	
	override void InitializeStats()
	{
		super.InitializeStats();
		
		for (let probe = inv; probe; probe = probe.inv)
		{
			let st = Stat(probe);
			if (!st)
				continue;
				
			let cls = st.GetClass();
			if (cls == "Strength" || cls == "Vitality")
				st.LevelUp(2, true);
		}
	}
	
	override bool Slam(Actor victim)
	{
		if (!victim || !victim.bSolid || victim.bFriendly || alreadyHit.Find(victim) != alreadyHit.Size())
			return true;
		
		if (!victim.bShootable)
		{
			vel = (0,0,0);
			return false;
		}
		
		victim.DamageMobj(self, self, 20, 'Blunt');
		let stum = Ailment(victim.FindInventory("Stumble"));
		if (stum)
			stum.AddAilment(self, 100);
		
		alreadyHit.Push(victim);
		
		return true;
	}
}

class BloodLust : Skill
{
	Default
	{
		Tag "$TAG_BLOODLUST";
		Skill.Description "$DESC_BLOODLUST";
		Skill.BuffType "BloodlustBuff";
		Inventory.Icon "PTN1A0";
	}
	
	override void OnEquip()
	{
		GiveBuff(owner);
	}
	
	override void OnUnequip()
	{
		TakeBuff();
	}
}

class BloodlustBuff : Buff
{
	Default
	{
		Buff.Range 512;
		Inventory.Icon "PTN1A0";
		
		+BUFF.INFINITE
	}
	
	override void ThingDied(Actor thing, Actor inflictor)
	{
		if (!thing)
			return;
		
		if ((thing.bIsMonster || thing.player) &&
			!owner.IsFriend(thing) && thing.target && owner.IsFriend(thing.target) &&
			owner.Distance3DSquared(thing) <= range*range)
		{
			owner.GiveBody(owner.player.mo.maxHealth*0.04);
		}
	}
}

class Fury : Skill
{
	Default
	{
		Tag "$TAG_FURY";
		Skill.Description "$DESC_FURY";
		Skill.CastTime 27;
		Skill.CoolDown 350;
		Skill.Cast "FuryPunch";
		Inventory.Icon "PTN1A0";
	}
}

class FuryBox : HurtBox
{
	Default
	{
		Radius 3;
		Height 6;
		AttackSound "FighterPunchHitThing";
		ActiveSound "FighterPunchHitWall";
		DamageType "Blunt";
		HurtBox.AilmentPower 100;
		HurtBox.AilmentType "Flinch";
		HurtBox.BonusDamageType "Pierce";
		HurtBox.SideOffset 8;
		HurtBox.UpOffset 4;
		
		+HURTBOX.NOREVERSE
		+HURTBOX.DIEONHIT
	}
	
	override int DoSpecialDamage(Actor victim, int damage, name damagetype)
	{
		if (victim.bIsMonster || victim.player)
		{
			victim.Vel3DFromAngle(20, target.angle, target.pitch);
			victim.bBlasted = true;
		}
		
		return super.DoSpecialDamage(victim, damage, damagetype);
	}
}

class FuryPunch : CastWeapon
{
	States
	{
		Select:
		Deselect:
		Ready:
		Fire:
			TNT1 A 10;
			TNT1 A 0 A_PlaySound("FighterPunchMiss", CHAN_WEAPON);
			FPCH B 4 Offset (5, 40);
			FPCH C 3 Offset (5, 40) A_Melee("FuryBox", 50, 10, 4, 64, -10, -20, minForw: -32);
			FPCH D 3 Offset (5, 40);
			FPCH C 3 Offset (5, 40);
			FPCH B 4 Offset (5, 40) A_ReFire;
			Stop;
	}
}

class IronSkin : Skill
{
	Default
	{
		Tag "$TAG_IRON";
		Skill.Description "$DESC_IRON";
		Skill.BuffType "IronSkinBuff";
		Skill.CastTime 350;
		Skill.CoolDown 700;
		Inventory.Icon "PTN1A0";
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
}

class IronSkinBuff : Buff
{
	Default
	{
		Buff.Duration 350;
		DamageFactor "None", 0.5;
		Inventory.Icon "PTN1A0";
		
		+BUFF.DEFENSIVE
	}
	
	override void Effect()
	{
		if (!owner.bReflective)
			owner.bReflective = true;
	}
	
	override void OnDamage(Actor inflictor, Actor source, int dmg)
	{
		if (inflictor is "HurtBox" || inflictor == source)
		{
			let rpg = RPGMonster(source);
			if (rpg)
			{
				rpg.bCancelled = true;
								
				State parry = source.FindState("Parry");
				if (parry)
					source.SetState(parry);
			}
		}
	}
	
	override void OnDestroy()
	{
		if (owner)
			owner.bReflective = owner.default.bReflective;
		
		super.OnDestroy();
	}
}

class TimonsVengeance : Skill
{
	Default
	{
		Tag "$TAG_TIMONVENG";
		Skill.Description "$DESC_TIMONVENG";
		Skill.Cost 5;
		Skill.CastTime 28;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.Cast "AxeThrow";
		Inventory.Icon "MWNDF0";
	}
}

class AxeThrow : CastWeapon
{
	Default
	{
		Weapon.AmmoType1 "BlueMana";
		Weapon.AmmoType2 "RedMana";
		Weapon.YAdjust -12;
	}
	
	States
	{
		Select:
		Deselect:
		Fire:
		Ready:
			FAXE N 4 Offset (15, 32);
			FAXE O 3 Offset (15, 32);
			FAXE P 2 Offset (15, 32);
			TNT1 A 0 A_PlaySound("FighterHammerMiss", CHAN_WEAPON);
			FAXE P 1 Offset (-5, 70) A_NewProjectile("RMageWandMissile");
			FAXE P 2 Offset (-25, 90);
			FAXE Q 1 Offset (15, 32);
			FAXE Q 2 Offset (10, 54);
			FAXE Q 7 Offset (10, 150);
			FAXE A 1 Offset (0, 60);
			FAXE A 1 Offset (0, 52);
			FAXE A 1 Offset (0, 44);
			FAXE A 1 Offset (0, 36);
			Stop;
	}
}

class Charge : Skill
{
	Vector2 launchVel;
	int chargeTimer;
	
	Default
	{
		Tag "$TAG_CHARGE";
		Skill.Description "$DESC_CHARGE";
		Skill.CastTime 2;
		Skill.CoolDown 350;
		Inventory.Icon "SUMNA0";
	}
	
	override void UseSkill()
	{
		// Something in the map is probably happening
		if (owner.player.cheats & (CF_TOTALLYFROZEN|CF_FROZEN))
			return;
		
		owner.bSkullfly = true;
		chargeTimer = TICRATE;
		owner.player.mo.VelFromAngle(17*owner.speed, owner.angle);
		launchVel = owner.vel.xy;
		owner.player.cheats |= CF_TOTALLYFROZEN;
		owner.A_StartSound("minotaur/sight", CHAN_VOICE);
		owner.player.vel = (0,0);
	}
	
	override void Effect()
	{
		if (!bActive)
			return;
		
		if (chargeTimer > 0)
			--chargeTimer;
		
		if (launchVel == owner.vel.xy && chargeTimer > 0)
		{
			if (owner.pitch != 15)
			{
				if (owner.pitch > 0)
					owner.A_SetPitch(owner.pitch - min(10, owner.pitch-15), SPF_INTERPOLATE);
				else
					owner.A_SetPitch(owner.pitch - max(-10, owner.pitch-15), SPF_INTERPOLATE);
			}
			
			castTimer = default.castTime;
		}
		else if (owner.player.cheats & CF_TOTALLYFROZEN)
		{
			owner.player.cheats &= ~CF_TOTALLYFROZEN;
			owner.bSkullfly = false;
			chargeTimer = 0;
			owner.vel = (0,0,0);
			owner.A_SetPitch(0, SPF_INTERPOLATE);
		}
	}
}

class BloodRage : Skill
{
	Default
	{
		Tag "$TAG_BLOODRAGE";
		Skill.Description "$DESC_BLOODRAGE";
		Skill.BuffType "BloodRageBuff";
		Skill.Cost 10;
		Skill.Type "Health";
		Skill.Drain 1;
		Skill.DrainInterval 18;
		Skill.DrainType "Health";
		Inventory.Icon "MWNDF0";
		
		+SKILL.TOGGLE
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
		
		let rpg = RPGPlayer(owner);
		if (rpg)
			rpg.attackModifier -= 0.15;
	}
	
	override void EndSkill()
	{
		TakeBuff();
		
		let rpg = RPGPlayer(owner);
		if (rpg)
			rpg.attackModifier += 0.15;
	}
}

class BloodRageBuff : Buff
{
	Default
	{
		Inventory.Icon "MWNDF0";
		
		+BUFF.INFINITE
	}
}

class BloodOath : Skill
{
	Default
	{
		Tag "$TAG_BLOODOATH";
		Skill.Description "$DESC_BLOODOATH";
		Skill.BuffType "BloodOathBuff";
		Inventory.Icon "MWNDF0";
	}
	
	override void OnEquip()
	{
		GiveBuff(owner);
	}
	
	override void OnUnequip()
	{
		TakeBuff();
	}
}

class BloodOathBuff : Buff
{
	Default
	{
		Inventory.Icon "MWNDF0";
		
		+BUFF.INFINITE
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		
		// Make sure this is always done after armor
		if (owner)
		{
			Inventory last;
			for (let probe = owner.inv; probe; probe = probe.inv)
			{
				if (!probe.inv)
					last = probe;
			}
			
			owner.inv = inv;
			inv = null;
			if (last)
				last.inv = self;
		}
	}
	
	override void AbsorbDamage(int damage, Name damageType, out int newdamage)
	{
		newdamage = round(newdamage * 0.625);
	}
	
	override void OnDamage(Actor inflictor, Actor source, int dmg)
	{
		if (!inflictor || dmg <= 0)
			return;
		
		let bl = BleedDebuff(Spawn("BleedDebuff"));
		if (bl)
		{
			bl.damageInterval = bl.threshold ? dmg / double(bl.threshold) : 0;
			owner.GiveInventory("BleedBuff", 1);
			bl.AttachToOwner(owner);
		}
	}
	
	override void DealtDamage(Actor damaged, int dmg)
	{
		owner.GiveBody(round(dmg*0.1));
	}
}

class BleedDebuff : Inventory
{
	double damageInterval;
	private double damageCounter;
	
	Default
	{
		Threshold 175;
		
		+INVENTORY.UNDROPPABLE
		+NOBLOCKMAP
	}
	
	override void Tick() {}
	
	override void DoEffect()
	{
		if (!owner || owner.health <= 0 || --threshold < 0)
		{
			Destroy();
			return;
		}
		
		damageCounter += damageInterval;
		if (damageCounter >= 1)
		{
			--damageCounter;
			--owner.health;
			if (owner.player)
				--owner.player.health;
			
			if (owner.health <= 0)
				owner.Die(null, null);
		}
	}
}

class BleedBuff : Buff
{
	Default
	{
		Inventory.Icon "MWNDF0";
		
		+BUFF.STACKABLE
		+BUFF.INFINITE;
	}
	
	override void DoEffect()
	{
		stacks = 0;
		for (let probe = owner.inv; probe; probe = probe.inv)
		{
			if (probe is "BleedDebuff")
				++stacks;
		}
		
		if (!stacks)
		{
			Destroy();
			return;
		}
		
		super.DoEffect();
	}
}

class EarthquakeSkill : Skill
{
	Default
	{
		Tag "$TAG_EARTHQUAKE";
		Skill.Description "$DESC_EARTHQUAKE";
		Skill.Cost 5;
		Skill.CastTime 31;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.Cast "HammerSlam";
		Inventory.Icon "MWNDF0";
	}
}

class HammerSlam : CastWeapon
{
	Default
	{
		Weapon.AmmoType1 "BlueMana";
		Weapon.AmmoType2 "RedMana";
		Weapon.YAdjust -10;
	}
	
	States
	{
		Select:
		Deselect:
		Ready:
		Fire:
			FHMR B 6 Offset (5, 0);
			FHMR C 3 Offset (5, 0);
			FHMR D 3 Offset (5, 0);
			FHMR E 2 Offset (5, 0);
			FHMR E 10 Offset (5, 150) A_Slam;
			FHMR A 1 Offset (0, 60);
			FHMR A 1 Offset (0, 55);
			FHMR A 1 Offset (0, 50);
			FHMR A 1 Offset (0, 45);
			FHMR A 1 Offset (0, 40);
			FHMR A 1 Offset (0, 35);
			FHMR A 1;
			Stop;
	}
	
	action void A_Slam()
	{
		A_StartSound("minotaur/attack3", CHAN_WEAPON);
		double angOfs = -75;
		for (int i = 0; i < 5; ++i)
		{
			A_NewProjectile("EarthquakeCrawler", angOfs);
			angOfs += 37.5;
		}
	}
}

class EarthquakeCrawler : Actor
{
	private int prevDirection;
	private double spawnAngle;
	Array<Actor> alreadyHit;
	
	Default
	{
		Radius 5;
		Height 10;
		Speed 16;
		Threshold 6;
		Projectile;
		RenderStyle "Add";
		DeathSound "minotaur/fx2hit";
		
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
		+ZDOOMTRANS
		+FLOORHUGGER
	}
	
	States
	{
		Spawn:
			FX13 A 3 Bright A_EarthquakeExplosion;
			Loop;
			
		Death:
			FX13 I 4 Bright;
			FX13 JKLM 4 Bright;
			Stop;
	}

	void A_EarthquakeExplosion()
	{
		let mo = Spawn("EarthquakeExploder", pos, ALLOW_REPLACE);
		if (mo)
		{
			mo.master = self;
			mo.target = target;
		}
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (isFrozen() || !bMissile)
			return;
		
		if (--threshold <= 0)
		{
			int ran;
			if (!prevDirection)
			{
				ran = random(-1,1);
				if (ran == 1)
					angle += frandom(30,90);
				else if (ran == -1)
					angle -= frandom(30,90);
				
				prevDirection = ran;
			}
			else
			{
				ran = random(0,3);
				if (ran > 0)
				{
					angle = spawnAngle;
					prevDirection = 0;
				}
			}
			
			VelFromAngle();
			threshold = random(1,2);
			if (!prevDirection)
				threshold += random(1,2);
		}
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		return 1;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		spawnAngle = angle;
	}
}

class EarthquakeExploder : RPGMissile
{
	Default
	{
		RenderStyle "Add";
		RPGMissile.AilmentPower 35;
		RPGMissile.AilmentType "Burn";
		RPGMissile.AilmentDamage 10;
		
		+NOINTERACTION
		+ZDOOMTRANS
		-MISSILE
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_StartSound("minotaur/fx3hit", CHAN_BODY);
				A_Explode(24, 24, 0, false, 24, damagetype: 'Fire');
			}
		Death:
			FX13 DC 4 Bright;
			FX13 BCDE 5 Bright;
			FX13 FGH 4 Bright;
			Stop;
	}
}

class Slam : Skill
{
	Default
	{
		Tag "$TAG_SLAM";
		Skill.Description "$DESC_SLAM";
		Skill.Cost 10;
		Skill.CastTime 35;
		Skill.CoolDown 700;
		Skill.Type "RedMana";
		Inventory.Icon "MWNDF0";
	}
	
	override void UseSkill()
	{
		BlockThingsIterator it = BlockThingsIterator.Create(owner, 384);
		Actor mo;
		while (it.Next())
		{
			mo = it.thing;
			if (!mo || !(mo.bIsMonster || mo.player) || mo.health <= 0 || owner.IsFriend(mo) ||
				owner.Distance3DSquared(mo) > 147456 || !owner.CheckSight(mo))
			{
				continue;
			}
			
			mo.DamageMobj(self, owner, 100, 'Blunt', DMG_NOBLOCK);
			let ail = Flinch(mo.FindInventory("Flinch"));
			if (ail)
				ail.AddAilment(owner, 100);
			mo.bBlasted = true;
			
			Vector3 dist = owner.Vec3To(mo) + (0,0,mo.height/2-mo.floorclip - owner.height/2-owner.floorclip);
			mo.Vel3DFromAngle(25, owner.AngleTo(mo), -VectorAngle(dist.xy.Length(), dist.z));
		}
	}
}