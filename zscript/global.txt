class GlobalEventsHandler : EventHandler
{
	bool bMarkers;
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if (!e.thing)
			return;
		
		if (!bMarkers && e.thing.GetClass() == "Marker")
		{
			e.thing.Destroy();
		}
		else if (e.thing.bMissile && e.thing.target)
		{
			let bm = BuffManager(e.thing.target.FindInventory("BuffManager"));
			if (!bm)
				return;
				
			for (uint i = 0; i < bm.buffs.Size(); ++i)
			{
				if (bm.buffs[i])
					bm.buffs[i].MissileFired(e.thing);
			}
		}
		else if (e.thing is "Inventory")
		{
			if (e.thing is "ArtiEgg" || e.thing is "ArtiHealingRadius" || e.thing is "CrystalVial")
				e.thing.Destroy();
			else if (e.thing is "ArtiInvulnerability2")
			{
				e.thing.A_SpawnItemEx("RPGKrater", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL, tid: e.thing.tid);
				e.thing.Destroy();
			}
			else if (e.thing is "ArtiDarkServant")
			{
				e.thing.A_SpawnItemEx("RPGUrn", flags: SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL, tid: e.thing.tid);
				e.thing.Destroy();
			}
			else if (e.thing is "PuzzleItem")
				Inventory(e.thing).bInvBar = false;
		}
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.thing)
		{
			let bm = BuffManager(e.thing.FindInventory("BuffManager"));
			if (bm)
			{
				for (uint i = 0; i < bm.buffs.Size(); ++i)
				{
					if (bm.buffs[i])
						bm.buffs[i].OnDamage(e.inflictor, e.damageSource, e.damage);
				}
			}
		}
		
		if (e.damageSource)
		{
			let bm = BuffManager(e.damageSource.FindInventory("BuffManager"));
			if (bm)
			{
				for (uint i = 0; i < bm.buffs.Size(); ++i)
				{
					if (bm.buffs[i])
						bm.buffs[i].DealtDamage(e.thing, e.damage);
				}
			}
		}
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		for (uint i = 0; i < MAXPLAYERS; ++i)
		{
			if (!playerInGame[i])
				continue;
			
			let bm = BuffManager(players[i].mo.FindInventory("BuffManager"));
			if (!bm)
				continue;
			
			for (uint j = 0; j < bm.buffs.Size(); ++j)
			{
				if (bm.buffs[j])
					bm.buffs[j].ThingDied(e.thing, e.inflictor);
			}
		}
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		Array<string> command;
		e.Name.Split(command, ":");
		
		if (command.Size() == 2)
		{
			if (command[0] ~== "Skill")
			{
				let rpg = RPGPlayer(players[e.Player].mo);
				if (rpg)
					rpg.UseSkill(command[1].ToInt(10));
			}
		}
		else if (e.Player == net_arbitrator && e.Name ~== "ToggleMarker")
		{
			bMarkers = !bMarkers;
			if (bMarkers)
				Console.printf("Markers enabled");
			else
				Console.printf("Markers disabled");
		}
		else if (e.Name ~== "NextSkill")
		{
			let rpg = RPGPlayer(players[e.Player].mo);
			if (rpg)
				rpg.NextSpell();
		}
		else if (e.Name ~== "PrevSkill")
		{
			let rpg = RPGPlayer(players[e.Player].mo);
			if (rpg)
				rpg.PreviousSpell();
		}
		else if (e.Name ~== "CurrentSkill")
		{
			let rpg = RPGPlayer(players[e.Player].mo);
			if (rpg)
				rpg.UseSkill(rpg.selectedSkill);
		}
		else if (e.Name ~== "KillMinions")
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
			Actor mo;
			while (mo = Actor(it.Next()))
			{
				if (!mo || !mo.bIsMonster || mo.health <= 0 || !mo.master || mo.master != players[e.Player].mo)
					continue;
				
				mo.DamageMobj(null, null, Actor.TELEFRAG_DAMAGE, "Telefrag");
			}
		}
	}
}