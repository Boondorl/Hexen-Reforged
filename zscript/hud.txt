class ReforgedStatusBar : BaseStatusBar
{
	DynamicValueInterpolator mHealthInterpolator;
	DynamicValueInterpolator mBlueManaInterpolator;
	DynamicValueInterpolator mGreenManaInterpolator;
	DynamicValueInterpolator mRedManaInterpolator;
	DynamicValueInterpolator mXPInterpolator;
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mBigFont;
	InventoryBarState diparms;
	
	// Cached textures
	TextureID gargl;
	TextureID gargr;
	TextureID orb;
	TextureID plate;
	TextureID box;
	
	double maxRatio;

	override void Init()
	{
		super.Init();
		
		SetSize(0, 320, 200);

		// Create the font used for the fullscreen HUD
		Font fnt = "HUDFONT_RAVEN";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0") + 1, Mono_CellLeft, 1, 1);
		fnt = "INDEXFONT_RAVEN";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
		fnt = "BIGFONT";
		mBigFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft, 2, 2);
		
		diparms = InventoryBarState.Create(mIndexFont);
		
		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mBlueManaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mGreenManaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mRedManaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mXPInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 200);
		
		gargl = TexMan.CheckForTexture("GARGL", TexMan.TYPE_MiscPatch);
		gargr = TexMan.CheckForTexture("GARGR", TexMan.TYPE_MiscPatch);
		orb = TexMan.CheckForTexture("ORB", TexMan.TYPE_MiscPatch);
		plate = TexMan.CheckForTexture("MANABRT1", TexMan.TYPE_MiscPatch);
		box = TexMan.CheckForTexture("ARTIBOX", TexMan.TYPE_MiscPatch);
		
		maxRatio = 16./9;
	}
	
	override void NewGame()
	{
		super.NewGame();
		
		mHealthInterpolator.Reset(0);
		mBlueManaInterpolator.Reset(0);
		mGreenManaInterpolator.Reset(0);
		mRedManaInterpolator.Reset(0);
		mXPInterpolator.Reset(0);
	}

	override void Tick()
	{
		Super.Tick();
		
		mHealthInterpolator.Update(CPlayer.health);
		let bm = CPlayer.mo.FindInventory("BlueMana");
		if (bm)
			mBlueManaInterpolator.Update(bm.amount);
		
		let gm = CPlayer.mo.FindInventory("GreenMana");
		if (gm)
			mGreenManaInterpolator.Update(gm.amount);
		
		let rm = CPlayer.mo.FindInventory("RedMana");
		if (rm)
			mRedManaInterpolator.Update(rm.amount);
		
		let rpg = RPGPlayer(CPlayer.mo);
		if (rpg)
			mXPInterpolator.Update(rpg.currentXP);
	}

	override void Draw (int state, double TicFrac)
	{
		super.Draw(state, TicFrac);
		
		if (state == HUD_Fullscreen || state == HUD_StatusBar)
		{
			BeginHUD();
			DrawFullScreenStuff();
		}
	}

	protected void DrawFullScreenStuff()
	{
		// Get virtual screen width
		int screenWidth = Screen.GetWidth();
		int screenHeight = Screen.GetHeight();
		int aspectOfs = 0;
		
		Vector2 HUDScale = GetHUDScale();
		int vWidth = screenWidth / HUDScale.x;
		int vHeight = screenHeight / HUDScale.y;
		
		if (screenWidth > screenHeight && (screenWidth*1. / screenHeight) > maxRatio)
			aspectOfs = (screenWidth - screenHeight*maxRatio) / (2*HUDScale.x);
		
		// Chain and gem
		String Gem, Chain;
		if (CPlayer.mo is "ReforgedCleric")
		{
			Gem = "LIFEGMC2";
			Chain = "CHAIN2";
		}
		else if (CPlayer.mo is "ReforgedMage")
		{
			Gem = "LIFEGMM2";
			Chain = "CHAIN3";
		}
		else
		{
			Gem = "LIFEGMF2";
			Chain = "CHAIN";
		}
		
		Vector2 orbSize = TexMan.GetScaledSize(orb);
		orbSize.y *= 1.2;
		orbSize *= 0.7;
		
		// Get Gargoyle information first to find gem offset
		Vector2 garglSize = TexMan.GetScaledSize(gargl);
		Vector2 gargrSize = TexMan.GetScaledSize(gargr);
		
		garglSize.y *= 1.2;
		garglSize *= 0.7;
		gargrSize.y *= 1.2;
		gargrSize *= 0.7;
		
		// Chain size and gem information
		TextureID chaintex = TexMan.CheckForTexture(chain, TexMan.TYPE_MiscPatch);
		TextureID gemtex = TexMan.CheckForTexture(gem, TexMan.TYPE_MiscPatch);
		Vector2 chainsize = TexMan.GetScaledSize(chaintex);
		Vector2 gemsize = TexMan.GetScaledSize(gemtex);
		
		chainsize.y *= 1.2;
		chainsize *= 0.7;
		gemsize.y *= 1.2;
		gemsize *= 0.7;
		
		let rpg = RPGPlayer(CPlayer.mo);
		int curXP = mXPInterpolator.GetValue();
		int nextLevelXP = 0;
		if (rpg)
			nextLevelXP = rpg.nextLevelXP;

		// Get gem offset
		curXP = clamp(curXP, 0, nextLevelXP);
		int offset = (vWidth - aspectOfs*2 - gargrSize.x - gemsize.x - garglSize.x) * (curXP*1. / max(1, nextLevelXP));
		
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = Screen.GetClipRect();
		SetClipRect(aspectOfs, 0, vWidth-aspectOfs*2, screenHeight);
	
		// Draw the chain and gem
		for (int i = 0; i < vWidth-aspectOfs*2; i += chainsize.x)
			DrawImage(chain, (aspectOfs + i + (offset % 15), -chainsize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		
		DrawImage(gem, (aspectOfs + garglSize.x + offset, -gemsize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		
		Screen.SetClipRect(cx, cy, cw, ch);
		
		// Health
		int maxHealth = CPlayer.mo.maxHealth ? CPlayer.mo.maxHealth : CPlayer.mo.default.health;
		int health = mHealthInterpolator.GetValue();
		
		double healthRatio = health*1. / maxHealth;
		healthRatio = clamp(healthRatio, 0, 1);
		
		[cx, cy, cw, ch] = Screen.GetClipRect();
		
		int clipHeight = orbSize.y*healthRatio;
		SetClipRect(aspectOfs, vHeight-orbSize.y+(orbSize.y-clipHeight), orbSize.x, clipHeight);
		
		DrawImage("HEALTH", (aspectOfs, -orbSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		
		Screen.SetClipRect(cx, cy, cw, ch);
		
		int fHeight = mBigFont.mFont.GetHeight();
		String healthNum = "Life";
		DrawString(mBigFont, healthNum, (aspectOfs+orbSize.x/6, -orbSize.y - fHeight*0.6), scale: (0.3, 0.3));
		DrawString(mHUDFont, FormatNumber(mHealthInterpolator.GetValue()), (aspectOfs+orbSize.x*5/6., -orbSize.y - fHeight*0.6), DI_TEXT_ALIGN_RIGHT, scale: (0.5, 0.5));
		
		//armor
		int ac = 0;
		let am = ArmorPieceManager(CPlayer.mo.FindInventory("ArmorPieceManager"));
		if (am)
			ac = am.GetCurrentAC();
		
		String acNum = "AC";
		DrawString(mBigFont, acNum, (aspectOfs+orbSize.x/6, -orbSize.y - fHeight*0.3), scale: (0.3, 0.3));
		DrawString(mHUDFont, FormatNumber(ac), (aspectOfs+orbSize.x*5/6., -orbSize.y - fHeight*0.3), DI_TEXT_ALIGN_RIGHT, scale: (0.5, 0.5));
		
		// Mana
		let red = CPlayer.mo.FindInventory("RedMana");
		if (red)
		{
			double manaRatio = mRedManaInterpolator.GetValue()*1. / max(1, red.maxAmount);
			manaRatio = clamp(manaRatio, 0, 1);
			
			int cx, cy, cw, ch;
			[cx, cy, cw, ch] = Screen.GetClipRect();
			
			int clipHeight = orbSize.y*manaRatio;
			SetClipRect(vWidth-aspectOfs-orbSize.x, vHeight-orbSize.y+(orbSize.y-clipHeight), orbSize.x, clipHeight);
			
			DrawImage("REDMANA", (-orbSize.x-aspectOfs, -orbSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
			
			Screen.SetClipRect(cx, cy, cw, ch);
		}
		
		if (CPlayer.ReadyWeapon)
		{
			let ammo = CPlayer.ReadyWeapon.Ammo1;
			if (ammo is 'BlueMana')
			{
				double manaRatio = mBlueManaInterpolator.GetValue()*1. / max(1, ammo.maxAmount);
				manaRatio = clamp(manaRatio, 0, 1);
				
				int cx, cy, cw, ch;
				[cx, cy, cw, ch] = Screen.GetClipRect();
				
				int clipHeight = orbSize.y*manaRatio;
				SetClipRect(vWidth-aspectOfs-orbSize.x, vHeight-orbSize.y+(orbSize.y-clipHeight), orbSize.x, clipHeight);
				
				DrawImage("BLUEMANA", (-orbSize.x-aspectOfs, -orbSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
				
				Screen.SetClipRect(cx, cy, cw, ch);
			}
			else if (ammo is 'GreenMana')
			{
				double manaRatio = mGreenManaInterpolator.GetValue()*1. / max(1, ammo.maxAmount);
				manaRatio = clamp(manaRatio, 0, 1);
				
				int cx, cy, cw, ch;
				[cx, cy, cw, ch] = Screen.GetClipRect();
				
				int clipHeight = orbSize.y*manaRatio;
				SetClipRect(vWidth-aspectOfs-orbSize.x, vHeight-orbSize.y+(orbSize.y-clipHeight), orbSize.x, clipHeight);
				
				DrawImage("GREEMANA", (-orbSize.x-aspectOfs, -orbSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
				
				Screen.SetClipRect(cx, cy, cw, ch);
			}
		}
		
		Vector2 plateSize = TexMan.GetScaledSize(plate);
		plateSize.y *= 1.2;
		plateSize *= 0.5;
		
		Ammo ammo1, ammo2, ammo3;
		[ammo1, ammo2, ammo3] = GetMana();
		let weap = CPlayer.ReadyWeapon;
		
		if (weap && weap.Ammo1 is "BlueMana")
			DrawImage("MANABRT1", (-orbSize.x*5/6.-aspectOfs, -orbsize.y - plateSize.y*3), DI_ITEM_OFFSETS, scale: (0.5,0.6));
		else
			DrawImage("MANADIM1", (-orbSize.x*5/6.-aspectOfs, -orbsize.y - plateSize.y*3), DI_ITEM_OFFSETS, scale: (0.5,0.6));
		
		if (weap && weap.Ammo1 is "GreenMana")
			DrawImage("MANABRT2", (-orbSize.x*5/6.-aspectOfs, -orbsize.y - plateSize.y*2), DI_ITEM_OFFSETS, scale: (0.5,0.6));
		else
			DrawImage("MANADIM2", (-orbSize.x*5/6.-aspectOfs, -orbsize.y - plateSize.y*2), DI_ITEM_OFFSETS, scale: (0.5,0.6));
		
		if (weap && (weap.Ammo1 is "RedMana" || weap.Ammo2 is "RedMana"))
			DrawImage("MANABRT2", (-orbSize.x*5/6.-aspectOfs, -orbsize.y - plateSize.y), DI_ITEM_OFFSETS, scale: (0.5,0.6));
		else
			DrawImage("MANADIM2", (-orbSize.x*5/6.-aspectOfs, -orbsize.y - plateSize.y), DI_ITEM_OFFSETS, scale: (0.5,0.6));
		
		DrawString(mHUDFont, FormatNumber(GetAmount("BlueMana")), (-orbSize.x/6-aspectOfs, -orbsize.y - plateSize.y*2.9), DI_TEXT_ALIGN_RIGHT, scale: (0.5,0.5));
		DrawString(mHUDFont, FormatNumber(GetAmount("GreenMana")), (-orbSize.x/6-aspectOfs, -orbsize.y - plateSize.y*1.9), DI_TEXT_ALIGN_RIGHT, scale: (0.5,0.5));
		DrawString(mHUDFont, FormatNumber(GetAmount("RedMana")), (-orbSize.x/6-aspectOfs, -orbsize.y - plateSize.y*0.9), DI_TEXT_ALIGN_RIGHT, scale: (0.5,0.5));
		
		// Orbs
		DrawImage("ORB", (aspectOfs, -orbSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		DrawImage("ORB", (-orbSize.x-aspectOfs, -orbSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		
		// Gargoyles
		DrawImage("GARGL", (aspectOfs, -garglSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		DrawImage("GARGR", (-gargrSize.x-aspectOfs, -gargrSize.y), DI_ITEM_OFFSETS, scale: (0.7, 0.84));
		
		// RPG Player specific coding
		if (rpg)
		{
			// Points
			if (rpg.currentPoints > 0)
			{
				string pointMessage;
				if (rpg.currentPoints == 1)
					pointMessage = String.Format("%d point available", rpg.currentPoints);
				else
					pointMessage = String.Format("%d points available", rpg.currentPoints);
				
				int length = (vWidth - mBigFont.mFont.StringWidth(pointMessage)*0.6)/2;
				int height = -chainsize.y - mBigFont.mFont.GetHeight()*0.6;
				DrawString(mBigFont, pointMessage, (length, height), scale: (0.6, 0.6));
			}
			
			// Buffs
			let bm = BuffManager(rpg.FindInventory("BuffManager"));
			if (bm)
			{
				int xOfs = aspectOfs+2.5*HUDScale.x;
				int yOfs = HUDScale.y;
				int fH = mHUDFont.mFont.GetHeight()*0.5;
				
				for (uint i = 0; i < bm.buffs.Size(); ++i)
				{
					let bf = bm.buffs[i];
					if (!bf)
						continue;
					
					Vector2 buffsize = TexMan.GetScaledSize(bf.icon);
					buffsize.y *= 1.2;
					buffsize *= 0.6;
					
					DrawTexture(bf.icon, (xOfs, yOfs+buffsize.y), DI_ITEM_CENTER_BOTTOM, scale: (0.6, 0.72));
					if (!bf.bInfinite)
						DrawString(mHUDFont, FormatNumber((bf.duration-bf.durationTimer+35) / 35), (xOfs+buffsize.x, yOfs+buffsize.y-fH), DI_TEXT_ALIGN_RIGHT, scale: (0.5,0.5));
					
					xOfs += buffsize.x + 2.5*HUDScale.x;
				}
			}
			
			if (!(rpg.hideElements & EL_SKILLS))
			{
				// Active skills
				Vector2 boxSize = TexMan.GetScaledSize(box);
				boxsize.y *= 1.2;
				boxsize *= 0.5;
				int xOfs = -orbSize.x*1.25-aspectOfs;
				int yOfs = -chainSize.y-boxsize.y/2;
				string key;
				int strWidth;
				
				for (uint i = rpg.activeSkills.Size()-1; i >= 0; --i)
				{
					DrawImage("ARTIBOX", (xOfs, -chainSize.y), 0, scale: (0.5, 0.6));
					key = GetKeyForSpell("Spell"..(i+1));
					DrawString(mBigFont, key, (xOfs-boxsize.x/2, -chainSize.y-fHeight*0.3), scale: (0.3,0.3));
					
					let sk = rpg.activeSkills[i];
					if (sk)
						DrawSkill(sk, xOfs, yOfs, i == rpg.selectedSkill);
					
					xOfs -= boxsize.x;
				}
			}
		}

		//frags/keys
		if (deathmatch)
			DrawString(mHUDFont, FormatNumber(CPlayer.FragCount, 3), (70, -16));
		
		// Inventory item and bar
		if (!rpg || !(rpg.hideElements & EL_ITEMS))
		{
			DrawImage("IBOX", (orbSize.x*1.65+aspectOfs, -chainSize.y), 0, scale: (0.7, 0.84));
			if (!isInventoryBarVisible() && !Level.NoInventoryBar && CPlayer.mo.InvSel != null)
			{
				// This code was changed to always fit the item into the box, regardless of alignment or sprite size.
				// Heretic's ARTIBOX is 30x30 pixels. 
				DrawInventoryIcon(CPlayer.mo.InvSel, (orbSize.x*1.65+aspectOfs, -chainSize.y*3.1), DI_ARTIFLASH|DI_ITEM_CENTER, boxsize:(28, 28), scale: (0.7, 0.84));
				DrawString(mIndexFont, FormatNumber(CPlayer.mo.InvSel.Amount, 3), (orbSize.x*1.8+aspectOfs, -chainSize.y*1.15 - mIndexFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT);
			}
			
			if (isInventoryBarVisible())
				DrawReforgedItems(diparms, (orbSize.x*1.65+aspectOfs, -chainSize.y*3.1), (orbSize.x*1.8+aspectOfs, -chainSize.y*1.15 - mIndexFont.mFont.GetHeight()), DI_ITEM_CENTER, HX_SHADOW);
		}
	}
	
	String GetKeyForSpell(string alias)
	{
		string bind;
		int key1, key2;
		
		[key1, key2] = Bindings.GetKeysForCommand(alias);
		int useKey = key1 ? key1 : key2;
		if (useKey)
			bind = KeyBindings.NameKeys(useKey, 0);
		else
			bind = "-";
		
		return bind;
	}
	
	void DrawSkill(Skill spell, int xOfs, int yOfs, bool selected)
	{
		if (!spell)
			return;
		
		double alpha = 1;
		if (spell.bInCast || spell.bInCoolDown || spell.bCurToggle)
			alpha = 0.5;
		
		if (selected)
			alpha *= 0.5;
				
		DrawTexture(spell.icon, (xOfs, yOfs), DI_ITEM_CENTER, alpha, scale: (0.5, 0.6));
		if (spell.bInCoolDown)
		{
			string cd = FormatNumber((spell.coolDownTimer+35) / 35);
			int height = mHudFont.mFont.GetHeight()*0.7;
			int width = mHUDFont.mFont.StringWidth(cd)*0.7;
			DrawString(mHUDFont, cd, (xOfs-width/2, yOfs-height/2), scale: (0.7,0.7));
		}
	}
	
	Ammo, Ammo, Ammo, int, int, int GetMana() const
	{
		Ammo ammo1, ammo2, ammo3;
		ammo1 = Ammo(CPlayer.mo.FindInventory("BlueMana"));
		ammo2 = Ammo(CPlayer.mo.FindInventory("GreenMana"));
		ammo3 = Ammo(CPlayer.mo.FindInventory("RedMana"));
		
		let ammocount1 = ammo1 != NULL ? ammo1.Amount : 0;
		let ammocount2 = ammo2 != NULL ? ammo2.Amount : 0;
		let ammocount3 = ammo3 != NULL ? ammo3.Amount : 0;
		
		return ammo1, ammo2, ammo3, ammocount1, ammocount2, ammocount3;
	}
	
	void DrawReforgedItems(InventoryBarState parms, Vector2 position, Vector2 textPosition, int flags = 0, double bgalpha = 1.)
	{
		double width = parms.boxsize.x*0.8 * 3;
		[position, flags] = AdjustPosition(position, flags, width, parms.boxsize.y);
		textPosition = AdjustPosition(textPosition, flags, width, parms.boxsize.y);
		
		// Player has no listed inventory items.
		if (!CPlayer.mo.FirstInv())
			return;
		
		CPlayer.mo.InvFirst = CPlayer.mo.InvSel.PrevInv();
		if (!CPlayer.mo.InvFirst)
		{
			for (let probe = CPlayer.mo.FirstInv(); probe != null; probe = probe.NextInv())
				CPlayer.mo.InvFirst = probe;
		}
		
		Vector2 boxsize = parms.boxsize;
		boxsize.x *= 0.8;
		
		Vector2 itempos = position + boxsize / 2;
		Vector2 textpos = textPosition + (boxsize.x / 2, boxsize.y);
		
		int k;
		for (let item = CPlayer.mo.InvFirst.NextInv(); item != CPlayer.mo.InvFirst; ++k)
		{
			if (!item)
				item = CPlayer.mo.FirstInv();
			else
				item = item.NextInv();
		}

		int i = k > 1 ? 0 : 1;
		Inventory item;
		for(item = CPlayer.mo.InvFirst; i < 3; item = item.NextInv())
		{
			if (!item)
			{
				item = CPlayer.mo.FirstInv();
				if (item == CPlayer.mo.InvFirst && k <= 1)
					break;
			}
			
			DrawInventoryIcon(item, itempos + (boxsize.x * i, 0), flags | DI_ITEM_CENTER, scale: (0.7, 0.84));
			DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 5), textpos + (boxsize.x * i, 0), flags | DI_TEXT_ALIGN_RIGHT, parms.cr, parms.itemalpha);
			i++;
		}
	}
}