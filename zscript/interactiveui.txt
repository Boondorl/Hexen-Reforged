class InteractiveBox : Object ui
{
	Inventory item;
	int height;
	int width;
	Vector2 absoluteCenter;
	int scaledH;
	int scaledW;
	Vector2 center;
	int tolerance;
	bool bInvisible;
	bool bAttached;
	bool bLeftClicked;
	bool bRightClicked;
	bool bSelected;
	bool bKeepAspectRatio;
	bool bCenter;
	
	int leftBoundary;
	int rightBoundary;
	int topBoundary;
	int bottomBoundary;
	
	protected uint attachTimer;
	protected double wRatio;
	protected double hRatio;
	protected int mouseX;
	protected int mouseY;
	protected int currentAction;
	protected uint deltatime;
	private uint prevTime;
	
	void DrawTexture(TextureID texture, Vector2 pos, Vector2 scale = (1,1), bool clip = false)
	{
		if (bInvisible || !scale.x || !scale.y)
			return;
		
		if (clip)
			Screen.SetClipRect(leftBoundary, topBoundary, rightBoundary - leftBoundary, bottomBoundary - topBoundary);
			
		Vector2 size = TexMan.GetScaledSize(texture);
		size.y *= 1.2;
			
		size.x *= scale.x;
		size.y *= scale.y;
			
		int w, h;
		if (bKeepAspectRatio)
			size *= min(wRatio, hRatio);
		else
		{
			size.x *= wRatio;
			size.y *= hRatio;
		}
			
		w = size.x;
		h = size.y;
		pos.y += size.y/scale.y;
		Screen.DrawTexture(texture, false, pos.x, pos.y, DTA_CenterBottomOffset, true, DTA_DestWidth, w, DTA_DestHeight, h);
			
		if (clip)
			Screen.ClearClipRect();
	}
	
	void DrawText(Font fnt, int color, Vector2 pos, string text, Vector2 offset = (0,0), double scale = 1)
	{
		if (bInvisible || !scale)
			return;
		
		int vWidth = Screen.GetWidth();
		int vHeight = Screen.GetHeight();
		
		double ratio = min(wRatio, hRatio) * scale;
		vWidth /= ratio;
		vHeight /= ratio;
		
		offset *= ratio;
		
		pos.x += offset.x;
		pos.y += offset.y;
		
		pos /= ratio;
				
		Screen.DrawText(fnt, color, pos.x, pos.y, text, DTA_VirtualWidth, vWidth, DTA_VirtualHeight, vHeight, DTA_KeepRatio, true);
	}
	
	virtual void Initialize()
	{
		bCenter = true;
		bKeepAspectRatio = true;
	}
	
	virtual void Clear()
	{
		bLeftClicked = false;
		bRightClicked = false;
		attachTimer = 0;
		bAttached = false;
		prevTime = 0;
	}
	
	virtual void OnHover() {}
	
	virtual void OnAttached() {}
	
	virtual void OnSelected() {}
	
	virtual void OnLeftClick()
	{
		bLeftClicked = true;
	}
	
	virtual void OnRightClick()
	{
		bRightClicked = true;
	}
	
	virtual void OnLeftHold() {}
	
	virtual void OnRightHold() {}
	
	virtual void OnLeftRelease()
	{
		bLeftClicked = false;
	}
	
	virtual void OnRightRelease()
	{
		bRightClicked = false;
	}
	
	virtual void Execute()
	{
		uint currentTime = MSTime();
		if (!prevTime)
			prevTime = currentTime;
		
		deltatime = currentTime - prevTime;
		if (deltaTime > 200) // Cap to a minimum of 5 FPS
			deltaTime = 200;
		
		prevTime = currentTime;
		
		int wOfs, hOfs, w, h;
		[wOfs, hOfs, w, h] = Screen.GetViewWindow();
		
		wRatio = w / 1920.;
		hRatio = h / 1080.;
		
		if (bKeepAspectRatio)
		{
			double ratio = min(wRatio, hRatio);
			scaledW = width * ratio;
			scaledH = height * ratio;
		}
		else
		{
			scaledW = width * wRatio;
			scaledH = height * hRatio;
		}
		
		if (bCenter)
		{
			double ratio = min(wRatio, hRatio);
			center.x = wOfs + absoluteCenter.x*ratio + abs(1920*ratio - 1920*wRatio)/2;
			center.y = hOfs + absoluteCenter.y*ratio + abs(1080*ratio - 1080*hRatio)/2;
		}
		else
		{
			center.x = wOfs + absoluteCenter.x * wRatio;
			center.y = hOfs + absoluteCenter.y * hRatio;
		}
		
		Vector3 mouse = RPGMenuHandler.GetMouse();
		mouseX = mouse.x;
		mouseY = mouse.y;
		currentAction = mouse.z;
		
		if (mouse.x > -1)
		{
			double rad = scaledW / 2.;
			double length = scaledH / 2.;
			
			if (bAttached ||
				(mouse.x >= (center.x-rad) && mouse.x <= (center.x+rad) &&
				mouse.y >= (center.y-length) && mouse.y <= (center.y+length)))
			{
				switch (mouse.z)
				{
					case RPGMenuHandler.MI_LEFTPRESS:
						OnLeftClick();
						break;
						
					case RPGMenuHandler.MI_LEFTHOLD:
						OnLeftHold();
						break;
						
					case RPGMenuHandler.MI_LEFTRELEASE:
						OnLeftRelease();
						break;
						
					case RPGMenuHandler.MI_RIGHTPRESS:
						OnRightClick();
						break;
						
					case RPGMenuHandler.MI_RIGHTHOLD:
						OnRightHold();
						break;
						
					case RPGMenuHandler.MI_RIGHTRELEASE:
						OnRightRelease();
						break;
				}
				
				if (bAttached)
					OnAttached();
				else
					OnHover();
			}
			else
			{
				attachTimer = 0;
				bLeftClicked = false;
				bRightClicked = false;
			}
		}
		
		if (bSelected && !bAttached)
			OnSelected();
	}
}

class ItemBox : InteractiveBox
{
	uint leftClickTimer;
	uint rightClickTimer;
	
	override void Clear()
	{
		super.Clear();
		
		leftClickTimer = 0;
		rightClickTimer = 0;
	}
	
	override void OnAttached()
	{
		Screen.DrawFrame(mouseX-scaledW/2, mouseY-scaledH/2, scaledW, scaledH);
	}
	
	override void OnSelected()
	{
		Screen.DrawFrame(center.x-scaledW/2, center.y-scaledH/2, scaledW, scaledH);
	}
	
	override void OnHover()
	{
		if (!bSelected)
			Screen.DrawFrame(center.x-scaledW/2, center.y-scaledH/2, scaledW, scaledH);
		
		if (item)
		{
			Font fnt = "BIGUPPER";
			string title = item.GetTag();
			int titleLength = fnt.StringWidth(title);
			int fHeight = fnt.GetHeight();
			
			DrawText(fnt, Font.CR_WHITE, center-(0, scaledH/2), title, (-titleLength / 2, -fHeight));
		}
		
		if (!bLeftClicked && !bRightClicked)
		{
			if (currentAction == RPGMenuHandler.BI_USEDITEM)
			{
				string use = "use:"..item.GetClassName();
				EventHandler.SendNetworkEvent(use);
			}
		}
	}
	
	override void Execute()
	{
		super.Execute();
		
		if (item)
		{
			if (item.icon)
				DrawTexture(item.icon, bAttached ? (mouseX, mouseY) : center, (2,2));
		
			if (!bAttached)
			{
				Font fnt = "BIGUPPER";
				int fHeight = fnt.GetHeight();
				string amount = String.Format("%d", item.amount);
				int amtLength = fnt.StringWidth(amount);
				
				DrawText(fnt, Font.CR_WHITE, center+(scaledW/2, scaledH/2), amount, (-amtLength, -fHeight));
			}
		}
		
		if (leftClickTimer > 0)
			leftClickTimer -= deltatime;
	}
	
	override void OnLeftClick()
	{
		super.OnLeftClick();
		
		if (leftClickTimer > 0)
		{
			string use = "use:"..item.GetClassName();
			EventHandler.SendNetworkEvent(use);
			leftClickTimer = 0;
		}
	}
	
	override void OnLeftRelease()
	{
		if (item)
		{
			if (bAttached)
			{
				ItemBox collided = RPGMenuHandler.CheckItemCollision(self);
				if (collided)
					RPGMenuHandler.SwapItems(self, collided);
				
				bAttached = false;
			}
			else if (bLeftClicked)
			{
				players[consoleplayer].mo.InvSel = item;
				if (leftClickTimer <= 0)
					leftClickTimer = 250;
			}
		}
		
		super.OnLeftRelease();
		attachTimer = 0;
	}
	
	override void OnLeftHold()
	{
		if (bLeftClicked)
		{
			if (attachTimer < 250)
				attachTimer += deltatime;
			else
				bAttached = true;
		}
	}
	
	override void OnRightHold()
	{
		if (bRightClicked)
		{
			if (rightClickTimer < 250)
				rightClickTimer += deltatime;
		}
	}
	
	override void OnRightRelease()
	{
		if (item && !bAttached)
		{
			string drop = "drop:"..item.GetClassName();
			
			if (rightClickTimer >= 250)
			{
				for (int i = 0; i < item.amount; ++i)
				{
					EventHandler.SendNetworkEvent(drop);
				}
			}
			else				
				EventHandler.SendNetworkEvent(drop);
		}
		
		rightClickTimer = 0;
		super.OnRightRelease();
	}
}

class KeyItemBox : InteractiveBox
{
	override void Execute()
	{
		super.Execute();
		
		if (item && item.icon)
			DrawTexture(item.icon, bAttached ? (mouseX, mouseY) : center, (2,2));
	}
	
	override void OnAttached()
	{
		Screen.DrawFrame(mouseX-scaledW/2, mouseY-scaledH/2, scaledW, scaledH);
	}
	
	override void OnHover()
	{
		Screen.DrawFrame(center.x-scaledW/2, center.y-scaledH/2, scaledW, scaledH);
		
		if (item)
		{
			Font fnt = "BIGUPPER";
			string title = item.GetTag();
			int titleLength = fnt.StringWidth(title);
			int fHeight = fnt.GetHeight();
			
			DrawText(fnt, Font.CR_WHITE, center-(0, scaledH/2), title, (-titleLength / 2, -fHeight));
		}			
		
		if (!bLeftClicked && !bRightClicked)
		{
			if (currentAction == RPGMenuHandler.BI_USEDITEM)
			{
				string use = "use:"..item.GetClassName();
				EventHandler.SendNetworkEvent(use);
			}
		}
	}
	
	override void OnLeftRelease()
	{
		if (item)
		{
			if (bAttached)
			{
				KeyItemBox collided = RPGMenuHandler.CheckKeyItemCollision(self);
				if (collided)
					RPGMenuHandler.SwapKeyItems(self, collided);
				
				bAttached = false;
			}
			else if (bLeftClicked)
			{
				string use = "use:"..item.GetClassName();
				EventHandler.SendNetworkEvent(use);
			}
		}
		
		super.OnLeftRelease();
		attachTimer = 0;
	}
	
	override void OnLeftHold()
	{
		if (bLeftClicked)
		{
			if (attachTimer < 250)
				attachTimer += deltatime;
			else
				bAttached = true;
		}
	}
}

class PassiveBox : InteractiveBox
{
	int increment;
	
	override void OnHover()
	{
		Screen.DrawFrame(center.x-scaledW/2, center.y-scaledH/2, scaledW, scaledH);
	}
	
	override void Execute()
	{
		super.Execute();
		
		if (item)
		{
			Font font = "BIGUPPER";
			int fHeight = font.GetHeight() / 2;
			string sign = increment ? ">" : "<";
			
			DrawText(confont, Font.CR_WHITE, center, sign, (-confont.StringWidth(sign)/2, -confont.GetHeight()/2), 3);
			
			if (!increment)
			{
				let stat = Stat(item);
				if (stat)
				{
					int levelColor = Font.CR_CREAM;
					if (stat.tempLevel < stat.level)
						levelColor = Font.CR_RED;
					else if (stat.tempLevel > stat.level)
						levelColor = font.CR_GREEN;
					
					DrawText(font, levelColor, center, String.Format("%d", stat.tempLevel), (100, -fHeight));
					DrawText(font, Font.CR_FIRE, center, stat.GetTag(), (300, -fHeight));
					DrawText(font, Font.CR_TAN, center, stat.description, (500, -fHeight));
					if (stat.currentBonus != "")
						DrawText(confont, Font.CR_WHITE, center, stat.currentBonus, (750, -confont.GetHeight()/2), 1.5);
				}
			}
		}
	}
	
	override void OnLeftRelease()
	{
		let owner = RPGPlayer(item.owner);
		if (owner)
		{
			let it = Stat(item);
			if (it)
			{
				if (!increment)
				{
					if (it.tempLevel > it.minLevel)
					{
						it.tempLevel -= 1;
						++owner.tempPoints;
						if (it.tempLevel < it.level)
							it.tempCost += it.cost;
							
						EventHandler.SendNetworkEvent("updatestat:"..it.GetClassName(), it.tempLevel);
					}
				}
				else if (owner.tempPoints > 0 && it.tempLevel < it.maxLevel)
				{
					it.tempLevel += 1;
					--owner.tempPoints;
					if (it.tempCost)
						it.tempCost -= it.cost;
						
					EventHandler.SendNetworkEvent("updatestat:"..it.GetClassName(), it.tempLevel);
				}
			}
		}
		
		super.OnLeftRelease();
	}
}

class ConfirmStatsButton : InteractiveBox
{
	override void OnHover()
	{
		Screen.DrawFrame(center.x-scaledW/2, center.y-scaledH/2, scaledW, scaledH);
	}
	
	override void Execute()
	{
		super.Execute();
		
		Font fnt = "BIGUPPER";
		int fHeight = fnt.GetHeight() / 2;
		int w = fnt.StringWidth("Center") / 2;
		DrawText(fnt, Font.CR_WHITE, center, "Confirm", (-w, -fHeight));
	}
	
	override void OnLeftRelease()
	{
		RPGMenuHandler.LevelPlayer();
		
		super.OnLeftRelease();
	}
}