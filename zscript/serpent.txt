class StalkerBox : HurtBox
{
	Default
	{
		Radius 3;
		Height 6;
		AttackSound "SerpentMeleeHit";
		ActiveSound "FighterPunchHitWall";
		DamageType "Cleave";
		HurtBox.AilmentPower 35;
		HurtBox.AilmentType "Bleed";
		HurtBox.AilmentDamage 5;
		HurtBox.BonusDamageType "Poison";
		HurtBox.BonusAilmentType "Poison";
		HurtBox.BonusAilmentPower 25;
		HurtBox.BonusAilmentDamage 3;
		HurtBox.SideOffset 8;
		HurtBox.UpOffset 4;
		
		+HURTBOX.NOREVERSE
	}
}

class ReforgedSwampMonster : RPGMonster replaces Serpent
{
	Default
	{
		RPGMonster.XP 30;
		RPGMonster.MinMissileCoolDown 175;
		RPGMonster.MaxMissileCoolDown 280;
		Health 90;
		PainChance 96;
		Speed 12;
		Radius 32;
		Height 70;
		Mass 0x7fffffff;
		SeeSound "SerpentSight";
		AttackSound "SerpentAttack";
		PainSound "SerpentPain";
		DeathSound "SerpentDeath";
		HitObituary "$OB_SERPENTHIT";
		Tag "$FN_SERPENT";
		DamageFactor "Poison", 0.75;
		DamageFactor "Illness", 0.75;
		DamageFactor "Fire", 0.75;
		DamageFactor "Electric", 1.25;
		
		+NOBLOOD
		+CANTLEAVEFLOORPIC
		+NONSHOOTABLE
		+STAYMORPHED
		+DONTBLAST
		+NOTELEOTHER
		+INVISIBLE
		-SHOOTABLE
		-RPGMONSTER.TRACKER
	}

	States
	{
		Spawn:
			SSPT H 1 A_MonsterLook;
			SSPT HH 1 A_MonsterWander;
			SSPT H 2 A_HumpWanderDecide;
			Loop;
			
		See:
			SSPT HH 1 A_MonsterChase("Melee", "Melee", CHF_NOPLAYACTIVE);
			SSPT H 2 A_SerpentHumpDecide;
			Loop;
			
		Surface:
			SSPT A 3 A_UnHideStalker;
			SSPT A 3 A_StartSound("SerpentBirth", CHAN_BODY);
			SSPT B 5;
			SSPT C 5;
			SSPT D 6 A_StalkerShootable;
		Walk:
			SSPT I 0 A_MonsterLook;
			SSPT I 5 A_MonsterWander;
			SSPT J 0 A_MonsterLook;
			SSPT J 5 A_MonsterWander;
			SSPT J 0 A_WalkDecide;
			Goto Dive;
			
		Parry:
			SSPT L 35 A_Pain;
			Goto Dive;
			
		Shock:
			SSPT L 9 A_StartSound(PainSound, CHAN_VOICE);
			SSPT L 9;
			SSPT L 9 A_StartSound(PainSound, CHAN_VOICE);
			SSPT L 9;
			SSPT L 9 A_StartSound(PainSound, CHAN_VOICE);
			SSPT L 9;
			SSPT L 9 A_StartSound(PainSound, CHAN_VOICE);
			SSPT L 9;
			Goto Dive;
			
		Pain:
			SSPT L 5;
			SSPT L 5 A_Pain;
		Dive:
			SSDV ABC 5;
			SSDV D 5 A_StalkerNonShootable;
			SSDV E 4 A_StartSound("SerpentActive", CHAN_BODY);
			SSDV F 4;
			SSDV GH 5;
			SSDV I 4;
			SSDV J 4 A_SerpentHide;
			Goto See;
			
		Melee:
			SSPT A 3 A_UnHideStalker;
			SSPT A 3 A_StartSound("SerpentBirth", CHAN_BODY);
			SSPT B 5;
			SSPT C 5;
			SSPT D 6 A_StalkerShootable;
		Attack:
			SSPT K 6 A_MonsterFaceTarget;
			SSPT L 5 A_MonsterFaceTarget;
			TNT1 A 0 A_SerpentChooseAttack;
			SSPT N 5 A_MonsterMelee("StalkerBox", 20, 5, 6, 64, 45, -50, minForw: -32);
			TNT1 A 0
			{
				if (CheckMelee3D())
					SetStateLabel("Attack");
			}
			Goto Dive;
				
		Missile:
			SSPT N 5 A_MonsterProjectile("SerpentRFX", 32);
			Goto Dive;
		
		Death:
			SSPT O 4;
			SSPT P 4 A_Scream;
			SSPT Q 4 A_NoBlocking;
			SSPT RSTUVWXYZ 4;
			Stop;
			
		XDeath:
			SSXD A 4;
			SSXD B 4 A_SpawnItemEx("SerpentHead", 0, 0, 45);
			SSXD C 4 A_NoBlocking;
			SSXD DE 4;
			SSXD FG 3;
			SSXD H 3 A_SerpentSpawnGibs;
			Stop;
			
		Ice:
			SSPT [ 5 A_FreezeDeath;
			SSPT [ 1 A_FreezeDeathChunks;
			Wait;
			
		Hump:
			SSPT H 3 A_SerpentUnHide;
			SSPT EFGEF 3 A_SerpentRaiseHump;
			SSPT GEF 3;
			SSPT GEFGE 3 A_SerpentLowerHump;
			SSPT F 3 A_SerpentHide;
			Goto See;
	}
	
	void A_StalkerShootable()
	{
		CreateBox("SwampHead");
	}
	
	void A_StalkerNonShootable()
	{
		for (uint i = 0; i < collisionBoxes.Size(); ++i)
		{
			if (collisionBoxes[i] is "SwampHead")
				collisionBoxes[i].Destroy();
		}
	}
	
	void A_UnHideStalker()
	{
		bInvisible = false;
		bShootable = true;
		bNonShootable = false;
		CreateBox("SwampBody");
	}

	void A_SerpentUnHide()
	{
		bInvisible = false;
		bShootable = true;
		bNonShootable = false;
		Floorclip = 24;
		CreateBox("StalkerHump");
	}

	void A_SerpentHide()
	{
		bInvisible = true;
		bShootable = false;
		bNonShootable = true;
		Floorclip = 0;
		for (uint i = 0; i < collisionBoxes.Size(); ++i)
		{
			if (collisionBoxes[i])
				collisionBoxes[i].Destroy();
		}
		collisionBoxes.Clear();
	}

	void A_SerpentRaiseHump()
	{
		Floorclip -= 4;
	}

	void A_SerpentLowerHump()
	{
		Floorclip += 4;
	}
	
	void A_HumpWanderDecide()
	{
		if (random[SerpentHump]() > 3)
			return;
		
		if (random[SerpentHump]() > 7)
		{
			SetStateLabel("Hump");
			A_StartSound ("SerpentActive", CHAN_BODY);
		}
		else
			SetStateLabel("Surface");
	}
	
	void A_WalkDecide()
	{
		if (random[SerpentHump]() > 15)
			SetStateLabel("Walk");
	}

	void A_SerpentHumpDecide()
	{
		if (random[SerpentHump]() > 3)
			return;
		
		SetStateLabel("Hump");
		A_StartSound ("SerpentActive", CHAN_BODY);
	}
	
	void A_SerpentChooseAttack()
	{
		if (!target || CheckMelee3D())
			return;
		
		SetState(MissileState);
	}

	void A_SerpentSpawnGibs()
	{
		static const class<Actor> GibTypes[] =
		{
			"SerpentGib3",
			"SerpentGib2",
			"SerpentGib1"
		};

		for (int i = 2; i >= 0; --i)
		{
			double x = (random[SerpentGibs]() - 128) / 16.;
			double y = (random[SerpentGibs]() - 128) / 16.;

			Actor mo = Spawn (GibTypes[i], Vec2OffsetZ(x, y, floorz + 1), ALLOW_REPLACE);
			if (mo)
			{
				mo.Vel.X = (random[SerpentGibs]() - 128) / 1024.f;
				mo.Vel.Y = (random[SerpentGibs]() - 128) / 1024.f;
				mo.Floorclip = 6;
			}
		}
	}
	
	override void InitializeAilments()
	{
		SetAilment(0, 'Shock');
		SetAilment(1, 'Chill');
		SetAilment(2, 'Flinch');
		SetAilment(3, 'Bleed');
	}
}

class ReforgedSwampMonsterLeader : ReforgedSwampMonster replaces SerpentLeader {}

class SwampBody : CollisionBox
{
	Default
	{
		Radius 32;
		Height 48;
	}
}

class SwampHead : CollisionBox
{
	Default
	{
		CollisionBox.Multi 1.5;
		CollisionBox.UpOffset 48;
		CollisionBox.Length 13;
		Radius 13;
		Height 16;
		
		+COLLISIONBOX.CRITICALZONE
	}
}

class StalkerHump : CollisionBox
{
	Default
	{
		CollisionBox.Length 32;
		Radius 16;
		Height 24;
		
		+COLLISIONBOX.ORIENTED
	}
}

class SerpentRFX : RPGMissile
{
	Default
	{
		Speed 15;
		Radius 4;
		Height 8;
		Damage 20;
		DamageType "Poison";
		RPGMissile.AilmentType "Poison";
		RPGMissile.AilmentPower 50;
		RPGMissile.AilmentDamage 5;
		RenderStyle "Add";
		DeathSound "SerpentFXHit";
		
		+ZDOOMTRANS
		-ACTIVATEIMPACT
		-ACTIVATEPCROSS
	}
	
	States
	{
		Spawn:
			SSFX A 0;
			SSFX A 3 Bright A_StartSound("SerpentFXContinuous", CHAN_BODY, 1.0, 1);
			SSFX BAB 3 Bright;
			Goto Spawn+1;
			
		Death:
			SSFX C 4 Bright A_StopSound(CHAN_BODY);
			SSFX DEFGH 4 Bright;
			Stop;
	}
}