class SwordBlock : BlockBox
{
	Default
	{
		Radius 16;
		Height 32;
		BlockBox.Width 6;
		BlockBox.Height 32;
		BlockBox.Roll 330;
		BlockBox.Length 2;
		BlockBox.BlockSound "FighterHammerHitWall";
		BlockBox.BlockReduction 0.4;
		BlockBox.ParryReduction 0.6;
		BlockBox.ParryWindow 5;
		BlockBox.ForwardOffset 32;
		BlockBox.UpOffset 24;
	}
}

class SwordBox : HurtBox
{
	Default
	{
		Radius 3;
		Height 2;
		DamageType "Cleave";
		HurtBox.AilmentPower 50;
		HurtBox.AilmentType "Bleed";
		HurtBox.AilmentDamage 15;
		HurtBox.BonusDamageType "Fire";
		HurtBox.BonusAilmentPower 75;
		HurtBox.BonusAilmentType "Burn";
		HurtBox.BonusAilmentDamage 15;
		HurtBox.BonusType "RedMana";
		HurtBox.BonusCost 2;
		HurtBox.ForwardOffset 16;
		ActiveSound "FighterHammerHitWall";
		AttackSound "FighterAxeHitThing";
		
		+HURTBOX.NOBONUSMULTI
	}
}

class RFWeaponPiece : WeaponPiece
{
	Default
	{
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "$TXT_QUIETUS_PIECE";
		Inventory.RestrictedTo "ReforgedFighter";
		WeaponPiece.Weapon "ReforgedQuietus";
		
		+FLOATBOB
	}
}

class RFWeaponPiece1 : RFWeaponPiece replaces FWeaponPiece1
{
	Default
	{
		WeaponPiece.Number 1;
	}
	
	States
	{
		Spawn:
			WFR1 A -1 Bright;
			Stop;
	}
}

class RFWeaponPiece2 : RFWeaponPiece replaces FWeaponPiece2
{
	Default
	{
		WeaponPiece.Number 2;
	}
	
	States
	{
		Spawn:
			WFR2 A -1 Bright;
			Stop;
	}
}

class RFWeaponPiece3 : RFWeaponPiece replaces FWeaponPiece3
{
	Default
	{
		WeaponPiece.Number 3;
	}
	
	States
	{
		Spawn:
			WFR3 A -1 Bright;
			Stop;
	}
}

class ReforgedQuietus : RPGMelee replaces FWeapQuietus
{
	Default
	{
		Health 3;
		RPGMelee.ShieldType "SwordBlock";
		Weapon.SelectionOrder 2900;
		Weapon.YAdjust 10;
		Weapon.AmmoUse2 5;
		Weapon.AmmoType1 "RedMana";
		Inventory.PickupMessage "$TXT_WEAPON_F4";
		Inventory.PickupSound "WeaponBuild";
		Tag "$TAG_FWEAPQUIETUS";
		
		+INVENTORY.NOATTENPICKUPSOUND
		+WEAPON.ALT_AMMO_OPTIONAL
	}

	States
	{
		Spawn:
			TNT1 A -1;
			Stop;
			
		Select:
			FSRD A 1 Bright A_Raise;
			Loop;
			
		Deselect:
			FSRD A 1 Bright A_Lower;
			Loop;
			
		Ready:
			FSRD AAAABBBBCCCC 1 Bright A_WeaponReady;
			Loop;
			
		Reload:
			FSRD D 2 Bright Offset (5, 36);
			FSRD E 2 Bright Offset (5, 36) A_MeleeBlock();
			FSRD F 1 Bright Offset (5, 36);
			TNT1 A 0 A_MeleeCheckBlock(2);
			FSRD F 1 Bright Offset (5, 36);
			FSRD E 2 Bright Offset (5, 36) A_MeleeUnblock();
			FSRD D 2 Bright Offset (5, 36);
			Goto Ready;
			
		Fire:
			FSRD DE 3 Bright Offset (5, 36);
			FSRD F 2 Bright Offset (5, 36) A_Melee("SwordBox", 150, 75, 5, 112, 90, -90, minForw: -32);
			FSRD G 3 Bright Offset (5, 36);
			FSRD H 2 Bright Offset (5, 36);
			FSRD I 2 Bright Offset (5, 36);
			FSRD I 10 Bright Offset (5, 150);
			FSRD A 1 Bright Offset (5, 60);
			FSRD B 1 Bright Offset (5, 55);
			FSRD C 1 Bright Offset (5, 50);
			FSRD A 1 Bright Offset (5, 45);
			FSRD B 1 Bright Offset (5, 40);
			Goto Ready;
			
		AltFire:
			FSRD DE 3 Bright Offset (5, 36);
			FSRD F 2 Bright Offset (5, 36) A_Melee("SwordBox", 250, 75, 5, 112, 90, -90, minForw: -32);
			FSRD G 3 Bright Offset (5, 36) A_FSwordAttack;
			FSRD H 2 Bright Offset (5, 36);
			FSRD I 2 Bright Offset (5, 36);
			FSRD I 10 Bright Offset (5, 150);
			FSRD A 1 Bright Offset (5, 60);
			FSRD B 1 Bright Offset (5, 55);
			FSRD C 1 Bright Offset (5, 50);
			FSRD A 1 Bright Offset (5, 45);
			FSRD B 1 Bright Offset (5, 40);
			TNT1 A 0 A_ReFire;
			Goto Ready;
	}

	action void A_FSwordAttack()
	{
		if (!player)
			return;

		Weapon weapon = player.ReadyWeapon;
		if (!weapon || weapon != invoker || !weapon.DepleteAmmo(weapon.bAltfire, true))
			return;
		
		let qt = QuietusThinker(Spawn("QuietusThinker", pos));
		if (!qt)
			return;
		
		double ang;
		double pch;
		double rol;
		switch (invoker.direction)
		{
			case DIR_RIGHT:
			case DIR_LEFT:
				ang = -45;
				pch = 0;
				rol = 0;
				break;
				
			case DIR_FORW:
				ang = 0;
				pch = -30;
				rol = 90;
				break;
				
			case DIR_BACK:
				ang = -20;
				pch = 30;
				rol = -70;
				break;
				
			default:
				ang = 30;
				pch = -20;
				rol = -30;
				if (player.refire % 2)
				{
					pch *= -1;
					rol *= -1;
				}
				break;
		}
		
		double angInterval = ang / 10;
		double pchInterval = pch / 10;
		Vector3 spawn = pos + (0,0,height/2 - floorclip + player.mo.AttackZOffset*player.crouchFactor);
		
		for (int i = 0; i < 21; ++i)
		{
			let missile = RPGMissile(Spawn("RFSwordMissile", spawn, ALLOW_REPLACE));
			if (missile)
			{
				missile.target = self;
				missile.angle = angle+ang;
				missile.roll = rol;
				missile.Vel3DFromAngle(missile.speed, missile.angle, pitch-pch);
				missile.master = qt;
				qt.children.Push(missile);
			}
			
			ang -= angInterval;
			pch -= pchInterval;
		}
		
		A_PlaySound("FighterSwordFire", CHAN_WEAPON);
	}
}

class QuietusThinker : Actor
{
	Array<RPGMissile> children;
	
	Default
	{
		+NOINTERACTION
	}
	
	override void Tick()
	{
		super.Tick();
		
		bool kill = true;
		for (int i = 0; i < children.Size(); ++i)
		{
			if (children[i])
			{
				kill = false;
				break;
			}
		}
		
		if (kill)
			Destroy();
	}
}

class RFSwordMissile : RPGMissile
{
	Default
	{
		Radius 4;
		Height 8;
		RPGMissile.Length 2;
		RPGMissile.Width 4;
		RPGMissile.Height 2;
		Speed 64;
		Damage 220;
		Scale 0.25;
		DamageType "Fire";
		RenderStyle "Add";
		DeathSound "FighterSwordExplode";
		Obituary "$OB_MPFWEAPQUIETUS";
		Threshold 16;
		
		+EXTREMEDEATH
		+ZDOOMTRANS
		+RPGMISSILE.PENETRATING
		+RPGMISSILE.ORIENTED
	}

	States
	{
		Spawn:
			FSFX ABC 3 Bright;
			Loop;
			
		Death:
			FSFX D 4 Bright;
			FSFX E 3 Bright A_FSwordFlames;
			FSFX F 4 Bright;
			FSFX G 3 Bright;
			FSFX H 4 Bright;
			FSFX I 3 Bright;
			FSFX J 4 Bright;
			FSFX KLM 3 Bright;
			Stop;
	}
	
	override int DoSpecialDamage(Actor victim, int damage, name damagetype)
	{
		int dmg = super.DoSpecialDamage(victim, damage, damagetype);
		
		if (dmg > -1 && master && master is 'QuietusThinker')
		{
			let qt = QuietusThinker(master);
			for (int i = 0; i < qt.children.Size(); ++i)
			{
				if (qt.children[i])
					qt.children[i].alreadyHit.Push(victim);
			}
		}
		
		return dmg;
	}
	
	override void Tick()
	{
		if (bMissile && radius < threshold && !isFrozen())
		{
			double c = abs(cos(roll));
			double s = abs(sin(roll));
			A_SetScale(scale.x + 0.5*c, scale.y + 0.5*s);
			A_SetSize(radius+2*c, height+4*s);
			width += 2;
		}
		
		super.Tick();
	}

	void A_FSwordFlames()
	{
		for (int i = random[FSwordFlame](1, 4); i; i--)
		{
			double xo = (random[FSwordFlame]() - 128) / 16.;
			double yo = (random[FSwordFlame]() - 128) / 16.;
			double zo = (random[FSwordFlame]() - 128) / 8.;
			Spawn ("FSwordFlame", Vec3Offset(xo, yo, zo), ALLOW_REPLACE);
		}
	}
}