enum EMouseInput
{
	MI_IGNORE = -1,
	MI_LEFTPRESS = 1,
	MI_RIGHTPRESS,
	MI_LEFTRELEASE,
	MI_RIGHTRELEASE,
	MI_LEFTHOLD,
	MI_RIGHTHOLD
}

enum EButtonInput
{
	BI_USE = 1,
	BI_CLOSE,
	BI_LCLICK,
	BI_RCLICK,
	BI_LHOLD,
	BI_RHOLD,
	BI_NEXT,
	BI_PREV
}

enum ENavigationDirection
{
	ND_LEFT = -1,
	ND_UP = ND_LEFT,
	ND_NONE = 0,
	ND_RIGHT = 1,
	ND_DOWN = ND_RIGHT
}

enum EMenuState
{
	MS_CLOSED,
	MS_INV,
	MS_STAT
}

enum EMoveDir
{
	MD_NONE,
	MD_LEFT,
	MD_UP,
	MD_RIGHT,
	MD_DOWN
}

class MenuHandler : EventHandler
{
	transient ui RPGPlayer player;
	transient ui Array<Inventory> items;
	transient ui Array<Inventory> keyItems;
	transient ui Array<Skill> skills;
	transient ui Array<Stat> stats;
	transient ui Array<Inventory> keys;
	
	transient ui TextureID cursor;
	transient ui Array<MenuElement> elements;
	transient ui Array<Tooltip> toolTips; // These get special handling since they should always be draw on top of everything
	transient ui MenuElement held; // Same for this one
	transient ui MenuElement oldHeld;
	
	transient ui MenuElement selected;
	transient ui bool bNavMode;
	transient ui int navTimer;
	transient ui Vector2 navDir;
	transient ui Array<MenuElement> navNodes;
	transient ui bool bSetNav;
	
	transient ui Vector2 mouse;
	transient ui int mouseAction;
	transient ui int oldMouseAction;
	transient ui int buttonAction;
	transient ui int oldButtonAction;
	
	transient ui bool bInitialized;
	transient ui int menuState;
	transient ui int oldMenuState;
	
	transient ui int totalCost;
	transient ui int oldPoints;
	
	ui void LevelPlayer()
	{
		if (!player)
			return;
		
		if (player.currentPoints == player.points && totalCost <= 0)
			return;
		
		if (player.currentXP < totalCost)
			return;
		
		string command = "levelup";
		
		for (uint i = 0; i < stats.Size(); ++i)
		{
			if (stats[i].currentLevel == stats[i].level)
				continue;
			
			stats[i].currentCost = 0;
			command.AppendFormat(":%s:%d", stats[i].GetClassName(), stats[i].currentLevel);
		}
		
		oldPoints = player.currentPoints;
		EventHandler.SendNetworkEvent(command, totalCost, player.currentPoints);
		S_StartSound("menu/choose", CHAN_AUTO);
	}
	
	// Sets the menu element nearest to the origin element
	ui void UpdateCollision(MenuElement origin, Vector2 pos, bool sameClass = false, bool exact = false)
	{
		if (!origin)
			return;
		
		for (uint i = 0; i < elements.Size(); ++i)
		{
			let probe = elements[i];
			if (probe && probe != origin)
				probe.CheckCollision(origin, pos, sameClass, exact);
		}
	}
	
	// This has to be done here since it can't be modified from UI scope
	void ResetWeaponPieces(uint player)
	{
		if (player >= MAXPLAYERS)
			return;
		
		for (let inv = players[player].mo.inv; inv; inv = inv.inv)
		{
			let wh = WeaponHolder(inv);
			if (wh && players[player].mo.FindInventory(wh.PieceWeapon))
				wh.PieceMask = 0;
		}
	}
	
	override void WorldTick()
	{
		for (uint i = 0; i < MAXPLAYERS; ++i)
		{
			if (!playerInGame[i] || !players[i].mo)
				continue;
			
			ResetWeaponPieces(i);
		}
	}
	
	override void UITick()
	{
		let mo = players[consoleplayer].mo;
		
		items.Clear();
		keyItems.Clear();
		keys.Clear();
		skills.Clear();
		stats.Clear();
		
		// Update items
		for (let probe = mo.inv; probe; probe = probe.inv)
		{
			if (!probe || probe.amount <= 0)
				continue;
			
			if (probe is "PuzzleItem")
				keyItems.Push(probe);
			else if (probe is "Key")
				keys.Push(probe);
			else if (probe is "Skill")
				skills.Push(Skill(probe));
			else if (probe is "Stat")
				stats.Push(Stat(probe));
			else if (probe.bInvBar)
				items.Push(probe);
		}
		
		player = RPGPlayer(players[consoleplayer].mo);
		
		// Update stats and skills
		if (player)
		{
			if (oldPoints < 0)
				oldPoints = 0;
			
			if (menuState != MS_STAT || player.points != oldPoints)
				player.currentPoints += player.points - oldPoints;
			
			oldPoints = player.points;
		}
		
		// Tick elements
		for (uint i = 0; i < elements.Size(); ++i)
		{
			if (elements[i])
				elements[i].Tick();
		}
		
		for (uint i = 0; i < toolTips.Size(); ++i)
		{
			if (toolTips[i])
				toolTips[i].Tick();
		}
		
		if (bSetNav && elements.Size())
		{
			if (!selected)
				selected = GetTopLeftNode(false);
			
			bSetNav = false;
		}
		
		if (navTimer > 0)
			--navTimer;
	}
	
	ui void ClearUI()
	{
		for (uint i = 0; i < elements.Size(); ++i)
		{
			if (elements[i])
				elements[i].Destroy();
		}
		elements.Clear();
		
		for (uint i = 0; i < toolTips.Size(); ++i)
		{
			if (toolTips[i])
				toolTips[i--].Destroy();
		}
		toolTips.Clear();
		
		navNodes.Clear();
		selected = null;
		held = null;
		
		mouseAction = oldMouseAction = 0;
		buttonAction = oldButtonAction = 0;
	}
	
	ui MenuElement GetNearestNode(int dir, bool inverted = false, bool sound = true)
	{
		if (!selected)
			return GetTopLeftNode(sound);
		
		if (dir == MD_NONE)
			return null;
		
		Vector2 pos, origin, size;
		[pos, origin, size] = selected.GetNavCollisionBox(dir, inverted);
		
		if (size.x <= 0 || size.y <= 0)
			return null;
		
		Vector2 oMax = origin + size;
		MenuElement el;
		double dist = double.max;
		for (uint i = 0; i < navNodes.Size(); ++i)
		{
			let node = navNodes[i];
			if (!node || node == selected)
				continue;
			
			Vector2 half = node.size / 2;
			Vector2 nMin = node.center - half;
			Vector2 nMax = node.center + half;
			
			if ((nMin.x < oMax.x && nMax.x > origin.x) &&
				(nMin.y < oMax.y && nMax.y > origin.y))
			{
				Vector2 temp = pos - node.center;
				double length = temp dot temp;
				if (length < dist)
				{
					el = node;
					dist = length;
				}
			}
		}
		
		if (sound && el && el != selected)
			S_StartSound("menu/backup", CHAN_AUTO);
		
		return el;
	}
	
	ui MenuElement GetTopLeftNode(bool sound = true)
	{
		MenuElement el;
		double dist = double.max;
		
		for (uint i = 0; i < navNodes.Size(); ++i)
		{
			if (!navNodes[i])
				continue;
			
			double length = navNodes[i].center dot navNodes[i].center;
			if (length < dist)
			{
				dist = length;
				el = navNodes[i];
			}
		}
		
		if (sound && el && el != selected)
			S_StartSound("menu/backup", CHAN_AUTO);
		
		return el;
	}
	
	ui MenuElement GetNodePos(Vector2 pos)
	{
		MenuElement el;
		for (uint i = 0; i < navNodes.Size(); ++i)
		{
			let node = navNodes[i];
			if (!node)
				continue;
			
			double w = node.size.x / 2;
			double h = node.size.y / 2;
				
			if (pos.x > (node.center.x-w) && pos.x < (node.center.x+w) &&
				pos.y > (node.center.y-h) && pos.y < (node.center.y+h))
			{
				el = node;
				break;
			}
		}
		
		if (el)
			return el;
		
		el = GetNearestNode(ND_LEFT, sound: false);
		if (!el)
			el = GetNearestNode(ND_RIGHT, sound: false);
		if (!el)
			el = GetTopLeftNode(false);
		
		return el;
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		int wOfs, hOfs, w, h;
		[wOfs, hOfs, w, h] = Screen.GetViewWindow();
		
		if (player)
		{
			player.hideElements = 0;
			if (menuState == MS_INV)
				player.hideElements |= (EL_ITEMS | EL_SKILLS);
			
			if (player.hideElements & EL_ITEMS)
				players[consoleplayer].inventorytics = 0;
		}
		
		if (!bInitialized)
		{
			mouse.x = wOfs + w/2;
			mouse.y = hOfs + h/2;
			
			cursor = TexMan.CheckForTexture("CURSOR", TexMan.Type_Any);
			
			bInitialized = true;
		}
		
		mouse.x = clamp(mouse.x, wOfs, wOfs+w);
		mouse.y = clamp(mouse.y, hOfs, hOfs+h);
		
		if (menuState != oldMenuState)
			S_StartSound("menu/choose", CHAN_AUTO);
		
		if (!menuState && oldMenuState)
			ClearUI();
		
		if (menuState)
		{
			if (mouseAction == oldMouseAction)
			{
				switch (mouseAction)
				{
					case MI_LEFTPRESS:
						mouseAction = MI_LEFTHOLD;
						break;
									
					case MI_RIGHTPRESS:
						mouseAction = MI_RIGHTHOLD;
						break;
							
					case MI_LEFTRELEASE:
					case MI_RIGHTRELEASE:
						mouseAction = 0;
						break;
				}
			}
			
			if (buttonAction == oldButtonAction)
				buttonAction = 0;
			
			if (menuState == MS_INV)
				DrawInventory();
			else if (menuState == MS_STAT)
				DrawStats();
			
			if (bNavMode && menuState != oldMenuState)
				bSetNav = true;
			
			if (bNavMode && selected)
			{
				if (navTimer <= 0)
				{
					MenuElement el;
					int dir = MD_NONE;
					
					if (selected.bVertical)
					{
						if (navDir.y == ND_UP)
							dir = MD_UP;
						else if (navDir.y == ND_DOWN)
							dir = MD_DOWN;
						
						el = GetNearestNode(dir);
						if (!el)
							el = GetNearestNode(dir, true);
							
						if (el && el != selected)
							selected = el;
					}
					
					el = null;
					dir = MD_NONE;
					
					if (selected.bHorizontal)
					{
						if (navDir.x == ND_LEFT)
							dir = MD_LEFT;
						else if (navDir.x == ND_RIGHT)
							dir = MD_RIGHT;
						
						el = GetNearestNode(dir);
						if (!el)
							el = GetNearestNode(dir, true);
							
						if (el && el != selected)
							selected = el;
					}
					
					if (navTimer < 0)
						navTimer = Thinker.TICRATE / 3;
					else
						navTimer = Thinker.TICRATE / 6;
				}
			}
			
			if (held && !held.bHeld)
				held = null;
			
			for (uint i = 0; i < elements.Size(); ++i)
			{
				if (elements[i])
					elements[i].Execute(e.fracTic);
			}
			
			for (uint i = 0; i < toolTips.Size(); ++i)
			{
				if (toolTips[i])
					toolTips[i].Execute(e.fracTic);
			}
			
			if (bNavMode && selected && !selected.bHeld)
				selected.DrawBorder("FF FF FF", 3);
			
			if (oldHeld == held && held)
				held.Execute(e.fracTic);
			
			if (!bNavMode)
				Screen.DrawTexture(cursor, false, mouse.x, mouse.y, DTA_TopOffset, 0, DTA_LeftOffset, 0);
			
			oldMouseAction = mouseAction;
			oldButtonAction = buttonAction;
			oldHeld = held;
		}
		
		oldMenuState = menuState;
	}
	
	ui void DrawInventory()
	{
		if (oldMenuState != MS_INV)
		{
			ClearUI();
			
			DrawItems();
			DrawKeyItems();
			DrawArmor();
			DrawPieces();
			DrawKeys();
			DrawSkills();
		}
	}
	
	ui void DrawArmor()
	{
		let head = ArmorBox(MenuElement.Create("ArmorBox", self, (1425, 150), (100, 100)));
		if (head)
		{
			head.type = ArmorBox.AT_HEAD;
			elements.Push(head);
		}
			
		let amul = ArmorBox(MenuElement.Create("ArmorBox", self, (1525, 150), (100, 100)));
		if (amul)
		{
			amul.type = ArmorBox.AT_AMUL;
			elements.Push(amul);
		}
		
		let shield = ArmorBox(MenuElement.Create("ArmorBox", self, (1325, 250), (100, 100)));
		if (shield)
		{
			shield.type = ArmorBox.AT_SHIELD;
			elements.Push(shield);
		}
		
		let chest = ArmorBox(MenuElement.Create("ArmorBox", self, (1425, 250), (100, 100)));
		if (chest)
		{
			chest.type = ArmorBox.AT_CHEST;
			elements.Push(chest);
		}
		
		let brace = ArmorBox(MenuElement.Create("ArmorBox", self, (1525, 250), (100, 100)));
		if (brace)
		{
			brace.type = ArmorBox.AT_BRACE;
			elements.Push(brace);
		}
	}
	
	ui void DrawItems()
	{
		let can = MenuElement.Create("ItemCanvas", self, (650,300), (1100,400));
		if (can)
			elements.Push(can);
	}
	
	ui void DrawKeyItems()
	{
		let can = MenuElement.Create("KeyItemCanvas", self, (650,775), (1100,500));
		if (can)
			elements.Push(can);
	}
	
	ui void DrawSkills()
	{
		if (!player)
			return;
		
		int wOfs = 1375;
		for (uint i = 0; i < player.skillSlots; ++i)
		{
			let sk = SkillBox(MenuElement.Create("SkillBox", self, (wOfs,975), (100,100)));
			if (sk)
			{
				sk.slot = i;
				elements.Push(sk);
			}
			
			wOfs += 100;
		}
	}
	
	ui void DrawKeys()
	{
		let can = MenuElement.Create("KeyCanvas", self, (1547,456), (545,87));
		if (can)
			elements.Push(can);
	}
	
	ui void DrawPieces()
	{
		if (!player)
			return;
		
		let can = WeaponPieceCanvas(MenuElement.Create("WeaponPieceCanvas", self, (1734,196), (171,108)));
		if (can)
		{
			if (player is "ReforgedMage")
				can.SetWeapon(WT_WRAI);
			else if (player is "ReforgedCleric")
				can.SetWeapon(WT_PURI);
			else if (player is "ReforgedFighter")
				can.SetWeapon(WT_ZWEI);
			
			elements.Push(can);
		}
	}
	
	ui void DrawStats()
	{
		if (oldMenuState != MS_STAT)
		{
			ClearUI();
			
			let can = MenuElement.Create("StatCanvas", self, (960,500), (1320,780));
			if (can)
				elements.Push(can);
		}
		
		totalCost = 0;
		for (uint i = 0; i < stats.Size(); ++i)
		{
			if (stats[i])
				totalCost += stats[i].currentCost;
		}
	}
	
	ui bool CheckKeyBind(int keyScan, String alias)
	{
		if (!keyScan)
			return false;
		
		int key1, key2;
		[key1, key2] = Bindings.GetKeysForCommand(alias);
		
		return (key1 == keyScan || key2 == keyScan);
	}

	override bool InputProcess(InputEvent e)
	{
		if (!menuState)
		{
			if (e.keyScan >= InputEvent.Key_Pad_LThumb_Right && e.keyScan <= Inputevent.Key_Pad_Y)
				bNavMode = true;
			else
				bNavMode = false;
			
			return false;
		}
		
		mouse.x += e.mouseX*0.25;
		mouse.y += e.mouseY*-1.5;
		
		bool curNav = bNavMode;
		int mAct, bAct, nav;
		if (e.Type == InputEvent.Type_KeyDown)
		{
			switch (e.keyScan)
			{
				case InputEvent.Key_Mouse1:
					if (mouseAction == MI_RIGHTHOLD)
						mAct = MI_IGNORE;
					else
						mAct = MI_LEFTPRESS;
					break;
						
				case InputEvent.Key_Mouse2:
					if (mouseAction == MI_LEFTHOLD)
						mAct = MI_IGNORE;
					else
						mAct = MI_RIGHTPRESS;
					break;
					
				case InputEvent.Key_Pad_DPad_Right:
				case InputEvent.Key_RightArrow:
					nav = 1;
					navDir.x += ND_RIGHT;
					break;
					
				case InputEvent.Key_Pad_DPad_Left:
				case InputEvent.Key_LeftArrow:
					nav = 1;
					navDir.x += ND_LEFT;
					break;
					
				case InputEvent.Key_Pad_DPad_Up:
				case InputEvent.Key_UpArrow:
					nav = 1;
					navDir.y += ND_UP;
					break;
					
				case InputEvent.Key_Pad_DPad_Down:
				case InputEvent.Key_DownArrow:
					nav = 1;
					navDir.y += ND_DOWN;
					break;
					
				case InputEvent.Key_Pad_A:
				case InputEvent.Key_Enter:
					bAct = BI_LCLICK;
					break;
					
				case InputEvent.Key_Pad_B:
				case InputEvent.Key_Backspace:
					bAct = BI_RCLICK;
					break;
					
				case InputEvent.Key_Pad_X:
				case InputEvent.Key_Space:
					bAct = BI_LHOLD;
					break;
					
				case InputEvent.Key_Pad_Y:
				case InputEvent.Key_Tab:
					bAct = BI_RHOLD;
					break;
					
				case InputEvent.Key_Pad_LTrigger:
				case InputEvent.Key_PgUp:
					bAct = BI_NEXT;
					break;
					
				case InputEvent.Key_Pad_RTrigger:
				case InputEvent.Key_PgDn:
					bAct = BI_PREV;
					break;
			}
				
			if (!bAct)
			{
				if (CheckKeyBind(e.keyScan, "+use"))
				{
					if (menuState == MS_STAT)
						LevelPlayer();
							
					menuState = MS_CLOSED;
					bAct = BI_CLOSE;
				}
				else if (menuState == MS_INV && CheckKeyBind(e.keyScan, "invuse"))
					bAct = BI_USE;
			}
		}
		else if (e.Type == InputEvent.Type_KeyUp)
		{
			switch (e.keyScan)
			{	
				case InputEvent.Key_Mouse1:
					if (mouseAction == MI_RIGHTHOLD)
						mAct = MI_IGNORE;
					else
						mAct = MI_LEFTRELEASE;
					break;
						
				case InputEvent.Key_Mouse2:
					if (mouseAction == MI_LEFTHOLD)
						mAct = MI_IGNORE;
					else
						mAct = MI_RIGHTRELEASE;
					break;
					
				case InputEvent.Key_Pad_DPad_Right:
				case InputEvent.Key_RightArrow:
					nav = -1;
					navDir.x -= ND_RIGHT;
					break;
					
				case InputEvent.Key_Pad_DPad_Left:
				case InputEvent.Key_LeftArrow:
					nav = -1;
					navDir.x -= ND_LEFT;
					break;
					
				case InputEvent.Key_Pad_DPad_Up:
				case InputEvent.Key_UpArrow:
					nav = -1;
					navDir.y -= ND_UP;
					break;
					
				case InputEvent.Key_Pad_DPad_Down:
				case InputEvent.Key_DownArrow:
					nav = -1;
					navDir.y -= ND_DOWN;
					break;
			}
		}
		
		if (mAct && mAct != MI_IGNORE)
			mouseAction = mAct;
		if (bAct)
			buttonAction = bAct;
		if (nav == 1)
			navTimer = -1;
		
		if (bAct == BI_NEXT || bAct == BI_PREV)
		{
			if (menuState == MS_INV)
				menuState = MS_STAT;
			else if (menuState == MS_STAT)
			{
				player.currentPoints = player.points;
				menuState = MS_INV;
			}
		}
		
		bool usedMouse = (e.Type == InputEvent.Type_Mouse || mAct);
		if (usedMouse)
			bNavMode = false;
		else if (nav)
		{
			bNavMode = true;
			if (!selected)
			{
				selected = GetTopLeftNode();
				navTimer = Thinker.TICRATE / 3;
			}
		}
		
		if (curNav != bNavMode)
		{
			if (held)
				held.Clear();
			
			held = null;
			if (bNavMode)
				navTimer = Thinker.TICRATE / 3;
		}
		
		if (usedMouse || bAct || nav)
			return true;
		
		return false;
	}
	
	override void ConsoleProcess(ConsoleEvent e)
	{
		if (e.Name ~== "ToggleInventory")
		{
			if (menuState == MS_INV)
				menuState = MS_CLOSED;
			else
			{
				player.currentPoints = player.points;
				menuState = MS_INV;
			}
		}
		else if (e.Name ~== "ToggleStats")
		{
			if (menuState == MS_STAT)
			{
				player.currentPoints = player.points;
				menuState = MS_CLOSED;
			}
			else
				menuState = MS_STAT;
		}
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.IsManual)
			return;
		
		Array<string> command;
		e.Name.Split(command, ":");
				
		int size = command.Size();
		if (size == 2)
		{
			if (command[0] ~== "drop")
			{
				let inv = players[e.Player].mo.FindInventory(command[1]);
				if (inv)
					players[e.Player].mo.DropInventory(inv);
			}
			else if (command[0] ~== "use")
			{
				let inv = players[e.Player].mo.FindInventory(command[1]);
				if (inv)
					players[e.Player].mo.UseInventory(inv);
			}
			else if (command[0] ~== "swapskill")
			{
				let rpg = RPGPlayer(players[e.Player].mo);
				if (!rpg || e.args[0] >= rpg.skillSlots)
					return;
				
				if (command[1] ~== "null")
					rpg.SetActiveSkill(e.args[0]);
				else
					rpg.SetActiveSkill(e.args[0], (class<Skill>)(command[1]));
			}
		}
		else
		{
			if (command[0] ~== "levelup")
			{
				let rpg = RPGPlayer(players[e.Player].mo);
				if (!rpg)
					return;
					
				for (int i = 1; i < command.Size(); i += 2)
				{
					let stat = Stat(rpg.FindInventory(command[i]));
					if (stat)
						stat.LevelUp(command[i+1].ToInt(10) - stat.level);
				}
					
				rpg.currentXP -= e.args[0];
				rpg.points = e.args[1];
			}
			else if (command[0] ~== "swapitem")
			{
				let swapper = players[e.Player].mo.FindInventory(command[1]);
				let swappee = players[e.Player].mo.FindInventory(command[2]);
					
				if (!swapper || !swappee)
					return;
					
				Inventory swapperPrev, swappeePrev;
				for (let probe = players[e.Player].mo.inv; probe; probe = probe.inv)
				{
					if (probe.inv == swapper)
						swapperPrev = probe;
					else if (probe.inv == swappee)
						swappeePrev = probe;
						
					if (swapperPrev && swappeePrev)
						break;
				}
					
				if (swapperPrev)
					swapperPrev.inv = swappee;
				else
					players[e.Player].mo.inv = swappee;
					
				if (swappeePrev)
					swappeePrev.inv = swapper;
				else
					players[e.Player].mo.inv = swapper;
					
				let temp = swappee.inv;
				swappee.inv = swapper.inv;
				swapper.inv = temp;
			}
		}
	}
}