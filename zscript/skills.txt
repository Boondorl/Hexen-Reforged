class Skill : Inventory abstract
{
	private meta String description;
	
	ui bool discovered;
	
	int cost;
	int drain;
	int drainInterval;
	class<Inventory> type;
	class<Inventory> reserveType;
	class<Inventory> drainType;
	class<Inventory> reserveDrainType;
	int coolDown;
	int castTime;
	int actionInterval;
	class<Buff> buffType;
	double range;
	class<Weapon> activeWeapon;
	class<CastWeapon> cast;
	string weaponName;
	
	bool bActive;
	bool bInCast;
	bool bInCoolDown;
	bool bCurToggle;
	
	private int drainTimer;
	int coolDownTimer;
	int castTimer;
	private int actionTimer;
	
	property Cost : cost;
	property Drain : drain;
	property DrainInterval : drainInterval;
	property ActionInterval : actionInterval;
	property CoolDown : coolDown;
	property CastTime : castTime;
	property Type : type;
	property ReserveType : reserveType;
	property DrainType : drainType;
	property ReserveDrainType : reserveDrainType;
	property BuffType : buffType;
	property Range : range;
	property ActiveWeapon : activeWeapon;
	property WeaponName : weaponName;
	property Cast : cast;
	property Description : description;
	
	deprecated("3.7") private int skillFlags;
	flagdef NoEffect: skillFlags, 0;
	flagdef Toggle: skillFlags, 1;
	flagdef AreaBuff: skillFlags, 2;
	flagdef GlobalBuff: skillFlags, 3;
	flagdef SpecialDrain: skillFlags, 4;
	
	Default
	{
		+INVENTORY.UNDROPPABLE
		+NOBLOCKMAP
	}
	
	override void Tick() {}
	
	override void DoEffect()
	{
		if (owner.health <= 0)
		{
			if (bCurToggle)
			{
				bCurToggle = false;
				EndSkill();
			}
			
			return;
		}
		
		if (castTimer > 0)
		{
			--castTimer;
			if (castTimer <= 0)
			{
				bInCast = false;
				if (coolDown > 0)
				{
					coolDownTimer = coolDown;
					let rpg = RPGPlayer(owner);
					if (rpg)
						coolDownTimer *= rpg.coolDownModifier;
					
					bInCoolDown = true;
				}
			}
		}
		
		if (coolDownTimer > 0)
		{
			--coolDownTimer;
			if (coolDownTimer <= 0)
				bInCoolDown = false;
		}
		
		if (!bNoEffect && actionTimer++ >= actionInterval)
		{
			actionTimer = 0;
			Effect();
		}
		
		if (drain && drainType)
		{
			if (bCurToggle)
			{
				if (drainTimer++ >= drainInterval)
				{
					if (!CheckAmmo(drain, drainType, reserveDrainType))
					{
						bCurToggle = false;
						EndSkill();
					}
					else if (!bSpecialDrain)
						TakeAmmo(drain, drainType, reserveDrainType);
					
					drainTimer = 0;
				}
			}
			else
				drainTimer = 0;
		}
	}
	
	override bool Use(bool pickup)
	{
		if (pickup || owner.health <= 0)
			return false;
		
		if (bInCast || owner.player.ReadyWeapon is "CastWeapon")
		{
			Console.Printf(Stringtable.Localize("$WARN_CASTING"));
			return false;
		}
		else if (bInCoolDown)
		{
			Console.Printf(Stringtable.Localize("$WARN_COOLDOWN"));
			return false;
		}
		
		if (activeWeapon && (!owner.player.ReadyWeapon || owner.player.ReadyWeapon.GetClass() != activeWeapon))
		{
			Console.Printf(Stringtable.Localize("$WARN_YOUMUST").." "..Stringtable.Localize(weaponName).." "..Stringtable.Localize("$WARN_TOUSE"));
			return false;
		}
		
		if ((!bCurToggle && !CheckAmmo(cost, type, reserveType)) ||
			(bToggle && bSpecialDrain && !CheckAmmo(drain, drainType, reserveDrainType)))
		{
			Console.Printf(Stringtable.Localize("$WARN_NOAMMO"));
			return false;
		}
		
		if (!bCurToggle)
			TakeAmmo(cost, type, reserveType);
			
		let rpg = RPGPlayer(owner);
		if (castTime > 0)
		{
			castTimer = castTime;
			if (rpg)
				castTimer *= rpg.attackModifier;
			
			bInCast = true;
		}
		else if (coolDown > 0)
		{
			coolDownTimer = coolDown;
			if (rpg)
				coolDownTimer *= rpg.coolDownModifier;
				
			bInCoolDown = true;
		}
			
		if (bToggle)
			bCurToggle = !bCurToggle;
			
		if (cast)
			SetWeapon(cast);
			
		if (!bToggle || bCurToggle)
			UseSkill();
		else
			EndSkill();
		
		return false;
	}
	
	virtual void UseSkill() {}
	
	virtual void EndSkill() {}
	
	virtual void Effect() {}
	
	virtual void OnEquip() {}
	
	virtual void OnUnequip() {}
	
	bool CheckAmmo(int amt, class<Inventory> type1, class<Inventory> type2 = null)
	{
		if (amt <= 0 || sv_infiniteammo || owner.FindInventory("PowerInfiniteAmmo"))
			return true;
		
		if (type1 == "Health")
		{
			if (owner.health <= amt)
				return false;
			
			return true;
		}
		
		int amount1, amount2;
		let ammo1 = owner.FindInventory(type1);
		if (ammo1)
			amount1 = ammo1.amount;
		
		let ammo2 = owner.FindInventory(type2);
		if (ammo2)
			amount2 = ammo2.amount;
		
		if (amount1+amount2 < amt)
			return false;
		
		return true;
	}
	
	void TakeAmmo(int amt, class<Inventory> type1, class<Inventory> type2 = null)
	{
		if (amt <= 0 || sv_infiniteammo || owner.FindInventory("PowerInfiniteAmmo"))
			return;
		
		if (type1 == "Health")
		{
			owner.health -= amt;
			if (owner.player)
				owner.player.health -= amt;
			
			return;
		}
		
		bool useNormal, useReserve;
		let ammo1 = owner.FindInventory(type1);
		if (ammo1)
		{
			if (ammo1.amount < amt)
				useReserve = true;
			
			if (ammo1.amount > 0)
				useNormal = true;
		}
		
		let ammo2 = owner.FindInventory(type2);
		
		if (useNormal || useReserve)
		{
			int realCost = amt;
									
			if (ammo1 && useNormal)
			{
				int take = min(ammo1.amount, amt);
				realCost -= take;
				ammo1.amount -= take;
			}
									
			if (ammo2 && useReserve)
				ammo2.amount -= realCost;
		}
	}
	
	void GiveBuff(Actor mast, Actor other = null)
	{
		if (!mast)
			return;
		
		if (bAreaBuff)
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor");
			Actor mo;
			while (mo = Actor(it.Next()))
			{
				if (mo == mast || ((bGlobalBuff || mast.Distance3DSquared(mo) <= (mast.radius+range+mo.radius)**2) && mast.IsFriend(mo)))
					CheckDuplicate(mast, mo);
			}
		}
		else
		{
			Actor receiver = other ? other : mast;
			CheckDuplicate(mast, receiver);
		}
	}
	
	private void CheckDuplicate(Actor mast, Actor mo)
	{
		if (!mo)
			return;
		
		let dup = Buff(mo.FindInventory(buffType));
		if (dup)
			dup.ResetDuration();
		else
		{
			mo.GiveInventoryType(buffType);
		
			let buff = mo.FindInventory(buffType);
			if (buff)
				buff.master = mast;
		}
	}
	
	void TakeBuff(Actor mast = null)
	{
		if (!mast)
			owner.TakeInventory(buffType, 1);
		else if (bAreaBuff)
		{
			ThinkerIterator it = ThinkerIterator.Create(buffType, STAT_DEFAULT);
			Buff mo;
			while (mo = Buff(it.Next()))
			{
				if (mo && mo.owner == mast)
					mo.owner.TakeInventory(buffType, 1);
			}
		}
	}
	
	void SetWeapon(class<CastWeapon> weap)
	{
		if (!weap)
			return;
		
		let mo = CastWeapon(Spawn(weap));
		if (mo)
		{
			owner.player.pendingWeapon = WP_NOCHANGE;
			mo.AttachToOwner(owner);
			mo.prevWeapon = owner.player.ReadyWeapon;
			owner.player.ReadyWeapon = mo;
			let psp = owner.player.GetPSprite(PSP_WEAPON);
			if (psp)
				psp.SetState(mo.GetUpState());
		}
	}
	
	clearscope String GetDescription() const
	{
		return Stringtable.Localize(description);
	}
}

class BuffManager : Inventory
{
	Array<Buff> buffs;
	
	Default
	{
		+INVENTORY.UNDROPPABLE
		+NOBLOCKMAP
	}
	
	override void Tick() {}
	
	override void DoEffect()
	{
		buffs.Clear();
		
		if (!owner)
			return;
		
		for (let probe = owner.inv; probe; probe = probe.inv)
		{
			let bf = Buff(probe);
			if (bf)
				buffs.Push(bf);
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if (!buffs.Size())
			return;
		
		for (int i = 0; i < buffs.Size(); ++i)
		{
			let bf = buffs[i];
			if (!bf || (!bf.bOffensive && !bf.bDefensive))
				continue;
			
			int boost = ApplyDamageFactors(bf.GetClass(), damageType, damage, damage) - damage;
			if (!boost)
				continue;
			
			if (bf.bStackable)
				boost *= bf.stacks;
			
			if ((bf.bDefensive && passive) || (bf.bOffensive && !passive))
				newdamage += boost;
		}
	}
}

class Buff : Inventory abstract
{
	int duration;
	int actionInterval;
	int maxStacks;
	int stacks;
	double range;
	int cost;
	class<Inventory> type;
	class<Inventory> reserveType;
	
	int durationTimer;
	private int actionTimer;
	
	property Duration : duration;
	property ActionInterval : actionInterval;
	property MaxStacks : maxStacks;
	property Range : range;
	property Cost : cost;
	property Type : type;
	property ReserveType : reserveType;
	
	deprecated("3.7") private int buffFlags;
	flagdef NoEffect: buffFlags, 0;
	flagdef Infinite: buffFlags, 1;
	flagdef Stackable: buffFlags, 2;
	flagdef LoseStack: buffFlags, 3;
	flagdef Offensive: buffFlags, 4;
	flagdef Defensive: buffFlags, 5;
	
	Default
	{
		+NODAMAGETHRUST
		+INVENTORY.UNDROPPABLE
		+NOBLOCKMAP
	}
	
	override void Tick() {}
	
	override void DoEffect()
	{
		if (owner.health <= 0)
		{
			Destroy();
			return;
		}
		
		if (!bNoEffect && ++actionTimer >= actionInterval)
		{
			actionTimer = 0;
			Effect();
		}
		
		if (!bInfinite && durationTimer++ >= duration)
		{
			if (bStackable && bLoseStack)
			{
				durationTimer = 0;
				if (--stacks <= 0)
					Destroy();
			}
			else
				Destroy();
		}
	}
	
	virtual void Effect() {}
	
	virtual void ThingDied(Actor thing, Actor inflictor) {}
	
	virtual void OnDamage(Actor inflictor, Actor source, int dmg) {}
	
	virtual void DealtDamage(Actor damaged, int dmg) {}
	
	virtual void MissileFired(Actor missile) {}
	
	void ResetDuration()
	{
		durationTimer = 0;
		if (bStackable && stacks < maxStacks)
			++stacks;
	}
	
	void TakeAmmo(int amt, class<Inventory> type1, class<Inventory> type2 = null)
	{
		if (amt <= 0 || sv_infiniteammo || owner.FindInventory("PowerInfiniteAmmo"))
			return;
		
		bool useNormal, useReserve;
		let ammo1 = owner.FindInventory(type1);
		if (ammo1)
		{
			if (ammo1.amount < amt)
				useReserve = true;
			
			if (ammo1.amount > 0)
				useNormal = true;
		}
		
		let ammo2 = owner.FindInventory(type2);
		
		if (useNormal || useReserve)
		{
			int realCost = amt;
									
			if (ammo1 && useNormal)
			{
				int take = min(ammo1.amount, amt);
				realCost -= take;
				ammo1.amount -= take;
			}
									
			if (ammo2 && useReserve)
				ammo2.amount -= realCost;
		}
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		stacks = 1;
		if (maxStacks <= 0)
			maxStacks = 1;
	}
}