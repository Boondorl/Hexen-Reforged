class ReforgedCleric : RPGPlayer
{
	Default
	{
		Radius 16;
		Height 64;
		PainSound "PlayerClericPain";
		Player.JumpZ 9;
		Player.Viewheight 48;
		Player.SpawnClass "Cleric";
		Player.DisplayName "Cleric";
		Player.SoundClass "cleric";
		Player.ScoreIcon "CLERFACE";
		Player.StartItem "ReforgedMace";
		Player.StartItem "HelmetPiece";
		Player.StartItem "BlueMana", 100;
		Player.StartItem "GreenMana", 100;
		Player.StartItem "RedMana", 0;
		Player.Portrait "P_CWALK1";
		Player.WeaponSlot 1, "ReforgedMace";
		Player.WeaponSlot 2, "ReforgedStaff";
		Player.WeaponSlot 3, "ReforgedFlame";
		Player.WeaponSlot 4, "CWeapWraithverge";
		
		Player.ColorRange 146, 163;
		Player.Colorset		0, "$TXT_COLOR_BLUE",		146, 163,    161;
		Player.ColorsetFile 1, "$TXT_COLOR_RED",		"TRANTBL7",  0xB3;
		Player.ColorsetFile 2, "$TXT_COLOR_GOLD",		"TRANTBL8",  0x8C;
		Player.ColorsetFile 3, "$TXT_COLOR_DULLGREEN",	"TRANTBL9",  0x41;
		Player.ColorsetFile 4, "$TXT_COLOR_GREEN",		"TRANTBLA",  0xC9;
		Player.ColorsetFile 5, "$TXT_COLOR_GRAY",		"TRANTBLB",  0x30;
		Player.ColorsetFile 6, "$TXT_COLOR_BROWN",		"TRANTBLC",  0x72;
		Player.ColorsetFile 7, "$TXT_COLOR_PURPLE",		"TRANTBLD",  0xEE;
		
		+NOSKIN
	}
	
	States
	{
		Spawn:
			CLER A -1;
			Stop;
			
		See:
			CLER ABCD 4;
			Loop;
			
		Pain:
			CLER H 4;
			CLER H 4 A_Pain;
			Goto Spawn;
			
		Missile:
		Melee:
			CLER EFG 6;
			Goto Spawn;
			
		Death:
			CLER I 6;
			CLER J 6 A_PlayerScream;
			CLER KL 6;
			CLER M 6 A_NoBlocking;
			CLER NOP 6;
			CLER Q -1;
			Stop;	
			
		XDeath:
			CLER R 5 A_PlayerScream;
			CLER S 5;
			CLER T 5 A_NoBlocking;
			CLER UVWXYZ 5;
			CLER [ -1;
			Stop;
			
		Ice:
			CLER \ 5 A_FreezeDeath;
			CLER \ 1 A_FreezeDeathChunks;
			Wait;
			
		Burn:
			FDTH C 5 BRIGHT A_PlaySound("*burndeath");
			FDTH D 4 BRIGHT;
			FDTH G 5 BRIGHT;
			FDTH H 4 BRIGHT A_PlayerScream;
			FDTH I 5 BRIGHT;
			FDTH J 4 BRIGHT;
			FDTH K 5 BRIGHT;
			FDTH L 4 BRIGHT;
			FDTH M 5 BRIGHT;
			FDTH N 4 BRIGHT;
			FDTH O 5 BRIGHT;
			FDTH P 4 BRIGHT;
			FDTH Q 5 BRIGHT;
			FDTH R 4 BRIGHT;
			FDTH S 5 BRIGHT A_NoBlocking;
			FDTH T 4 BRIGHT;
			FDTH U 5 BRIGHT;
			FDTH V 4 BRIGHT;
			ACLO E 35 A_CheckPlayerDone;
			Wait;
			ACLO E 8;
			Stop;
	}
	
	override void InitializeSkills()
	{
		GiveInventoryType("Heal");
		GiveInventoryType("Toxin");
		
		SetActiveSkill(0, "Heal");
		SetActiveSkill(1, "Toxin");
	}
	
	override void InitializeStats()
	{
		super.InitializeStats();
		
		for (let probe = inv; probe; probe = probe.inv)
		{
			let st = Stat(probe);
			if (!st)
				continue;
				
			let cls = st.GetClass();
			if (cls == "Agility" || cls == "Wisdom" || cls == "Dexterity" || cls == "Vitality")
				st.LevelUp(1, true);
		}
	}
	
	override void LevelUp(bool cheat)
	{
		super.LevelUp(cheat);
		
		switch (currentLevel)
		{
			case 2:
				GiveInventoryType("Prayer");
				break;
				
			case 3:
				GiveInventoryType("Ignite");
				break;
				
			case 5:
				GiveInventoryType("Blight");
				GiveInventoryType("Blessing");
				break;
				
			case 8:
				GiveInventoryType("DivineHeal");
				GiveInventoryType("Proselytize");
				break;
				
			case 11:
				GiveInventoryType("DivineWrath");
				break;
		}
	}
}

class Heal : Skill
{
	Default
	{
		Tag "$TAG_HEAL";
		Skill.Description "$DESC_HEAL";
		Skill.Cost 13;
		Skill.Type "GreenMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 175;
		Skill.CoolDown 350;
		Skill.BuffType "HealBuff";
		Inventory.Icon "PTN1A0";
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
}

class HealBuff : Buff
{
	Default
	{
		Buff.Duration 175;
		Buff.ActionInterval 7;
		Inventory.Icon "PTN1A0";
	}
	
	override void Effect()
	{
		owner.player.mo.GiveBody(1);
	}
}

class Toxin : Skill
{
	Default
	{
		Tag "$TAG_TOXIN";
		Skill.Description "$DESC_TOXIN";
		Skill.Cast "ToxinHands";
		Skill.Cost 5;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 53;
		Inventory.Icon "D2FXA1";
	}
}

class ToxinCloud : AreaOfEffect
{
	Default
	{
		Speed 16;
		Radius 5;
		Height 10;
		AreaOfEffect.AilmentType "Poison";
		AreaOfEffect.AilmentPower 100;
		AreaOfEffect.AilmentDamage 15;
		Alpha 0.5;
		RenderStyle "Add";
		Threshold 175;
		
		+AREAOFEFFECT.SPHERICAL
		+NOGRAVITY
	}
	
	States
	{
		Spawn:
			D2FX ABCDEF 4 Bright;
			Loop;
			
		Death:
			D2FX GHIJ 4 Bright;
			D2FX KL 3 Bright;
			Stop;
	}
	
	override void Tick()
	{
		if (IsFrozen())
			return;
		
		if (!(GetAge() % 2) && speed > 0)
			vel = vel.Unit() * --speed;
		
		if (radius < default.radius * 4)
		{
			A_SetSize(radius + 1, height + 2);
			A_SetScale(scale.x+0.15);
		}
		
		super.Tick();
	}
}

class ToxinHands : CastWeapon
{
	Default
	{
		Weapon.YAdjust 10;
		Weapon.AmmoType1 "BlueMana";
		Weapon.AmmoType2 "RedMana";
	}

	States
	{
		Select:
			TNT1 A 0 A_Raise(WEAPONBOTTOM - WEAPONTOP);
		Deselect:
		Ready:
		Fire:
			CFLM A 2 Offset (0, 40);
			CFLM D 2 Offset (0, 50);
			CFLM D 2 Offset (0, 36);
			CFLM E 4 Bright;
			CFLM FFFFFFF 5 Bright A_NewProjectile("ToxinCloud");
			CFLM E 4 Bright;
			CFLM G 2 Offset (0, 40);
			CFLM G 2;
			Stop;
	}
}

class Prayer : Skill
{
	Default
	{
		Tag "$TAG_PRAYER";
		Skill.Description "$DESC_PRAYER";
		Skill.BuffType "PrayerBuff";
		Skill.Cost 26;
		Skill.Type "GreenMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 1050;
		Skill.CoolDown 700;
		Skill.Range 480;
		Inventory.Icon "DMFXA1";
		
		+SKILL.AREABUFF
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
}

class PrayerBuff : Buff
{
	Default
	{
		Buff.Duration 1050;
		DamageFactor "None", 0.75;
		Inventory.Icon "DMFXA1";
		
		+BUFF.DEFENSIVE
	}
}

class Ignite : Skill
{
	Default
	{
		Tag "$TAG_IGNITE";
		Skill.Description "$DESC_IGNITE";
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 17;
		Inventory.Icon "CFFXA0";
	}
	
	override void UseSkill()
	{
		if (!CheckAmmo(5, type, reserveType))
		{
			Console.Printf(Stringtable.Localize("$WARN_NOAMMO"));
			return;
		}
		
		FLineTraceData t;
		owner.LineTrace(owner.angle, 256, owner.pitch, offsetz: owner.height/2-owner.floorclip+owner.player.mo.attackZOffset*owner.player.crouchfactor, data: t);
		if (!t.hitActor)
			return;
		
		TakeAmmo(5, type, reserveType);
		t.hitActor.GiveInventoryType("IgniteDebuff");
		let id = t.hitActor.FindInventory("IgniteDebuff");
		if (id)
			id.master = owner;
		
		let brn = Burn(t.hitActor.FindInventory("Burn"));
		if (brn)
			brn.AddAilment(owner, 100, 15);
	}
}

class IgniteDebuff : Buff
{
	Default
	{
		Inventory.Icon "CFFXA0";
		Buff.Duration 175;
	}
	
	override void OwnerDied()
	{
		let fi = Spawn("IgniteFire", (owner.pos.xy, owner.floorz), ALLOW_REPLACE);
		if (fi)
			fi.target = master;
	}
}

class IgniteFire : AreaOfEffect
{
	int fireTimer;
	
	Default
	{
		AreaOfEffect.AilmentPower 100;
		AreaOfEffect.AilmentType "Burn";
		AreaOfEffect.AilmentDamage 15;
		AreaOfEffect.CoolDownToken "GroundFireHit";
		Height 16;
		Radius 128;
		Threshold 175;
		
		+AREAOFEFFECT.SHATTERER
		+AREAOFEFFECT.GROUNDED
	}
	
	override void Effect()
	{
		if (++fireTimer > 2)
		{
			fireTimer = 0;
			
			double rad = frandom(0, radius);
			double theta = frandom(0, 359.9999);
			Vector2 ofs = Vec2Offset(rad*cos(theta), rad*sin(theta));
			Spawn("FlameFX2", (ofs, floorz));
		}
	}
	
	override int DoSpecialDamage(Actor target, int damage, name damagetype)
	{
		if (target && !target.FindInventory("IgniteDebuff"))
		{
			target.GiveInventoryType("IgniteDebuff");
			let fd = target.FindInventory("IgniteDebuff");
			if (fd)
				fd.master = target;
		}
		
		return super.DoSpecialDamage(target, damage, damagetype);
	}
}

class Blight : Skill
{
	Default
	{
		Tag "$TAG_BLIGHT";
		Skill.Description "$DESC_BLIGHT";
		Skill.BuffType "BlightBuff";
		Inventory.Icon "MWNDC0";
	}
	
	override void OnEquip()
	{
		GiveBuff(owner);
	}
	
	override void OnUnequip()
	{
		TakeBuff();
	}
}

class BlightBuff : Buff
{
	Default
	{
		DamageFactor "Bleed", 1.5;
		DamageFactor "Burn", 1.5;
		DamageFactor "Illness", 1.5;
		Inventory.Icon "MWNDC0";
		
		+BUFF.INFINITE
		+BUFF.OFFENSIVE
	}
}

class Blessing : Skill
{
	Default
	{
		Tag "$TAG_BLESSING";
		Skill.Description "$DESC_BLESSING";
		Skill.BuffType "BlessingBuff";
		Skill.Cost 26;
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 1050;
		Skill.CoolDown 700;
		Skill.Range 480;
		Inventory.Icon "SHEXA0";
		
		+SKILL.AREABUFF
	}
	
	override void UseSkill()
	{
		GiveBuff(owner);
	}
}

class BlessingBuff : Buff
{
	Default
	{
		Buff.Duration 1050;
		DamageFactor "None", 1.25;
		Inventory.Icon "SHEXA0";
		
		+BUFF.OFFENSIVE
	}
}

class DivineHeal : Skill
{
	Default
	{
		Tag "$TAG_DIVINEH";
		Skill.Description "$DESC_DIVINEH";
		Skill.Cost 26;
		Skill.Type "GreenMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 35;
		Skill.CoolDown 700;
		Skill.Range 480;
		Inventory.Icon "ARTIPTN2";
	}
	
	override void UseSkill()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			if (mo && (mo == owner || owner.IsFriend(mo)))
				mo.GiveBody(40);
		}
	}
}

class Proselytize : Skill
{
	Default
	{
		Tag "$TAG_PROS";
		Skill.Description "$DESC_PROS";
		Skill.BuffType "ProselytizeBuff";
		Skill.Type "BlueMana";
		Skill.ReserveType "RedMana";
		Skill.CastTime 35;
		Inventory.Icon "MAN3A0";
	}
	
	override void UseSkill()
	{
		if (!CheckAmmo(13, type, reserveType))
		{
			Console.Printf(Stringtable.Localize("$WARN_NOAMMO"));
			return;
		}
		
		FLineTraceData t;
		owner.LineTrace(owner.angle, 256, owner.pitch, offsetz: owner.height/2-owner.floorclip+owner.player.mo.attackZOffset*owner.player.crouchfactor, data: t);
		if (!t.hitActor || owner.IsFriend(t.hitActor))
		{
			let id = ProselytizeBuff(owner.FindInventory("ProselytizeBuff"));
			if (id && id.minion && id.minion.CheckPosition(owner.pos.xy))
			{
				id.minion.SetOrigin(owner.pos, false);
				id.minion.target = null;
			}
			
			return;
		}
		
		TakeAmmo(13, type, reserveType);
		t.hitActor.master = owner;
		t.hitActor.bFriendly = true;
		t.hitActor.GiveInventoryType("WarriorBuff");
		
		GiveBuff(owner);
		let id = ProselytizeBuff(owner.FindInventory("ProselytizeBuff"));
		if (id)
		{
			if (id.minion)
			{
				id.minion.TakeInventory("WarriorBuff", 1);
				id.minion.health = (id.minion.health / (id.minion.GetMaxHealth()*5)) * id.minion.GetMaxHealth();
				id.minion.bFriendly = false;
				id.minion.target = owner; // They're angry at you now
				id.minion.master = null;
			}
			
			id.minion = t.hitActor;
			id.minionName = t.hitActor.GetClassName();
			id.minionHealth = t.hitActor.health;
			t.hitActor.target = null;
		}
	}
}

class ProselytizeBuff : Buff
{
	Actor minion;
	
	class<Actor> minionName;
	int minionHealth;
	
	private int prevLevelNum;
	
	Default
	{
		Inventory.Icon "MAN3A0";
		
		+BUFF.STACKABLE
		+BUFF.INFINITE
	}
	
	override void DoEffect()
	{
		if (!prevLevelNum)
			prevLevelNum = level.levelNum;
		
		if (level.levelNum != prevLevelNum)
		{
			ThinkerIterator it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
			Actor mo;
			
			while (mo = Actor(it.Next()))
			{
				if (mo && mo.bIsMonster && mo.master == owner && mo == minion)
					mo.Destroy();
			}
		}
		
		prevLevelNum = level.levelNum;
		
		if (minion)
			minionHealth = minion.health;
		else
		{
			let monster = Spawn(minionName, owner.pos);
			if (monster)
			{
				minion = monster;
				monster.bFriendly = true;
				monster.GiveInventoryType("WarriorBuff");
				monster.master = owner;
				monster.health = minionHealth;
				monster.SetState(monster.SeeState);
			}
		}
		
		stacks = 1;
		
		if (!minion || minion.health <= 0)
		{
			Destroy();
			return;
		}
		
		super.DoEffect();
	}
	
	override void OnDamage(Actor inflictor, Actor source)
	{
		if (source && source.bIsMonster && !owner.IsFriend(source))
		{
			if (minion && !minion.target)
				minion.target = source;
		}
	}
	
	override void DealtDamage(Actor damaged)
	{
		if (minion && !minion.target)
			minion.target = damaged;
	}
}

class WarriorBuff : Buff
{
	Default
	{
		DamageFactor "None", 3;
		Inventory.Icon "CFFXA0";
		
		+BUFF.INFINITE
		+BUFF.OFFENSIVE
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		if (owner)
			owner.health = owner.GetMaxHealth()*5;
	}
	
	override void DoEffect()
	{
		if (!owner || owner.health <= 0)
		{
			Destroy();
			return;
		}
		
		super.DoEffect();
	}
}

class DivineWrath : Skill
{
	Default
	{
		Tag "$TAG_DIVINEW";
		Skill.Description "$DESC_DIVINEW";
		Inventory.Icon "WFR1A0";
		
		+SKILL.TOGGLE
	}
	
	override void Effect()
	{
		if (owner.player.ReadyWeapon.GetClass() != "Vengeance")
			bCurToggle = false;
	}
	
	override void UseSkill()
	{
		let mo = Weapon(Spawn("Vengeance"));
		if (mo)
		{
			mo.AttachToOwner(owner);
			owner.player.pendingWeapon = WP_NOCHANGE;
			owner.player.ReadyWeapon = mo;
			let psp = owner.player.GetPSprite(PSP_WEAPON);
			if (psp)
			{
				psp.y = WEAPONBOTTOM;
				psp.SetState(mo.GetUpState());
			}
		}
	}
	
	override void EndSkill()
	{
		if (owner.FindInventory("Vengeance"))
			owner.player.mo.PickNewWeapon(null);
	}
}

class Vengeance : RPGMelee
{
	Default
	{
		Weapon.SelectionOrder 10000;
		RPGMelee.ShieldType "SwordBlock";
		Weapon.YAdjust 10;
		Weapon.AmmoType1 "RedMana";
		
		+INVENTORY.UNDROPPABLE
	}

	States
	{
		Select:
			FSRD A 1 Bright A_Raise;
			Loop;
			
		Deselect:
			FSRD A 1 Bright A_Lower;
			Wait;
			
		Ready:
			FSRD AAAABBBBCCCC 1 Bright A_WeaponReady;
			Loop;
			
		Reload:
			FSRD D 2 Bright Offset (5, 36);
			FSRD E 2 Bright Offset (5, 36) A_MeleeBlock();
			FSRD F 1 Bright Offset (5, 36);
			TNT1 A 0 A_MeleeCheckBlock(2);
			FSRD F 1 Bright Offset (5, 36);
			FSRD E 2 Bright Offset (5, 36) A_MeleeUnblock();
			FSRD D 2 Bright Offset (5, 36);
			Goto Ready;
			
		Fire:
			FSRD DE 3 Bright Offset (5, 36);
			FSRD F 2 Bright Offset (5, 36) A_Melee("DivineSwordBox", 0, 75, 5, 112, 90, -90, minForw: -32);
			FSRD G 3 Bright Offset (5, 36);
			FSRD H 2 Bright Offset (5, 36);
			FSRD I 2 Bright Offset (5, 36);
			FSRD I 10 Bright Offset (5, 150);
			FSRD A 1 Bright Offset (5, 60);
			FSRD B 1 Bright Offset (5, 55);
			FSRD C 1 Bright Offset (5, 50);
			FSRD A 1 Bright Offset (5, 45);
			FSRD B 1 Bright Offset (5, 40);
			Goto Ready;
			
		AltFire:
			FSRD DE 3 Bright Offset (5, 36);
			FSRD F 2 Bright Offset (5, 36) A_Melee("HeavyDivineSwordBox", 0, 150, 5, 224, 90, -90, minForw: -32);
			FSRD G 3 Bright Offset (5, 36);
			FSRD H 2 Bright Offset (5, 36);
			FSRD I 2 Bright Offset (5, 36);
			FSRD I 10 Bright Offset (5, 150);
			FSRD A 1 Bright Offset (5, 60);
			FSRD B 1 Bright Offset (5, 55);
			FSRD C 1 Bright Offset (5, 50);
			FSRD A 1 Bright Offset (5, 45);
			FSRD B 1 Bright Offset (5, 40);
			TNT1 A 0 A_ReFire;
			Goto Ready;
	}
	
	override void DoEffect()
	{
		if (owner.player.ReadyWeapon != self)
		{
			owner.TakeInventory(GetClass(), 1);
			return;
		}
		
		super.DoEffect();
	}
}

class DivineSwordBox : HurtBox
{
	Default
	{
		Radius 3;
		Height 2;
		HurtBox.BonusDamageType "Fire";
		HurtBox.BonusAilmentPower 50;
		HurtBox.BonusAilmentType "Burn";
		HurtBox.BonusAilmentDamage 15;
		HurtBox.BonusType "RedMana";
		HurtBox.BonusCost 2;
		HurtBox.ForwardOffset 16;
		ActiveSound "FighterHammerHitWall";
		AttackSound "FighterAxeHitThing";
	}
}

class HeavyDivineSwordBox : DivineSwordBox
{
	Default
	{
		HurtBox.BonusAilmentPower 75;
		HurtBox.BonusCost 5;
	}
}